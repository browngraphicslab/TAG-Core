window.ITE = window.ITE || {};



ITE.TextProvider = function(trackData, player, timeManager, orchestrator){
	//extend the super class
	var Utils 		= new ITE.Utils(),
		TAGUtils	= ITE.TAGUtils,
		_super 		= new ITE.ProviderInterfacePrototype(trackData, player, timeManager, orchestrator),
		self 		= this;
	Utils.extendsPrototype(this, _super);	
	var _attachedAsset,
		_textDiv;//create the div that will hold the text
	// Start things up...
    initialize();

    ///////////////////////////////////////////////////////////////////////////
	// ProviderInterface functions. 
	///////////////////////////////////////////////////////////////////////////

    /*
	 * I/P: 	none
	 * Initializes track, creates UI, and attaches handlers.
	 * O/P: 	none
	 */
	function initialize() {
		_super.initialize()

		if (trackData.experienceReference !== "null") {
			_attachedAsset = findAttachedAsset(trackData.experienceReference);
			attachToAsset(_attachedAsset);
		};
		_textDiv = $(document.createElement("div"));
		_textDiv.text = "This is a test";
		_textDiv.css({
			"width" : "40%",
			"height" : "20%",
			"color" : "black",
		})
		_attachedAsset.append(_textDiv);

	}

	self.attachToAsset = function(assetName){
		tracks = orchestrator.getTracksManager();
		for(int i = 0, i<tracks.length;i++){
			if(tracks[i].trackData.name()){
				
			}
		}
	};
	self.findAttachedAsset = function(experienceReference) {
		var j,
			track;
		//Loop through trackManager to find the asset whose name matches the Ink's experienceReference
		for (j = 0; j < self.orchestrator.trackManager.length; j++) {
			track = self.orchestrator.trackManager[j];
			if (track.trackData.name === experienceReference){
				_attachedAsset = track;
			};
		};
		//If it exists, return it, and if now, throw an error
		if (_attachedAsset) {
			return _attachedAsset;
		} else {
			throw new Error("Failed to find asset '" + experienceReference + "' for attached ink '" + trackData.name + "'");
		};
	};
}
{
    "project": {
        "name": "Touch Art Gallery web application",
        "description": "An application for compiling, contextualizing, and sharing digital art collections.",
        "version": "1.0.0",
        "url": "http://cs.brown.edu/research/ptc/tag",
        "logo": "../images/WideLogo.scale-100.png"
    },
    "files": {
        "js/ITE/ITE/Assets/GenerateRandomTours/genTour.js": {
            "name": "js/ITE/ITE/Assets/GenerateRandomTours/genTour.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/Assets/GenerateRandomTours/genTourExternalFile.js": {
            "name": "js/ITE/ITE/Assets/GenerateRandomTours/genTourExternalFile.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js": {
            "name": "js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js": {
            "name": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js": {
            "name": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js": {
            "name": "js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITE Core/ITEManual/ITE.Orchestrator.js": {
            "name": "js/ITE/ITE/ITE Core/ITEManual/ITE.Orchestrator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js": {
            "name": "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js": {
            "name": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITE Core/Utils/TAG.Util.js": {
            "name": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/ITE/ITE/ITECore.js": {
            "name": "js/ITE/ITE/ITECore.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/artmode/TAG.AnnotatedImage.js": {
            "name": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "modules": {},
            "classes": {
                "TAG.AnnotatedImage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/authoring/jscolor/jscolor.js": {
            "name": "js/TAG/authoring/jscolor/jscolor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/authoring/TAG.Authoring.FileUploader.js": {
            "name": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/authoring/TAG.Authoring.SettingsView.js": {
            "name": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/layout/TAG.Layout.ArtworkEditor.js": {
            "name": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "modules": {},
            "classes": {
                "TAG.Layout.ArtworkEditor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/layout/TAG.Layout.ArtworkViewer.js": {
            "name": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "modules": {},
            "classes": {
                "TAG.Layout.ArtworkViewer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/layout/TAG.Layout.CollectionsPage.js": {
            "name": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "modules": {},
            "classes": {
                "TAG.Layout.CollectionsPage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/layout/TAG.Layout.InternetFailurePage.js": {
            "name": "js/TAG/layout/TAG.Layout.InternetFailurePage.js",
            "modules": {},
            "classes": {
                "TAG.Layout.InternetFailurePage.js": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/layout/TAG.Layout.StartPage.js": {
            "name": "js/TAG/layout/TAG.Layout.StartPage.js",
            "modules": {},
            "classes": {
                "TAG.Layout.StartPage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/layout/TAG.Layout.TourAuthoringNew.js": {
            "name": "js/TAG/layout/TAG.Layout.TourAuthoringNew.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/layout/TAG.Layout.TourPlayer.js": {
            "name": "js/TAG/layout/TAG.Layout.TourPlayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/layout/TAG.Layout.VideoPlayer.js": {
            "name": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "modules": {},
            "classes": {
                "TAG.Layout.VideoPlayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.ArtworkTrack.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.ArtworkTrack.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.ArtworkTrack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.AudioTrack.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.AudioTrack.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.AudioTrack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.Command.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.Command.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.Command": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.ComponentControls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.Constants.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.Constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.Display": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "modules": {},
            "classes": {
                "TAG.Authoring.EditorMenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.ImageTrack.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.ImageTrack.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.ImageTrack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.InkAuthoring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.InkTrack.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.InkTrack.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.InkTrack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.Keyframe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.PlaybackControl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.TimeManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.Timeline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.TopMenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.TourOptions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.Track": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.UndoManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.VideoTrack.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.VideoTrack.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.VideoTrack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js": {
            "name": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "modules": {},
            "classes": {
                "TAG.TourAuthoring.Viewer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/util/TAG.Util.IdleTimer.js": {
            "name": "js/TAG/util/TAG.Util.IdleTimer.js",
            "modules": {},
            "classes": {
                "TAG.Util.IdleTimer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/util/TAG.Util.Splitscreen.js": {
            "name": "js/TAG/util/TAG.Util.Splitscreen.js",
            "modules": {},
            "classes": {
                "TAG.Util.Splitscreen": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/util/TAG.Util.js": {
            "name": "js/TAG/util/TAG.Util.js",
            "modules": {},
            "classes": {
                "TAG.Util.Artwork": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/TAG/worktop/TAG.Worktop.Database.js": {
            "name": "js/TAG/worktop/TAG.Worktop.Database.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/core.js": {
            "name": "js/core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/tagInk.js": {
            "name": "js/tagInk.js",
            "modules": {},
            "classes": {
                "tagInk": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/tests.js": {
            "name": "js/tests.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "telemetry/server.js": {
            "name": "telemetry/server.js",
            "modules": {},
            "classes": {
                "Telemetry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "telemetry/telemetry.js": {
            "name": "telemetry/telemetry.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "telemetry/telemetryTest.js": {
            "name": "telemetry/telemetryTest.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Gruntfile.js": {
            "name": "Gruntfile.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "TAG.Util.Artwork": {
            "name": "TAG.Util.Artwork",
            "shortname": "TAG.Util.Artwork",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6293,
            "description": "Utils for the artwork viewer and the artwork editor"
        },
        "tagInk": {
            "name": "tagInk",
            "shortname": "tagInk",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/tagInk.js",
            "line": 1,
            "description": "Library for tour annotation drawing. Instance created in InkES.\nUses the RaphaelJS library for svg manipulation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvId",
                    "description": "the id of the div to which we'll assign the Raphael canvas.",
                    "type": "String"
                },
                {
                    "name": "html_elt",
                    "description": "in the case that the div above is not in the dom yet, send in a variable for its html element.",
                    "type": "HTML element"
                }
            ]
        },
        "TAG.AnnotatedImage": {
            "name": "TAG.AnnotatedImage",
            "shortname": "TAG.AnnotatedImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 3,
            "description": "Representation of deepzoom image with associated media. Contains\ntouch handlers and a method for creating associated media objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "some options for the artwork and assoc media",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "some public methods and variables",
                "type": "Object"
            }
        },
        "TAG.Layout.ArtworkEditor": {
            "name": "TAG.Layout.ArtworkEditor",
            "shortname": "TAG.Layout.ArtworkEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 3,
            "description": "The layout definition for the artwork editor. \nClick 'Edit Artwork Info' in the Authoring Mode to enter.\nContains info, location, and media editors.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "artwork",
                    "description": "doq of the relevant artwork (see github wiki for doq structure)",
                    "type": "Doq"
                }
            ],
            "return": {
                "description": "any public methods or properties",
                "type": "Object"
            }
        },
        "TAG.Layout.ArtworkViewer": {
            "name": "TAG.Layout.ArtworkViewer",
            "shortname": "TAG.Layout.ArtworkViewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 3,
            "description": "The artwork viewer, which contains a sidebar with tools and thumbnails as well\nas a central area for the deepzoom image.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "some options for the artwork viewer page",
                    "type": "Object"
                },
                {
                    "name": "container",
                    "description": "the root container",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "some public methods",
                "type": "Object"
            }
        },
        "TAG.Layout.CollectionsPage": {
            "name": "TAG.Layout.CollectionsPage",
            "shortname": "TAG.Layout.CollectionsPage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 3,
            "description": "The collections page",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "some options for the collections page",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "some public methods",
                "type": "Object"
            }
        },
        "TAG.Layout.InternetFailurePage.js": {
            "name": "TAG.Layout.InternetFailurePage.js",
            "shortname": "TAG.Layout.InternetFailurePage.js",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/layout/TAG.Layout.InternetFailurePage.js",
            "line": 11,
            "description": "Internet failure page, which appears when TAG detects a loss of internet.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "errorType",
                    "description": "// finish documenting"
                },
                {
                    "name": "detach",
                    "description": ""
                }
            ]
        },
        "TAG.Layout.StartPage": {
            "name": "TAG.Layout.StartPage",
            "shortname": "TAG.Layout.StartPage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 4,
            "description": "The start page for TAG, which contains mueseum info, server preferences and credits.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "startPageCallback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "that                 collection of public methods and properties",
                "type": "Object"
            }
        },
        "TAG.Layout.VideoPlayer": {
            "name": "TAG.Layout.VideoPlayer",
            "shortname": "TAG.Layout.VideoPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 3,
            "description": "TAG video player -- a wrapper around the standard html5 video element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "videoSrc",
                    "description": "the doq representing our video",
                    "type": "Doq"
                },
                {
                    "name": "collection",
                    "description": "the parent collection of this video",
                    "type": "Doq"
                },
                {
                    "name": "prevInfo",
                    "description": "some info about where we came from on the collections page:\n                  .artworkPrev     string representing where we came from\n                  .prevScroll      value of the scrollbar from new catalog page",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the object representing public information about the video page\n                          (at the moment, just the root of the DOM)",
                "type": "Object"
            }
        },
        "TAG.TourAuthoring.ArtworkTrack": {
            "name": "TAG.TourAuthoring.ArtworkTrack",
            "shortname": "TAG.TourAuthoring.ArtworkTrack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ArtworkTrack.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details);",
                    "type": "Object",
                    "props": [
                        {
                            "name": "thumbnail",
                            "description": ""
                        }
                    ]
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n              Don't pass in unless you are subclassing this",
                    "type": "Object"
                }
            ]
        },
        "TAG.TourAuthoring.AudioTrack": {
            "name": "TAG.TourAuthoring.AudioTrack",
            "shortname": "TAG.TourAuthoring.AudioTrack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.AudioTrack.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details);"
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n             Don't pass in unless you are subclassing this"
                }
            ]
        },
        "TAG.TourAuthoring.Command": {
            "name": "TAG.TourAuthoring.Command",
            "shortname": "TAG.TourAuthoring.Command",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Command.js",
            "line": 3,
            "description": "Stored in the undo/redo stack, used for multi-level undo/redo",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "An object with the following keys:\n                     execute: Function to execute the command\n                     unexecute: Function to undo the command",
                    "type": "Object"
                }
            ]
        },
        "TAG.TourAuthoring.ComponentControls": {
            "name": "TAG.TourAuthoring.ComponentControls",
            "shortname": "TAG.TourAuthoring.ComponentControls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6,
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "root, timeline, timeManager attr"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ]
        },
        "TAG.TourAuthoring.Display": {
            "name": "TAG.TourAuthoring.Display",
            "shortname": "TAG.TourAuthoring.Display",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 10,
            "description": "Represents region of time where media is playing\nMaps to Keyframe Sequence in RIN\nContains and manages keyframes added to sequence",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "Params: start, length, fadeIn, fadeOut (all time values in seconds), id",
                    "type": "Object"
                },
                {
                    "name": "my",
                    "description": "Update currentDisplay for touch handling, contains timeManager, undoManager, svg, update",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "that  The object to be added to the DOM with it's properties",
                "type": "Object"
            }
        },
        "TAG.Authoring.EditorMenu": {
            "name": "TAG.Authoring.EditorMenu",
            "shortname": "TAG.Authoring.EditorMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 17,
            "description": "Menu for track, display and keyframe editing",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "value from MenuType enum specifying menu layout",
                    "type": "Object"
                },
                {
                    "name": "my",
                    "description": "track's shared my object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "that         the main DOM object",
                "type": "Object"
            }
        },
        "TAG.TourAuthoring.ImageTrack": {
            "name": "TAG.TourAuthoring.ImageTrack",
            "shortname": "TAG.TourAuthoring.ImageTrack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ImageTrack.js",
            "line": 3,
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details);",
                    "type": "Object",
                    "props": [
                        {
                            "name": "thumbnail",
                            "description": ""
                        }
                    ]
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n                                  Don't pass in unless you are subclassing this",
                    "type": "Object"
                }
            ]
        },
        "TAG.TourAuthoring.InkAuthoring": {
            "name": "TAG.TourAuthoring.InkAuthoring",
            "shortname": "TAG.TourAuthoring.InkAuthoring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 16,
            "description": "Back-end for ink authoring and editing. Instances are created in ComponentControls and InkES. In\nComponentControls, we need the ability to author and edit inks. In InkES, we need them to follow\nartworks.\nUses the RaphaelJS library for svg manipulation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvId",
                    "description": "the id of the div to which we'll assign the Raphael canvas.",
                    "type": "String"
                },
                {
                    "name": "html_elt",
                    "description": "in the case that the div above is not in the dom yet, send in a variable for its html element.",
                    "type": "HTML elt"
                },
                {
                    "name": "calling_file",
                    "description": "DEPRECATE!!!! either 'inkes' or not; slightly different functionality is needed in different instances.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "if the calling file is ComponentControls, we make use of the undoManager etc, so just pass\n                                  in the spec variable from ComponentControls.",
                    "type": "Object"
                }
            ]
        },
        "TAG.TourAuthoring.InkTrack": {
            "name": "TAG.TourAuthoring.InkTrack",
            "shortname": "TAG.TourAuthoring.InkTrack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkTrack.js",
            "line": 18,
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details)\"\n                       Additional parameters:\n                       -- media is ink type\n                       -- inkSpec is a spec object w/ ink details\n                           'text'; optional params 'font', 'pt' for text\n                           'drawing' for draw\n                           'shape', 'position' (x,y,w,h); optional params 'opacity' for others",
                    "type": "Object"
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n                      Don't pass in unless you are subclassing this",
                    "type": "Object"
                }
            ]
        },
        "TAG.TourAuthoring.Keyframe": {
            "name": "TAG.TourAuthoring.Keyframe",
            "shortname": "TAG.TourAuthoring.Keyframe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 3,
            "description": "Associated with a display (keyframe sequence)\nMaps to keyframe in RIN (duh)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "location (loc - x,y if audio, just x if visual), keyframe svg group (gkey) attrs"
                },
                {
                    "name": "my",
                    "description": "Update currentKeyframe param for touch handling, contains timeManager, undoManager, and svg"
                }
            ]
        },
        "TAG.TourAuthoring.PlaybackControl": {
            "name": "TAG.TourAuthoring.PlaybackControl",
            "shortname": "TAG.TourAuthoring.PlaybackControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 3,
            "description": "Contains controls for playing and seeking tour",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "timeManager attr undoManager"
                }
            ]
        },
        "TAG.TourAuthoring.TimeManager": {
            "name": "TAG.TourAuthoring.TimeManager",
            "shortname": "TAG.TourAuthoring.TimeManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 3,
            "description": "Stores info re: start/end, current time, scale\nScale converts between time space (seconds) and pixel space (pixels on timeline)\nDispatches events to subscribers on time changes\nAll time values stored as seconds",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "start, end, scale, current parameters, all integers, all in seconds (not required)"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ],
            "return": {
                "description": "that     object containing public functions"
            }
        },
        "TAG.TourAuthoring.Timeline": {
            "name": "TAG.TourAuthoring.Timeline",
            "shortname": "TAG.TourAuthoring.Timeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "@params - timeManager, undoManager, viewer",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "that     public methods of TAG.TourAuthoring.Timeline",
                "type": "Object"
            }
        },
        "TAG.TourAuthoring.TopMenu": {
            "name": "TAG.TourAuthoring.TopMenu",
            "shortname": "TAG.TourAuthoring.TopMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 3,
            "description": "The top-most menu bar for tour authoring\nBack button, rename tour controls, save button, tour options",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "relevant options required for the menu",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "that        the topbar as a DOM object",
                "type": "Object"
            }
        },
        "TAG.TourAuthoring.TourOptions": {
            "name": "TAG.TourAuthoring.TourOptions",
            "shortname": "TAG.TourAuthoring.TourOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 3,
            "description": "Class for the tour authoring 'Options' menu on the top-bar",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "timeManager attr, url (url of tour if loading existing tour for editing)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "that            TourOptions as a DOM object",
                "type": "Object"
            }
        },
        "TAG.TourAuthoring.Track": {
            "name": "TAG.TourAuthoring.Track",
            "shortname": "TAG.TourAuthoring.Track",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 14,
            "description": "Maps to Experience Stream in RIN",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec.type",
                    "description": "one of TAG.TourAuthoring.TrackType"
                },
                {
                    "name": "spec.media",
                    "description": "URI of resource"
                },
                {
                    "name": "spec.title",
                    "description": "Name to display"
                },
                {
                    "name": "spec.id",
                    "description": "Unique id (number)"
                },
                {
                    "name": "spec.guid",
                    "description": "Worktop GUID, artworks only"
                },
                {
                    "name": "spec.timeManager",
                    "description": "Reference to time object storing current length and scale of timeline"
                },
                {
                    "name": "my",
                    "description": "Object that will hold keyframes and displays (for accessing by subclasses w/o making public)\n                         Will be returned w/ 'displays', 'resource', 'type', 'timeManager', 'undoManager', 'track', 'svg' parameters\n                         Also used to track currentDisplay, currentKeyframe on mousedown, selectedKeyframe for keyframe capture (set in displays and keyframes)"
                }
            ]
        },
        "TAG.TourAuthoring.UndoManager": {
            "name": "TAG.TourAuthoring.UndoManager",
            "shortname": "TAG.TourAuthoring.UndoManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 3,
            "description": "Can unexecute or execute (undo / redo) these commands",
            "is_constructor": 1,
            "return": {
                "description": "that                public methods of the class",
                "type": "Object"
            }
        },
        "TAG.TourAuthoring.VideoTrack": {
            "name": "TAG.TourAuthoring.VideoTrack",
            "shortname": "TAG.TourAuthoring.VideoTrack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.VideoTrack.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details);",
                    "type": "Object"
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n                      Don't pass in unless you are subclassing this",
                    "type": "Object"
                }
            ]
        },
        "TAG.TourAuthoring.Viewer": {
            "name": "TAG.TourAuthoring.Viewer",
            "shortname": "TAG.TourAuthoring.Viewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "spec",
                    "description": "timeManager attr, url (url of tour if loading existing tour for editing)"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ]
        },
        "TAG.Util.IdleTimer": {
            "name": "TAG.Util.IdleTimer",
            "shortname": "TAG.Util.IdleTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 1,
            "description": "TAG idle timer class. Wraps idle timer-related\nfunctions in a contained scope.",
            "is_constructor": 1,
            "return": {
                "description": "a couple public methods",
                "type": "Object"
            }
        },
        "TAG.Util.Splitscreen": {
            "name": "TAG.Util.Splitscreen",
            "shortname": "TAG.Util.Splitscreen",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 3,
            "description": "Utility functions for splitscreen mode.",
            "is_constructor": 1,
            "return": {
                "description": "some public methods",
                "type": "Object"
            }
        },
        "Telemetry": {
            "name": "Telemetry",
            "shortname": "Telemetry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "telemetry/server.js",
            "line": 1,
            "description": "A basic telemetry server. Should probably be hooked up with a DB.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "js/ITE/ITE/Assets/GenerateRandomTours/genTour.js",
            "line": 3,
            "description": "Returns a random integer between min (inclusive) and max (inclusive)\nUsing Math.round() will give you a non-uniform distribution!",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/Assets/GenerateRandomTours/genTourExternalFile.js",
            "line": 3,
            "description": "Returns a random integer between min (inclusive) and max (inclusive)\nUsing Math.round() will give you a non-uniform distribution!",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js",
            "line": 33,
            "description": "I/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js",
            "line": 65,
            "description": "I/P: none\nLoads actual audio asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js",
            "line": 85,
            "description": "I/P: none\nGrabs current actual state of audio, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js",
            "line": 101,
            "description": "I/P: state\tstate to make actual audio reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js",
            "line": 111,
            "description": "I/P: none\nPlays audio asset\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "line": 34,
            "description": "I/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "line": 93,
            "description": "I/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "line": 104,
            "description": "I/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "line": 118,
            "description": "I/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "line": 225,
            "description": "I/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "line": 232,
            "description": "I/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "line": 248,
            "description": "Scroll/pinch-zoom handler for makeManipulatable on the deepzoom image",
            "itemtype": "method",
            "name": "dzScroll",
            "params": [
                {
                    "name": "scale",
                    "description": "scale factor",
                    "type": "Number"
                },
                {
                    "name": "pivot",
                    "description": "location of event (x,y)",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js",
            "line": 263,
            "description": "I/P: none\nInitializes handlers",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "line": 35,
            "description": "I/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "line": 73,
            "description": "I/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "line": 91,
            "description": "I/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "line": 114,
            "description": "I/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "line": 159,
            "description": "I/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "line": 166,
            "description": "I/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "line": 206,
            "description": "I/P {Number} scale     scale factor\nI/P {Object} pivot     point of contact (with regards to image container, NOT window)\nZoom handler for associated media (e.g., for mousewheel scrolling)",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js",
            "line": 247,
            "description": "I/P: none\nInitializes handlers",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js",
            "line": 31,
            "description": "I/P: none\nInitializes track, creates UI",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js",
            "line": 71,
            "description": "I/P: experienceReference name of asset to attach from Ink\nFinds the attached asset for the ink track (the track to attach the ink to)\nO/P: _attachedAsset Actual reference to the track that holds this asset",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js",
            "line": 99,
            "description": "I/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js",
            "line": 109,
            "description": "I/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js",
            "line": 125,
            "description": "I/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Orchestrator.js",
            "line": 18,
            "description": "I/P: {URL}     \tdataURL    Location of JSON data about keyframes/tracks\nLoads and parses JSON data using AJAX, then figures out which assetProvider to use to actually load the asset.\nOnce the asset is loaded, the initializeTracks() is called, and when tracks are ready, the tour is played. \nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Orchestrator.js",
            "line": 41,
            "description": "I/P: none\nHelper function to load tour with AJAX (called below)\nCalls CreatTrackByProvider, initializes the tracks, load their actual sources, and if they're ready, plays them\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Orchestrator.js",
            "line": 71,
            "description": "I/P: {object}\ttrackData\tobject with parsed JSON data about the track\nCreates track based on providerID\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js",
            "line": 62,
            "description": "I/P: {html}     playerParent    to attach ITE player to; defaults to document if nothing is specified\n     {object}   options         dictionary including what kinds of control the player should have      \nO/P: {object}   ITEPlayer       a new ITE player object",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js",
            "line": 396,
            "description": "I/P:  none\nToggles full screen\nO/P:  none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js",
            "line": 405,
            "description": "I/P:    none\nSets fullscreen and changes UI accordingly\nO/P:    none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js",
            "line": 416,
            "description": "I/P:    none\nRemoves fullscreen and changes UI accordingly\nO/P:    none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js",
            "line": 429,
            "description": "I/P:\tnone\nToggles whether or not the play is in loop\nO/P:\tnone",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js",
            "line": 438,
            "description": "I/P:    none\nSets tour to loop and changes UI accordingly\nO/P:    none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js",
            "line": 449,
            "description": "I/P:    none\nSets tour to not be in loop and changes UI accordingly\nO/P:    none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 34,
            "description": "I/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 77,
            "description": "I/P: none\nLoads actual video asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 99,
            "description": "I/P: none\nGrabs current actual state of video, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 123,
            "description": "I/P: state\tstate to make actual video reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 139,
            "description": "I/P: none\nPlays video asset\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 226,
            "description": "I/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 234,
            "description": "I/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 271,
            "description": "I/P {Number} scale     scale factor\nI/P {Object} pivot     point of contact (with regards to image container, NOT window)\nZoom handler for associated media (e.g., for mousewheel scrolling)",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js",
            "line": 312,
            "description": "I/P: none\nInitializes handlers",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 1430,
            "description": "Used by web app code to slide in pages given their html files",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the html file within the html directory"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 1453,
            "params": [
                {
                    "name": "collectionId",
                    "description": "the id of the collection whose local visibility we want to check or set"
                },
                {
                    "name": "setValue",
                    "description": "falsy if just want to return visibility status\n                           if we want to set collection to be locally visible\n                         {visible: false} if we want to hide the collection locally",
                    "type": "Visible: true"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 1481,
            "description": "Utils for Animation, splitscreen, colors and the like",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 1954,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 2293,
            "description": "Following functions transition between pages while in splitscreen mode",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 2296,
            "description": "Use _Split fn's for transitions that need to preserve splitscreen\nNote: pages passed in to this function should have a top-level root node\n(true of exhibition, catalog and artmode)",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 2321,
            "description": "Set up handlers for back button",
            "itemtype": "method",
            "name": "setUpBackButton",
            "params": [
                {
                    "name": "elt",
                    "description": "jQuery object for back button element",
                    "type": "JQuery Obj"
                },
                {
                    "name": "clickHandler",
                    "description": "click handler for button",
                    "type": "Function"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 2417,
            "description": "Use for any page transition that does not need to preserve splitscreen",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 2732,
            "description": "Creates a picker (e.g. click add/remove media in the artwork editor) to manage\n  associations between different TAG components (exhib, artworks, assoc media)",
            "params": [
                {
                    "name": "root",
                    "description": "object: jquery object for the root of the DOM (we'll append an overlay to this)"
                },
                {
                    "name": "title",
                    "description": "string: the title to appear at the top of the picker"
                },
                {
                    "name": "target",
                    "description": "object: a comp property (object whose associations we're managing) and a type property\n                              ('exhib', 'artwork', 'media') telling us what kind of component it is"
                },
                {
                    "name": "type",
                    "description": "string: \"exhib\" (exhib-artwork), \"artwork\" (artwork-media) : type of the association"
                },
                {
                    "name": "tabs",
                    "description": "array: list of tab objects. Each has a name property (string, title of tab), a getObjs\n                             property (a function to be called to get each entity listed in the tab), and a\n                             args property (which will be extra arguments sent to getObjs)"
                },
                {
                    "name": "filter",
                    "description": "object: a getObjs property to get components that are already associated with target\n                              (e.g. getAssocMediaTo if type='artwork') and an args property (extra args to getObjs)"
                },
                {
                    "name": "callback",
                    "description": "function: function to be called when import is clicked or a component is double clicked"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 3084,
            "description": "Creates the media panel",
            "params": [
                {
                    "name": "compArray",
                    "description": "the list of media to appear in the panel"
                },
                {
                    "name": "applyClick",
                    "description": "function to add handlers to each holder element"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 3496,
            "description": "Creates a thumbnail button to be used in a side bar list",
            "itemtype": "method",
            "name": "createThumbnailButton",
            "params": [
                {
                    "name": "options",
                    "description": "options for creating the thumbnail button:\n           title         title of the button, shown under the thumbnail\n           handler       a click handler for the button\n           buttonClass   an extra class to add to the button\n           buttonID      an id to give to the button\n           src           thumbnail image source\n           width         custom width of button\n           height        custom height of button",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the button",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 3526,
            "description": "----------------------------------------------\n        |                                            |  <--- holder\n        | ------------------------------------------ |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | <------ thumbHolderDiv\n        | |                                        | |\n        | |              THUMBNAIL                 | |\n        | |                IMAGE                   | |\n        | |                 HERE                  <--------- thumbnailImage\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | ------------------------------------------ |\n        | ------------------------------------------ |\n        | |             NAME OF DOQ                | <--- titleDiv\n        | |                                        | |\n        | ------------------------------------------ |\n        ----------------------------------------------",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 3584,
            "description": "Built-in object extensions",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 3607,
            "description": "If specified object is in the array, remove it",
            "params": [
                {
                    "name": "obj",
                    "description": "object to be removed"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 3621,
            "description": "Insert object into array based on comparator fn given\nAssumes array is already sorted!",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be inserted"
                },
                {
                    "name": "comp",
                    "description": "Function used to compare objects; obj will be inserted when comp evaluates to true; takes two args, first is current array elt, second is obj"
                }
            ],
            "return": {
                "description": "Index of obj in array after insertion"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITE Core/Utils/TAG.Util.js",
            "line": 3640,
            "description": "Constrain a number to given range",
            "params": [
                {
                    "name": "num",
                    "description": "value to constrain"
                },
                {
                    "name": "min",
                    "description": "minimum limit"
                },
                {
                    "name": "max",
                    "description": "maximum limit"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 111,
            "description": "Pans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "params": [
                {
                    "name": "dims",
                    "description": "the current dimensions of our artwork in absolute coordinates"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 174,
            "description": "Convert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path to reverse"
                }
            ],
            "return": {
                "description": "reversed path (with outer path)"
            },
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 230,
            "description": "Uses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 282,
            "description": "A helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 322,
            "description": "Takes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring"
                },
                {
                    "name": "attr",
                    "description": "the attribute we'll parse for"
                },
                {
                    "name": "parsetype",
                    "description": "'i' (int), 's' (string), or 'f' (float)"
                }
            ],
            "return": {
                "description": "the value of the attribute in the correct format"
            },
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 342,
            "description": "Loads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "params": [
                {
                    "name": "the",
                    "description": "datastring to be loaded (see update_datastring for datastring format)"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 444,
            "description": "Helper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 452,
            "description": "Pans all objects in the canvas by dx, dy.",
            "params": [
                {
                    "name": "dx,",
                    "description": "dy    the deltas"
                },
                {
                    "name": "draw",
                    "description": "should we take time to draw the objects?"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 507,
            "description": "Helper function to convert to relative coordinates.",
            "params": [
                {
                    "name": "abs_coord",
                    "description": "the absolute coordinate"
                },
                {
                    "name": "canv_dim",
                    "description": "the relevant canvas dimension to scale by"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 517,
            "description": "Removes all Raphael elements from the canvas and clears arrays",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 532,
            "description": "Resizes all elements in the ink canvas.",
            "params": [
                {
                    "name": "scale_x,",
                    "description": "scale_y   the scale factors to resize by"
                },
                {
                    "name": "draw",
                    "description": "should we take the time to draw the result?"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 584,
            "description": "Set the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 608,
            "description": "Setter for the artname of a linked ink's associated artwork",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 616,
            "description": "Setter (sets experience id of ink)",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 624,
            "description": "Sets the initial artwork keyframe",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 632,
            "description": "Sets the ink mode",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 641,
            "description": "Returns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "return": {
                "description": "up to date datastring"
            },
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 700,
            "description": "When we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring loaded"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 878,
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 935,
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 2365,
            "description": "Used by web app code to slide in pages given their html files",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the html file within the html directory"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 2388,
            "params": [
                {
                    "name": "collectionId",
                    "description": "the id of the collection whose local visibility we want to check or set"
                },
                {
                    "name": "setValue",
                    "description": "falsy if just want to return visibility status\n                           if we want to set collection to be locally visible\n                         {visible: false} if we want to hide the collection locally",
                    "type": "Visible: true"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 2416,
            "description": "Utils for Animation, splitscreen, colors and the like",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 2889,
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 3228,
            "description": "Following functions transition between pages while in splitscreen mode",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 3231,
            "description": "Use _Split fn's for transitions that need to preserve splitscreen\nNote: pages passed in to this function should have a top-level root node\n(true of exhibition, catalog and artmode)",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 3256,
            "description": "Set up handlers for back button",
            "itemtype": "method",
            "name": "setUpBackButton",
            "params": [
                {
                    "name": "elt",
                    "description": "jQuery object for back button element",
                    "type": "JQuery Obj"
                },
                {
                    "name": "clickHandler",
                    "description": "click handler for button",
                    "type": "Function"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 3352,
            "description": "Use for any page transition that does not need to preserve splitscreen",
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 3667,
            "description": "Creates a picker (e.g. click add/remove media in the artwork editor) to manage\n  associations between different TAG components (exhib, artworks, assoc media)",
            "params": [
                {
                    "name": "root",
                    "description": "object: jquery object for the root of the DOM (we'll append an overlay to this)"
                },
                {
                    "name": "title",
                    "description": "string: the title to appear at the top of the picker"
                },
                {
                    "name": "target",
                    "description": "object: a comp property (object whose associations we're managing) and a type property\n                              ('exhib', 'artwork', 'media') telling us what kind of component it is"
                },
                {
                    "name": "type",
                    "description": "string: \"exhib\" (exhib-artwork), \"artwork\" (artwork-media) : type of the association"
                },
                {
                    "name": "tabs",
                    "description": "array: list of tab objects. Each has a name property (string, title of tab), a getObjs\n                             property (a function to be called to get each entity listed in the tab), and a\n                             args property (which will be extra arguments sent to getObjs)"
                },
                {
                    "name": "filter",
                    "description": "object: a getObjs property to get components that are already associated with target\n                              (e.g. getAssocMediaTo if type='artwork') and an args property (extra args to getObjs)"
                },
                {
                    "name": "callback",
                    "description": "function: function to be called when import is clicked or a component is double clicked"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4019,
            "description": "Creates the media panel",
            "params": [
                {
                    "name": "compArray",
                    "description": "the list of media to appear in the panel"
                },
                {
                    "name": "applyClick",
                    "description": "function to add handlers to each holder element"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4431,
            "description": "Creates a thumbnail button to be used in a side bar list",
            "itemtype": "method",
            "name": "createThumbnailButton",
            "params": [
                {
                    "name": "options",
                    "description": "options for creating the thumbnail button:\n           title         title of the button, shown under the thumbnail\n           handler       a click handler for the button\n           buttonClass   an extra class to add to the button\n           buttonID      an id to give to the button\n           src           thumbnail image source\n           width         custom width of button\n           height        custom height of button",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the button",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4461,
            "description": "----------------------------------------------\n        |                                            |  <--- holder\n        | ------------------------------------------ |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | <------ thumbHolderDiv\n        | |                                        | |\n        | |              THUMBNAIL                 | |\n        | |                IMAGE                   | |\n        | |                 HERE                  <--------- thumbnailImage\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | ------------------------------------------ |\n        | ------------------------------------------ |\n        | |             NAME OF DOQ                | <--- titleDiv\n        | |                                        | |\n        | ------------------------------------------ |\n        ----------------------------------------------",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4519,
            "description": "Built-in object extensions",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4542,
            "description": "If specified object is in the array, remove it",
            "params": [
                {
                    "name": "obj",
                    "description": "object to be removed"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4556,
            "description": "Insert object into array based on comparator fn given\nAssumes array is already sorted!",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be inserted"
                },
                {
                    "name": "comp",
                    "description": "Function used to compare objects; obj will be inserted when comp evaluates to true; takes two args, first is current array elt, second is obj"
                }
            ],
            "return": {
                "description": "Index of obj in array after insertion"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4575,
            "description": "Constrain a number to given range",
            "params": [
                {
                    "name": "num",
                    "description": "value to constrain"
                },
                {
                    "name": "min",
                    "description": "minimum limit"
                },
                {
                    "name": "max",
                    "description": "maximum limit"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4588,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4616,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4651,
            "description": "I/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4689,
            "description": "I/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4707,
            "description": "I/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4730,
            "description": "I/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4775,
            "description": "I/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4782,
            "description": "I/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4822,
            "description": "I/P {Number} scale     scale factor\nI/P {Object} pivot     point of contact (with regards to image container, NOT window)\nZoom handler for associated media (e.g., for mousewheel scrolling)",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4863,
            "description": "I/P: none\nInitializes handlers",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4882,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4916,
            "description": "I/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4959,
            "description": "I/P: none\nLoads actual video asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 4981,
            "description": "I/P: none\nGrabs current actual state of video, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5005,
            "description": "I/P: state\tstate to make actual video reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5021,
            "description": "I/P: none\nPlays video asset\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5108,
            "description": "I/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5116,
            "description": "I/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5153,
            "description": "I/P {Number} scale     scale factor\nI/P {Object} pivot     point of contact (with regards to image container, NOT window)\nZoom handler for associated media (e.g., for mousewheel scrolling)",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5194,
            "description": "I/P: none\nInitializes handlers",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5212,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5246,
            "description": "I/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5305,
            "description": "I/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5316,
            "description": "I/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5330,
            "description": "I/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5437,
            "description": "I/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5444,
            "description": "I/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5460,
            "description": "Scroll/pinch-zoom handler for makeManipulatable on the deepzoom image",
            "itemtype": "method",
            "name": "dzScroll",
            "params": [
                {
                    "name": "scale",
                    "description": "scale factor",
                    "type": "Number"
                },
                {
                    "name": "pivot",
                    "description": "location of event (x,y)",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5475,
            "description": "I/P: none\nInitializes handlers",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5530,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5563,
            "description": "I/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5595,
            "description": "I/P: none\nLoads actual audio asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5615,
            "description": "I/P: none\nGrabs current actual state of audio, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5631,
            "description": "I/P: state\tstate to make actual audio reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5641,
            "description": "I/P: none\nPlays audio asset\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5711,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5742,
            "description": "I/P: none\nInitializes track, creates UI",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5782,
            "description": "I/P: experienceReference name of asset to attach from Ink\nFinds the attached asset for the ink track (the track to attach the ink to)\nO/P: _attachedAsset Actual reference to the track that holds this asset",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5810,
            "description": "I/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5820,
            "description": "I/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5836,
            "description": "I/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5871,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 5914,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6059,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6077,
            "description": "I/P: {URL}     \tdataURL    Location of JSON data about keyframes/tracks\nLoads and parses JSON data using AJAX, then figures out which assetProvider to use to actually load the asset.\nOnce the asset is loaded, the initializeTracks() is called, and when tracks are ready, the tour is played. \nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6100,
            "description": "I/P: none\nHelper function to load tour with AJAX (called below)\nCalls CreatTrackByProvider, initializes the tracks, load their actual sources, and if they're ready, plays them\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6130,
            "description": "I/P: {object}\ttrackData\tobject with parsed JSON data about the track\nCreates track based on providerID\nO/P: none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6239,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6301,
            "description": "I/P: {html}     playerParent    to attach ITE player to; defaults to document if nothing is specified\n     {object}   options         dictionary including what kinds of control the player should have      \nO/P: {object}   ITEPlayer       a new ITE player object",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6635,
            "description": "I/P:  none\nToggles full screen\nO/P:  none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6644,
            "description": "I/P:    none\nSets fullscreen and changes UI accordingly\nO/P:    none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6655,
            "description": "I/P:    none\nRemoves fullscreen and changes UI accordingly\nO/P:    none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6668,
            "description": "I/P:\tnone\nToggles whether or not the play is in loop\nO/P:\tnone",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6677,
            "description": "I/P:    none\nSets tour to loop and changes UI accordingly\nO/P:    none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6688,
            "description": "I/P:    none\nSets tour to not be in loop and changes UI accordingly\nO/P:    none",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/ITE/ITE/ITECore.js",
            "line": 6716,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 82,
            "description": "Return applicable manipulation method",
            "itemtype": "method",
            "name": "getToManip",
            "return": {
                "description": "manipulation method object",
                "type": "Object"
            },
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 92,
            "description": "Return the dimensions of the active associated media or artwork",
            "itemtype": "method",
            "name": "getMediaPivot",
            "return": {
                "description": "object with dimensions",
                "type": "Object"
            },
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 102,
            "description": "Return list of associatedMedia",
            "itemtype": "method",
            "name": "getAssociatedMedia",
            "return": {
                "description": "associated media object",
                "type": "Object"
            },
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 111,
            "description": "Open the deepzoom image",
            "itemtype": "method",
            "name": "openArtwork",
            "params": [
                {
                    "name": "doq",
                    "description": "artwork doq to open // TODO this shouldn't be necessary -- we know the artwork...",
                    "type": "Doq"
                }
            ],
            "return": {
                "description": "whether opening was successful",
                "type": "Boolean"
            },
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 127,
            "description": "Wrapper around Seadragon.Drawer.updateOverlay; moves an HTML element \"overlay.\"\nUsed mostly in conjunction with hotspot circles (this function is currently\nonly called from ArtworkEditor.js)",
            "itemtype": "method",
            "name": "updateOverlay",
            "params": [
                {
                    "name": "element",
                    "description": "the overlay element to move",
                    "type": "HTML element"
                },
                {
                    "name": "placement",
                    "description": "the new placement of the overlay",
                    "type": "Seadragon.OverlayPlacement"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 144,
            "description": "Wrapper around Seadragon.Drawer.addOverlay; adds an HTML overlay to the seadragon\ncanvas. Currently only used in ArtworkEditor.js.",
            "itemtype": "method",
            "name": "addOverlay",
            "params": [
                {
                    "name": "element",
                    "description": "the overlay element to add",
                    "type": "HTML element"
                },
                {
                    "name": "point",
                    "description": "the point at which to add the overlay",
                    "type": "Seadragon.Point"
                },
                {
                    "name": "placement",
                    "description": "the placement at the given point",
                    "type": "Seadragon.OverlayPlacement"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 164,
            "description": "Wrapper around Seadragon.Drawer.removeOverlay. Removes an HTML overlay from the seadragon\ncanvas.",
            "itemtype": "method",
            "name": "removeOverlay",
            "params": [
                {
                    "name": "the",
                    "description": "ovlerlay element to remove",
                    "type": "HTML element"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 180,
            "description": "Unloads the seadragon viewer",
            "itemtype": "method",
            "name": "unload",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 188,
            "description": "When the artwork is active, sets the manipulation method and dimensions for the active container",
            "itemtype": "method",
            "name": "dzManipPreprocessing",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 201,
            "description": "Manipulation/drag handler for makeManipulatable on the deepzoom image",
            "itemtype": "method",
            "name": "dzManip",
            "params": [
                {
                    "name": "res",
                    "description": "object containing hammer event info",
                    "type": "Object"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 229,
            "description": "Scroll/pinch-zoom handler for makeManipulatable on the deepzoom image",
            "itemtype": "method",
            "name": "dzScroll",
            "params": [
                {
                    "name": "scale",
                    "description": "scale factor",
                    "type": "Number"
                },
                {
                    "name": "pivot",
                    "description": "location of event (x,y)",
                    "type": "Object"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 249,
            "description": "Reset the deepzoom image (center, zoom out) if an element is not currently visible in the viewport.\nUsed in rich location history.",
            "itemtype": "method",
            "name": "panToPoint",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 269,
            "description": "Sets up the annotated image to allow zoom on double click.  Used in RLH",
            "itemtype": "method",
            "name": "initZoom",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 282,
            "description": "Zooms into the deepzoom image.  Used when double-clicking on a map in rlh.",
            "itemtype": "method",
            "name": "zoomToPoint()",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 290,
            "description": "Returns whether an element is in the viewport's bounds (including a buffer of 10 pixels)\nUsed in rich location history.",
            "itemtype": "method",
            "name": "isInViewportBounds",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 315,
            "description": "Returns whether an element is within the bounds of the deepzoom image (with a margin of .05 in Seadragon coordinates)\nUsed in rich location history.",
            "itemtype": "method",
            "name": "isInImageBounds",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 333,
            "description": "Returns coordinates that an element should be returned to if it is dragged too far from the deepzoom image.\n(with a margin of .05 in Seadragon coordinates)\nUsed in rich location history.",
            "itemtype": "method",
            "name": "returnElementToBounds",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 368,
            "description": "Calculates the location (point) of an element (bottom center)\nUsed in rich location history.",
            "itemtype": "method",
            "name": "locationOf",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 383,
            "description": "Puts an element in the center of the viewport\nUsed in RLH",
            "itemtype": "method",
            "name": "centerElement",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 396,
            "description": "Gets a Seadragon point from the given overlay element. Uses BOTTOM as the default OverlayPlacement",
            "itemtype": "method",
            "name": "getCoordinate",
            "params": [
                {
                    "name": "element",
                    "description": "the overlay element",
                    "type": "HTML elt"
                }
            ],
            "return": {
                "description": "the location of the overlay in Seadragon coordinates",
                "type": "Seadragon.Point"
            },
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 409,
            "description": "Returns a Seadragon point corresponding to a pixel\nUsed in RLH",
            "itemtype": "method",
            "name": "pointFromPixel",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 418,
            "description": "Returns a Seadragon point in the center of the viewport + a 1% offset (to prevent overlap)\nUsed in RLH to create new pins",
            "itemtype": "method",
            "name": "createStartingPoint",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 430,
            "description": "Used for zooming when simultaneously dragging a pin in RLH",
            "itemtype": "method",
            "name": "scroll",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 464,
            "description": "Initialize seadragon, set up handlers for the deepzoom image, load assoc media if necessary",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 510,
            "description": "Adds an animation handler to the annotated image. This is used to allow the image to move\nwhen the minimap is manipulated.",
            "itemtype": "method",
            "name": "addAnimationHandler",
            "params": [
                {
                    "name": "handler",
                    "description": "the handler to add",
                    "type": "Function"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 520,
            "description": "Retrieves associated media from server and stores them in the\nassociatedMedia array.",
            "itemtype": "method",
            "name": "loadAssociatedMedia",
            "params": [
                {
                    "name": "callback",
                    "description": "function to call after loading associated media",
                    "type": "Function"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 536,
            "description": "Success callback function for .getAssocMediaTo call above. If the list of media is\nnon-null and non-empty, it gets the linq between each doq and the artwork",
            "itemtype": "method",
            "name": "mediaSuccess",
            "params": [
                {
                    "name": "doqs",
                    "description": "the media doqs",
                    "type": "Array"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 554,
            "description": "Helper function for the calls to .getLinq above. It accepts an assoc media doc and returns\na success callback function that accepts a linq. Using this information, it creates a new\nhotspot from the doq and linq",
            "itemtype": "method",
            "name": "createLinqSuccess",
            "params": [
                {
                    "name": "assocMedia",
                    "description": "the relevant associated media doq",
                    "type": "Doq"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 574,
            "description": "Creates an associated media object to be added to associatedMedia.\nThis object contains methods that could be called in Artmode.js or\nArtworkEditor.js. This could be in its own file.",
            "itemtype": "method",
            "name": "createMediaObject",
            "params": [
                {
                    "name": "doq",
                    "description": "the media doq",
                    "type": "Mdoq"
                },
                {
                    "name": "linq",
                    "description": "the linq between the media doq and the artwork doq",
                    "type": "Linq"
                }
            ],
            "return": {
                "description": "some public methods to be used in other files",
                "type": "Object"
            },
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 622,
            "description": "Initialize various parts of the media object: UI, manipulation handlers",
            "itemtype": "method",
            "name": "initMediaObject",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 687,
            "description": "Initialize any media controls",
            "itemtype": "method",
            "name": "initMediaControls",
            "params": [
                {
                    "name": "elt",
                    "description": "video or audio element",
                    "type": "HTML element"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 885,
            "description": "Load the actual image/video/audio; this can take a while if there are\na lot of media, so just do it when the thumbnail button is clicked",
            "itemtype": "method",
            "name": "createMediaElements",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 997,
            "description": "Stores the dimensions and points to the media manipulation method  of the active associated media, also sends it to the front\nmedia manip.",
            "itemtype": "method",
            "name": "mediaManipPreprocessing",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1027,
            "description": "Drag/manipulation handler for associated media",
            "itemtype": "method",
            "name": "mediaManip",
            "params": [
                {
                    "name": "res",
                    "description": "object containing hammer event info",
                    "type": "Object"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1151,
            "description": "Recursive helper function for mediaManip.\nMoves object between start location and final location with proper physics.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "res",
                    "description": "object containing hammer event info",
                    "type": "Object"
                },
                {
                    "name": "prevVelocity",
                    "description": "velocity of object on release",
                    "type": "Object"
                },
                {
                    "name": "prevLocation",
                    "description": "location of object",
                    "type": "Object"
                },
                {
                    "name": "finalPos",
                    "description": "target location of object",
                    "type": "Object"
                },
                {
                    "name": "delay",
                    "description": "delay (for timer)",
                    "type": "Object"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1215,
            "description": "Zoom handler for associated media (e.g., for mousewheel scrolling)",
            "itemtype": "method",
            "name": "mediaScroll",
            "params": [
                {
                    "name": "scale",
                    "description": "scale factor",
                    "type": "Number"
                },
                {
                    "name": "pivot",
                    "description": "point of contact",
                    "type": "Object"
                }
            ],
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1235,
            "description": "Create a closeButton for associated media",
            "itemtype": "method",
            "name": "createCloseButton",
            "return": {
                "description": "the button as a 'div'",
                "type": "HTML element"
            },
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1258,
            "description": "Show the associated media on the seadragon canvas. If the media is not\na hotspot, show it in a slightly random position.",
            "itemtype": "method",
            "name": "showMediaObject",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1314,
            "description": "Hide the associated media",
            "itemtype": "method",
            "name": "hideMediaObject",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1341,
            "description": "Show if hidden, hide if shown",
            "itemtype": "method",
            "name": "toggleMediaObject",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1349,
            "description": "Returns whether the media object is visible",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/artmode/TAG.AnnotatedImage.js",
            "line": 1358,
            "description": "Pauses and resets (to time 0) the media if the content type is video or audio",
            "pauseresetmediaobject": "",
            "class": "TAG.AnnotatedImage"
        },
        {
            "file": "js/TAG/authoring/jscolor/jscolor.js",
            "line": 1,
            "description": "jscolor, JavaScript Color Picker",
            "version": "1.3.13",
            "license": "GNU Lesser General Public License, http://www.gnu.org/copyleft/lesser.html",
            "author": "Jan Odvarko, http://odvarko.cz",
            "created": "2008-06-15",
            "updated": "2012-01-19",
            "link": "http://jscolor.com",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 3,
            "description": "Enum of file upload types",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 13,
            "description": "Helper class for performing file uploads\nAlso creates HTML overlay that displays progress / spinning wheel\nNote: everything is handled internally, no external API, does its thing then removes itself and disappears",
            "params": [
                {
                    "name": "root",
                    "description": "Root of HTML, upload overlay will be appended to this while upload is running and removed when finished automatically!"
                },
                {
                    "name": "type",
                    "description": "Type of file upload (defined by FileUploadTypes)"
                },
                {
                    "name": "localCallback",
                    "description": "Callback passed local file info (args: <WinJS.StorageFile> file, <String> localURL)"
                },
                {
                    "name": "finishedCallback",
                    "description": "Callback to execute once upload is finished (standard args: <String> url; deepzoom args: <String> xmlDoq)"
                },
                {
                    "name": "filters",
                    "description": "Array of file types selectable by user"
                },
                {
                    "name": "useThumbs",
                    "description": "Use thumbnail view mode?"
                },
                {
                    "name": "progressFunc",
                    "description": "Function to keep track of progress (e.g. for displaying a progress bar somewhere)"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 88,
            "description": "Starts the file upload",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 443,
            "description": "Appends overlay to root\n(no idea if this will actually disable interactions too as is)",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 453,
            "description": "Totally remove the overlay from the DOM / destroy",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 460,
            "description": "Inner class that performs actual upload operation\nPartly taken from: http://msdn.microsoft.com/en-us/library/windows/apps/Hh700372.aspx",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 468,
            "description": "Starts upload of given file",
            "params": [
                {
                    "name": "uriString",
                    "description": "Spec passed to server"
                },
                {
                    "name": "file",
                    "description": "File object representing file to be uploaded"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 526,
            "description": "Called when upload is completed",
            "params": [
                {
                    "name": "uploadOperation",
                    "description": "Finished upload passed by background uploader"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 601,
            "description": "If file upload fails",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 639,
            "description": "Called by uploader as upload progresses",
            "params": [
                {
                    "name": "upload",
                    "description": "upload object / info"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.FileUploader.js",
            "line": 676,
            "description": "copied from TAG.Util.UI because the boxes have crap CSS. tru fax.",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 214,
            "description": "check for conversion in interval",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 246,
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 276,
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 289,
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 298,
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 342,
            "itemtype": "method",
            "name": "downKeyHandlerSettingsView",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 386,
            "description": "Helper function to set up UI elements and switch to first view",
            "itemtype": "method",
            "name": "loadHelper",
            "params": [
                {
                    "name": "main",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 482,
            "itemtype": "method",
            "name": "switchView",
            "params": [
                {
                    "name": "view",
                    "description": "the view to switch to",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "the id of the middle label to start on",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 525,
            "itemtype": "method",
            "name": "getRoot",
            "return": {
                "description": "root",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 535,
            "itemtype": "method",
            "name": "createNavLabel",
            "params": [
                {
                    "name": "text",
                    "description": "text for label",
                    "type": "String"
                },
                {
                    "name": "onclick",
                    "description": "onclick function for label",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "container   container containing new label",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 589,
            "itemtype": "method",
            "name": "loadGeneralView",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 636,
            "description": "including the viewer, buttons, and settings container.",
            "itemtype": "method",
            "name": "loadSplashScreen",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 844,
            "itemtype": "method",
            "name": "saveSplashScreen",
            "params": [
                {
                    "name": "inputs",
                    "description": "information from setting inputs",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 904,
            "itemtype": "method",
            "name": "loadPasswordScreen",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 960,
            "itemtype": "method",
            "name": "passwordChangeNotSupported",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 969,
            "itemtype": "method",
            "name": "savePassword",
            "params": [
                {
                    "name": "inputs",
                    "description": "keys for password change",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1000,
            "itemtype": "method",
            "name": "previewStartPage",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1016,
            "itemtype": "method",
            "name": "previewCollectionsPage",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1032,
            "itemtype": "method",
            "name": "previewArtworkViewer",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1051,
            "itemtype": "method",
            "name": "loadExhibitionsView",
            "params": [
                {
                    "name": "id",
                    "description": "id of middle label to start on",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1250,
            "itemtype": "method",
            "name": "manageCollection",
            "params": [
                {
                    "name": "exhibition",
                    "description": "the current collection to be edited",
                    "type": "Doq"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1277,
            "itemtype": "method",
            "name": "loadExhibition",
            "params": [
                {
                    "name": "exhibition",
                    "description": "exhibition to load",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1617,
            "itemtype": "method",
            "name": "exhibitionView",
            "params": [
                {
                    "name": "exhibition",
                    "description": "exhibition to load",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1637,
            "itemtype": "method",
            "name": "createExhibition",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1658,
            "itemtype": "method",
            "name": "saveExhibition",
            "params": [
                {
                    "name": "exhibition",
                    "description": "collection to save",
                    "type": "Object"
                }
            ],
            "inputs": "{Object} inputs      keys from input fields",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1724,
            "itemtype": "method",
            "name": "deleteExhibition",
            "params": [
                {
                    "name": "exhibition",
                    "description": "collection to delete",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1750,
            "itemtype": "method",
            "name": "loadTourView",
            "params": [
                {
                    "name": "id",
                    "description": "id of middle label to start on",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 1848,
            "itemtype": "method",
            "name": "loadTour",
            "params": [
                {
                    "name": "tour",
                    "description": "tour to load",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2012,
            "itemtype": "method",
            "name": "createTour",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2033,
            "itemtype": "method",
            "name": "editTour",
            "params": [
                {
                    "name": "tour",
                    "description": "tour to edit",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2049,
            "itemtype": "method",
            "name": "deleteTour",
            "params": [
                {
                    "name": "tour",
                    "description": "tour to delete",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2073,
            "itemtype": "method",
            "name": "duplicateTour",
            "params": [
                {
                    "name": "tour",
                    "description": "tour to duplicate",
                    "type": "Object"
                },
                {
                    "name": "inputs",
                    "description": "keys for name, description, and privateInput of tour",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2103,
            "itemtype": "method",
            "name": "saveTour",
            "params": [
                {
                    "name": "tour",
                    "description": "tour to save",
                    "type": "Object"
                },
                {
                    "name": "inputs",
                    "description": "keys for name, description, and privateInput of tour",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2149,
            "itemtype": "method",
            "name": "load AssocMediaView",
            "params": [
                {
                    "name": "id",
                    "description": "id of middle label to start on",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2261,
            "itemtype": "method",
            "name": "loadAssocMedia",
            "params": [
                {
                    "name": "media",
                    "description": "associated media to load",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2570,
            "itemtype": "method",
            "name": "saveAssocMedia",
            "params": [
                {
                    "name": "media",
                    "description": "associated media to save",
                    "type": "Object"
                },
                {
                    "name": "inputs",
                    "description": "keys for media title and description",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2623,
            "itemtype": "method",
            "name": "deleteAssociatedMedia",
            "params": [
                {
                    "name": "media",
                    "description": "media to be deleted",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2658,
            "itemtype": "method",
            "name": "assocToArtworks",
            "params": [
                {
                    "name": "media",
                    "description": "media to associate to artworks",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2674,
            "itemtype": "method",
            "name": "generateAssocMediaThumbnail",
            "params": [
                {
                    "name": "media",
                    "description": "media to generate thumbnail for",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2704,
            "description": "Create a dialog for inputting an iframe source for new associated media",
            "itemtype": "method",
            "name": "createIframeSourceDialog",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2721,
            "itemtype": "method",
            "name": "createAsset",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2819,
            "itemtype": "method",
            "name": "createMedia",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2826,
            "itemtype": "method",
            "name": "batchAssMedia",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2881,
            "itemtype": "method",
            "name": "saveAssMedia",
            "params": [
                {
                    "name": "i",
                    "description": "the index of the asset"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2890,
            "description": "Uploads hotspot i to artwork j in its list of artworks to associate to.",
            "itemtype": "method",
            "name": "uploadHotspotHelper",
            "params": [
                {
                    "name": "i",
                    "description": "the index of the asset we're uploading"
                },
                {
                    "name": "j",
                    "description": "each asset has a list of artworks it'll be associated with; j is the index in this list"
                },
                {
                    "name": "len",
                    "description": "the length of the list above"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2915,
            "itemtype": "method",
            "name": "uploadHotspot",
            "params": [
                {
                    "name": "artwork",
                    "description": ""
                },
                {
                    "name": "info",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "j",
                    "description": ""
                },
                {
                    "name": "len",
                    "description": ""
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2948,
            "itemtype": "method",
            "name": "createHotspotHelper",
            "params": [
                {
                    "name": "isNewAsset",
                    "description": ""
                },
                {
                    "name": "xmlHotspot",
                    "description": ""
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 2998,
            "itemtype": "method",
            "name": "loadArtView",
            "params": [
                {
                    "name": "id",
                    "description": "id of middle label to start on",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 3122,
            "itemtype": "method",
            "name": "loadArtwork",
            "params": [
                {
                    "name": "artwork",
                    "description": "artwork to load",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 3383,
            "itemtype": "method",
            "name": "saveThumbnail",
            "params": [
                {
                    "name": "component",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "isArtwork",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 3430,
            "itemtype": "method",
            "name": "createArtwork",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4062,
            "itemtype": "method",
            "name": "editArtwork",
            "params": [
                {
                    "name": "artwork",
                    "description": "artwork to edit",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4076,
            "itemtype": "method",
            "name": "deleteArtwork",
            "params": [
                {
                    "name": "artwork",
                    "description": "artwork to delete",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4098,
            "itemtype": "method",
            "name": "saveArtwork",
            "params": [
                {
                    "name": "artwork",
                    "description": "artwork to save",
                    "type": "Object"
                },
                {
                    "name": "inputs",
                    "description": "keys for artwork info from input fields",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4158,
            "itemtype": "method",
            "name": "loadFeedbackView",
            "params": [
                {
                    "name": "id",
                    "description": "id of middle label to start on",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4236,
            "itemtype": "method",
            "name": "loadFeedback",
            "params": [
                {
                    "name": "feedback",
                    "description": "feedback to load",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4285,
            "itemtype": "method",
            "name": "getSourceName",
            "params": [
                {
                    "name": "feedback",
                    "description": "feedback to get source of",
                    "type": "Object"
                },
                {
                    "name": "onSuccess",
                    "description": "function called if source found",
                    "type": "Function"
                },
                {
                    "name": "onDeleted",
                    "description": "function called if source has been deleted",
                    "type": "Function"
                },
                {
                    "name": "onError",
                    "description": "function called if there is an error",
                    "type": "Function"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4305,
            "itemtype": "method",
            "name": "followSource",
            "params": [
                {
                    "name": "feedback",
                    "description": "feedback to follow source of",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4327,
            "itemtype": "method",
            "name": "deleteFeedback",
            "params": [
                {
                    "name": "feedback",
                    "description": "feedback to delete",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4346,
            "itemtype": "method",
            "name": "createMiddleLabel",
            "params": [
                {
                    "name": "text",
                    "description": "the text of the label",
                    "type": "String"
                },
                {
                    "name": "imagesrc",
                    "description": "the source for the image. If not specified no image added"
                },
                {
                    "name": "onclick",
                    "description": "the onclick function for the label",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "id to set if specified",
                    "type": "Object"
                },
                {
                    "name": "onDoubleClick",
                    "description": "function for double click",
                    "type": "Function"
                },
                {
                    "name": "inArtMode",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "extension",
                    "description": "to check if is video or static art"
                }
            ],
            "return": {
                "description": "container       the container of the new label",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4455,
            "itemtype": "method",
            "name": "prepareNextView",
            "params": [
                {
                    "name": "showSearch",
                    "description": "if true show search bar, otherwise hide",
                    "type": "Boolean"
                },
                {
                    "name": "newText",
                    "description": "text for the 'New' button",
                    "type": "String"
                },
                {
                    "name": "newBehavior",
                    "description": "onclick function for the 'New' button",
                    "type": "Function"
                },
                {
                    "name": "loadingText",
                    "description": "Text to display while middle bar loading",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4490,
            "itemtype": "method",
            "name": "clearRight",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4499,
            "itemtype": "method",
            "name": "prepareViewer",
            "params": [
                {
                    "name": "showViewer",
                    "description": "whether the preview window is shown",
                    "type": "Boolean"
                },
                {
                    "name": "text",
                    "description": "text to add to the viewer (in a textbox)",
                    "type": "String"
                },
                {
                    "name": "showButtons",
                    "description": "whether the buttonContainer is shown",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4550,
            "itemtype": "method",
            "name": "clickWhenReady",
            "params": [
                {
                    "name": "selector",
                    "description": ""
                },
                {
                    "name": "maxtries",
                    "description": ""
                },
                {
                    "name": "tries",
                    "description": ""
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4560,
            "description": "is added to the page",
            "itemtype": "method",
            "name": "doWhenReady",
            "params": [
                {
                    "name": "selector",
                    "description": "class or id of object(s) on which fn is performed",
                    "type": "Object"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "maxtries",
                    "description": ""
                },
                {
                    "name": "tries",
                    "description": ""
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4581,
            "itemtype": "method",
            "name": "resetLabels",
            "params": [
                {
                    "name": "selector",
                    "description": "class of labels to reset",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4615,
            "itemtype": "method",
            "name": "selectLabel",
            "params": [
                {
                    "name": "label",
                    "description": "label to select",
                    "type": "Object"
                },
                {
                    "name": "expand",
                    "description": "if label expands when selected",
                    "type": "Boolean"
                },
                {
                    "name": "index",
                    "description": "index of the selected label in it's relvant list.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "label   selected label",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4637,
            "itemtype": "method",
            "name": "disableLabel",
            "params": [
                {
                    "name": "label",
                    "description": "label to disable",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "label        disabled label",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4653,
            "description": "the entire right bar needs to be position absolutely. Settings has bottom: 0, so the height needs to be correct\n to not have this be under the buttons container.  If any of the heights of the right components changes it should be\n updated here.",
            "itemtype": "method",
            "name": "getSettingsHeight",
            "return": {
                "description": "height       appropriate height for settings"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 4676,
            "itemtype": "method",
            "name": "createSetting",
            "params": [
                {
                    "name": "text",
                    "description": "text for the setting",
                    "type": "String"
                },
                {
                    "name": "input",
                    "description": "the input for the setting",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "if not falsey then assumed to be number represengint percent, must be less than 95"
                }
            ],
            "return": {
                "description": "container        container of new setting"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5065,
            "itemtype": "method",
            "name": "createButton",
            "params": [
                {
                    "name": "text",
                    "description": "button text",
                    "type": "String"
                },
                {
                    "name": "onclick",
                    "description": "onclick function for button",
                    "type": "Function"
                },
                {
                    "name": "css",
                    "description": "additional css to apply to button if specified"
                }
            ],
            "return": {
                "description": "button      new button created",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5083,
            "itemtype": "method",
            "name": "createLabel",
            "params": [
                {
                    "name": "text",
                    "description": "label text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "label       new label created",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5093,
            "itemtype": "method",
            "name": "createTextInput",
            "params": [
                {
                    "name": "text",
                    "description": "the default text for the input",
                    "type": "String"
                },
                {
                    "name": "defaultval",
                    "description": "if true, reset to default text if empty and loses focus",
                    "type": "Boolean"
                },
                {
                    "name": "maxlength",
                    "description": "max length of the input in characters"
                },
                {
                    "name": "hideOnClick",
                    "description": ""
                }
            ],
            "return": {
                "description": "input                newly created input"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5113,
            "itemtype": "method",
            "name": "createTextAreaInput",
            "params": [
                {
                    "name": "text",
                    "description": "default text for area",
                    "type": "String"
                },
                {
                    "name": "defaultval",
                    "description": ""
                },
                {
                    "name": "hideOnClick",
                    "description": ""
                }
            ],
            "return": {
                "description": "input    newly creted text input",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5133,
            "itemtype": "method",
            "name": "createSelectInput",
            "params": [
                {
                    "name": "options",
                    "description": "list of options in the drop-down",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "current value of select menu",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "selectElt     element of type 'select'",
                "type": "HTML element"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5156,
            "description": "of all elements matching the jquery selector 'selector'.",
            "itemtype": "method",
            "name": "creatBGColorInput",
            "params": [
                {
                    "name": "color",
                    "description": ""
                },
                {
                    "name": "selectorBackground",
                    "description": "jQuery selector for elements background to be changed"
                },
                {
                    "name": "selectorText",
                    "description": "jQuery selector for color of text in the element to be changed"
                },
                {
                    "name": "getTransValue",
                    "description": "returns a valid transparency value",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "container           returns container holding new input",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5186,
            "itemtype": "method",
            "name": "updateBGColor",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector of elements to be changed"
                },
                {
                    "name": "hex",
                    "description": "hex value of color"
                },
                {
                    "name": "trans",
                    "description": "transparency of color"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5197,
            "itemtype": "method",
            "name": "updateTextColor",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector, the color of text inside the selector is changed",
                    "type": "HTML element"
                },
                {
                    "name": "color",
                    "description": "color passed in as a hex value",
                    "type": "Hex Value"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5206,
            "itemtype": "method",
            "name": "preventClickthrough",
            "params": [
                {
                    "name": "container",
                    "description": "container to prevent click through of",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5227,
            "itemtype": "method",
            "name": "sortAZ",
            "params": [
                {
                    "name": "list",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5242,
            "itemtype": "method",
            "name": "sortDate",
            "params": [
                {
                    "name": "list",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5263,
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "val",
                    "description": "value to search for"
                },
                {
                    "name": "selector",
                    "description": "jQuery selector of elements to search"
                },
                {
                    "name": "childType",
                    "description": "selector's type"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5281,
            "params": [
                {
                    "name": "val",
                    "description": "value to search for"
                },
                {
                    "name": "selector",
                    "description": "jQuery selector for elements to be searched"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5302,
            "itemtype": "method",
            "name": "onChangeUpdateText",
            "params": [
                {
                    "name": "input",
                    "description": "input to update",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "jQuery selector of element to update"
                },
                {
                    "name": "maxLength",
                    "description": "maximum text length in characters"
                }
            ],
            "return": {
                "description": "updated input",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5331,
            "itemtype": "method",
            "name": "onChangeUpdateNum",
            "params": [
                {
                    "name": "input",
                    "description": "input to update",
                    "type": "Object"
                },
                {
                    "name": "min",
                    "description": "minimum value of inputted number"
                },
                {
                    "name": "max",
                    "description": "maximum value of inputted number"
                },
                {
                    "name": "doOnChange",
                    "description": "performed if input value is number between min and max",
                    "type": "Function"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5372,
            "itemtype": "method",
            "name": "is_array",
            "params": [
                {
                    "name": "value",
                    "description": "value to check"
                }
            ],
            "return": {
                "description": "if value is an array",
                "type": "Boolean"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5381,
            "itemtype": "method",
            "name": "uploadFIle",
            "params": [
                {
                    "name": "type",
                    "description": "See TAG.Authoring.FileUploader for 'type' values"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "multiple",
                    "description": "for batch upload"
                },
                {
                    "name": "filter",
                    "description": ""
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5429,
            "description": "only when the page is 'done'.  The overlay doesn't support being removed from the page, so only call this when the page will \nbe changed!",
            "itemtype": "method",
            "name": "loadingOverlay",
            "params": [
                {
                    "name": "text",
                    "description": "Text defaults to 'Loading...' if not specified.",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5484,
            "itemtype": "method",
            "name": "authError",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5500,
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "fn",
                    "description": "function called if specified",
                    "type": "Function"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/authoring/TAG.Authoring.SettingsView.js",
            "line": 5513,
            "itemtype": "method",
            "name": "conflict",
            "params": [
                {
                    "name": "doq",
                    "description": "doq for which there is a conflict"
                },
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fail",
                    "description": ""
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 60,
            "description": "Loads deepzoom image and creates UI (via a call to initUI)",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 102,
            "description": "Initializes the artwork editor UI (side bar, top bar, etc)",
            "itemtype": "method",
            "name": "initUI",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 116,
            "description": "Creates the artwork editor top bar (back button, save changes button, etc)",
            "itemtype": "method",
            "name": "createTopBar",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 222,
            "description": "Creates associated media list in left panel",
            "itemtype": "method",
            "name": "createMediaList",
            "params": [
                {
                    "name": "container",
                    "description": "the element containing this list",
                    "type": "JQuery obj"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 270,
            "description": "Click handler for an associated media thumbnail button. Opens the media editing pane.",
            "itemtype": "method",
            "name": "thumbnailButtonClick",
            "params": [
                {
                    "name": "asset",
                    "description": "associated media object",
                    "type": "Object"
                },
                {
                    "name": "holder",
                    "description": "the thumbnail button",
                    "type": "JQuery obj"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 286,
            "description": "Make the artwork editing side bar.",
            "itemtype": "method",
            "name": "makeSidebar",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 455,
            "description": "Create the associated media selection picker",
            "itemtype": "method",
            "name": "createMediaPicker",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 542,
            "description": "If we have an out-of-date doq (e.g., if another TAG\nclient updated the doq while we were working), force\nthe call anyway, which will overwrite their changes.\nThis may not be the best behavior, so if you think of\na well-defined solution, please rewrite this function!",
            "itemtype": "method",
            "name": "conflict",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "async request object (see http://api.jquery.com/Types/#jqXHR)",
                    "type": "JqXHR"
                },
                {
                    "name": "ajaxCall",
                    "description": "see documentation in TAG.Worktop.Database (and the code in asyncRequest in that file)",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 556,
            "description": "Return root of artwork editor DOM.",
            "itemtype": "method",
            "name": "getRoot",
            "return": {
                "description": "root of artwork editor DOM",
                "type": "JQuery obj"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 565,
            "description": "Closes all open panels (metadata editing panel, location history\npanel, and thumbnail editing panel).",
            "itemtype": "method",
            "name": "closeAllPanels",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 576,
            "description": "Thumbnail editing code. Just a wrapper around some thumbnail functions to clean things up.",
            "itemtype": "method",
            "name": "ThumbnailEditor",
            "return": {
                "description": "an object with \"public\" thumbnail editing methods",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 589,
            "description": "Initialize the thumbnail editor. Mostly UI stuff here.",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 717,
            "description": "Toggle the thumbnail editor in and out.",
            "itemtype": "method",
            "name": "toggle",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 743,
            "description": "Opens the thumbnail editor and closes any open panels.",
            "itemtype": "method",
            "name": "open",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 760,
            "description": "Closes the thumbnail editor.",
            "itemtype": "method",
            "name": "close",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 776,
            "description": "Saves the current thumbnail selection.",
            "itemtype": "method",
            "name": "save",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 853,
            "description": "Rich location history API. Location history code can make everything else messy and dense, so we'll cordon it off here.",
            "itemtype": "method",
            "name": "RichLocationHistory",
            "return": {
                "description": "an object with \"public\" location history methods",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 917,
            "description": "Media editing panel. Contains methods for initializing, opening, and closing the panel, as well as\nmethods for saving and deleting media.",
            "itemtype": "method",
            "name": "AssocMediaEditor",
            "return": {
                "description": "an object with \"public\" associated media editing methods",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 935,
            "description": "Initialize a reusible hotspot circle div and store it in the variable hotspotAnchor",
            "itemtype": "method",
            "name": "makeHotspotAnchor",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1011,
            "description": "Adds hotspot circle to canvas and pans to circle's location",
            "itemtype": "method",
            "name": "toggleToHotspot",
            "params": [
                {
                    "name": "point",
                    "description": "the point at which to add the hotspot circle (defaults to center of canvas)",
                    "type": "Seadragon.Point"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1035,
            "description": "Removes hotspot from canvas",
            "itemtype": "method",
            "name": "toggleFromHotspot",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1049,
            "description": "Returns a Seadragon.Rect bounding the artwork layer on screen",
            "itemtype": "method",
            "name": "getLayerRect",
            "return": {
                "description": "the Seadragon.Rect",
                "type": "Seadragon.Rect"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1064,
            "description": "Initialize a reusable layer container and store it in the variable layerContainer",
            "itemtype": "method",
            "name": "makeLayerContainer",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1142,
            "description": "Makes layerContainer visible at the specified location",
            "itemtype": "method",
            "name": "toggleToLayer",
            "params": [
                {
                    "name": "rect",
                    "description": "the rect on the artwork on which we'll add the layer container (see Seadragon.Drawer docs)",
                    "type": "Seadragon.Rect"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1188,
            "description": "Removes layer image from canvas and updates some button text/attributes",
            "itemtype": "method",
            "name": "toggleFromLayer",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1205,
            "description": "Set a metadata value for the active media content.",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1215,
            "description": "Get metadata values for the active media content.",
            "params": [
                {
                    "name": "key",
                    "description": "(optional)   the key to retrieve. If key is not given, retrieve \n    the entire values object."
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1250,
            "description": "Create a view in the editing pane for the specified media",
            "itemtype": "method",
            "name": "createMediaWrapper",
            "params": [
                {
                    "name": "media",
                    "description": "the assoc media object we want to \"wrap\"",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a jQuery element wrapping a view into the content",
                "type": "JQuery obj"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1388,
            "description": "Wrapper around TAG.Worktop.Database.changeHotspot to update assoc media after\nediting in the right pane.",
            "itemtype": "method",
            "name": "updateAssocMedia",
            "params": [
                {
                    "name": "info",
                    "description": "assoc media info to update",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1453,
            "description": "Success callback for call to changeHotspot in updateAssocMedia;\nreloads media list and hides editing pane",
            "itemtype": "method",
            "name": "updateSuccess",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1469,
            "description": "Initializes UI for associated media editor.",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1721,
            "description": "Opens the media editor with the specified media.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "asset",
                    "description": "the media to edit",
                    "type": "Object"
                },
                {
                    "name": "content",
                    "description": "a dom element suitable for displaying the content (could be the result\n                               of a call to createMediaWrapper)",
                    "type": "JQuery obj"
                },
                {
                    "name": "callback",
                    "description": "a callback function to call after the editing pane has opened",
                    "type": "Function"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1742,
            "description": "Helper function for showEditMedia, called when the linq between the\nmedia and the artwork has been obtained",
            "itemtype": "method",
            "name": "linqCallback",
            "params": [
                {
                    "name": "linq",
                    "description": "a linq object (see github wiki for structure)",
                    "type": "Linq"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1819,
            "description": "Closes the media editor.",
            "itemtype": "method",
            "name": "close",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1840,
            "description": "Returns whether the editing panel is open",
            "itemtype": "method",
            "name": "returnIsOpen",
            "return": {
                "description": "true if open",
                "type": "Boolean"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1858,
            "description": "Artwork metadata editor. Contains methods for initializing the metadata form, saving metadata, adding additional\nmetadata fields, etc...",
            "itemtype": "method",
            "name": "MetadataEditor",
            "return": {
                "description": "an object with \"public\" associated media editing methods",
                "type": "Object"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1871,
            "description": "Create a metadata editing field.",
            "itemtype": "method",
            "name": "createMetadataTextArea",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1967,
            "description": "Creates additional metadata fields",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1978,
            "description": "Returns true if we should disable the \"Add Information Field\" button. We should if there are more than\ntwo additional fields already.",
            "itemtype": "method",
            "name": "shouldDisableAddButton",
            "return": {
                "description": "whether or not we should disable the button",
                "type": "Boolean"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 1988,
            "description": "Initialize the metadata editor UI",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 2077,
            "description": "Save artwork metadata",
            "itemtype": "method",
            "name": "save",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 2129,
            "description": "Open the metadata editor",
            "itemtype": "method",
            "name": "open",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 2144,
            "description": "Close the metadata editor",
            "itemtype": "method",
            "name": "close",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 2159,
            "description": "Toggle the metadata editor open and closed",
            "itemtype": "method",
            "name": "toggle",
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkEditor.js",
            "line": 2167,
            "description": "Returns whether the editing panel is open",
            "itemtype": "method",
            "name": "returnIsOpen",
            "return": {
                "description": "true if open",
                "type": "Boolean"
            },
            "class": "TAG.Layout.ArtworkEditor"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 68,
            "description": "Initiate artmode with a root, artwork image and a sidebar on the left",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 120,
            "description": "Initializes splitscreen functionality",
            "itemtype": "method",
            "name": "initSplitscreen",
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 183,
            "description": "Add controls and key handlers for manual Seadragon manipulation",
            "itemtype": "method",
            "name": "createSeadragonControls",
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 253,
            "description": "Create a seadragon control button",
            "itemtype": "method",
            "name": "createButton",
            "params": [
                {
                    "name": "id",
                    "description": "the id for the new button",
                    "type": "String"
                },
                {
                    "name": "imgPath",
                    "description": "the path to the button's image",
                    "type": "String"
                },
                {
                    "name": "left",
                    "description": "css left property for button",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "css top property for button",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the button",
                "type": "JQuery obj"
            },
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 294,
            "description": "Keydown handler for artwork manipulation; wrapper around doManip that first\nprevents default key behaviors",
            "itemtype": "method",
            "name": "keyHandler",
            "params": [
                {
                    "name": "evt",
                    "description": "the event object",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "the direction in which to move the artwork",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 307,
            "description": "Click handler for button in given direction; a wrapper around doManip that also\nexecutes doManip in an interval if the user is holding down a button",
            "itemtype": "method",
            "name": "buttonHandler",
            "params": [
                {
                    "name": "evt",
                    "description": "the event object",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "the direction in which to move the artwork",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 322,
            "description": "Do fixed manipulation in response to seadragon controls or key presses",
            "itemtype": "method",
            "name": "doManip",
            "params": [
                {
                    "name": "evt",
                    "description": "the event object",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "the direction in which to move the artwork",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 445,
            "description": "Makes the artwork viewer sidebar",
            "itemtype": "method",
            "name": "makeSidebar",
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 687,
            "description": "Creates a tour thumbnail button",
            "itemtype": "method",
            "name": "createTourButton",
            "params": [
                {
                    "name": "container",
                    "description": "the element to which we'll append this button",
                    "type": "JQuery obj"
                },
                {
                    "name": "tour",
                    "description": "the tour doq",
                    "type": "Doq"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 704,
            "description": "Creates a thumbnail button for an associated media",
            "itemtype": "method",
            "name": "createMediaButton",
            "params": [
                {
                    "name": "container",
                    "description": "the element to which we'll append the button",
                    "type": "JQuery obj"
                },
                {
                    "name": "media",
                    "description": "an associated media object (from AnnotatedImage)",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 741,
            "description": "Generates a click handler for a specific associated media object",
            "itemtype": "method",
            "name": "mediaClicked",
            "params": [
                {
                    "name": "media",
                    "description": "the associated media object (from AnnotatedImage)",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 836,
            "description": "MINIMAP CODE. bleveque: didn't rewrite this; separate issue\n                        if some variable names are off now, let me know",
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 922,
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 935,
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 999,
            "itemtype": "method",
            "name": "onMinimapScroll",
            "params": [
                {
                    "name": "scale",
                    "description": "scale factor",
                    "type": "Number"
                },
                {
                    "name": "pivot",
                    "description": "x and y location of event",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 1016,
            "itemtype": "method",
            "name": "onMinimapScrollWin",
            "params": [
                {
                    "name": "delta",
                    "description": "change",
                    "type": "Number"
                },
                {
                    "name": "pivot",
                    "description": "x and y location of event",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 1026,
            "itemtype": "method",
            "name": "onMinimapTapped",
            "params": [
                {
                    "name": "evt",
                    "description": "object containing hammer event info",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 1049,
            "itemtype": "method",
            "name": "onMinimapTapped",
            "params": [
                {
                    "name": "evt",
                    "description": "object containing windows event info",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 1129,
            "description": "Create a drawer with a disclosure button used to display\nhotspots, assets, tours. The returned jQuery object has\na property called \"contents\" which should be used to add\nbuttons or messages to the contents of the drawer.",
            "params": [
                {
                    "name": "title,",
                    "description": "the display title for the drawer"
                }
            ],
            "author": "jastern",
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 1179,
            "description": "Create a drawer (e.g., for list of related tours or the artwork's description)",
            "params": [
                {
                    "name": "title",
                    "description": "title of the drawer",
                    "type": "String"
                },
                {
                    "name": "topContents",
                    "description": "an element to be included before the main contents of the drawer",
                    "type": "JQuery obj"
                }
            ],
            "return": {
                "description": "the drawer",
                "type": "JQuery obj"
            },
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 1248,
            "description": "Return art viewer root element",
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "root jquery object",
                "type": "JQuery obj"
            },
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.ArtworkViewer.js",
            "line": 1257,
            "description": "Make the map for location History.",
            "itemtype": "method",
            "name": "makeMap",
            "params": [
                {
                    "name": "callback",
                    "description": "function to be called when map making is complete",
                    "type": "Function"
                }
            ],
            "class": "TAG.Layout.ArtworkViewer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 117,
            "description": "Sets up the collections page UI",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 191,
            "description": "Return the type of work",
            "itemtype": "method",
            "name": "getWorkType",
            "params": [
                {
                    "name": "work",
                    "description": "the doq representing the current work",
                    "type": "Doq"
                }
            ],
            "return": {
                "description": "a string describing type of work ('artwork', 'video', or 'tour')",
                "type": "String"
            },
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 206,
            "description": "Helper function to add collections to top bar.  Also creates an array of visible artworks",
            "itemtype": "method",
            "name": "getCollectionsHelper",
            "params": [
                {
                    "name": "collections",
                    "description": "list of collections to add to page"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 272,
            "description": "Applies customization changes to main divs",
            "itemtype": "method",
            "name": "applyCustomization",
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 292,
            "description": "Shows collection and title",
            "itemtype": "method",
            "name": "loadCollection",
            "params": [
                {
                    "name": "collection",
                    "description": "the element currently being clicked",
                    "type": "JQuery obj"
                },
                {
                    "name": "sPos",
                    "description": "if undefined, set scroll position to 0, otherwise, use this",
                    "type": "Number"
                },
                {
                    "name": "artwrk",
                    "description": "if undefined, set currentArtwork to null, otherwise, use this",
                    "type": "Doq"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 488,
            "description": "Helper function to load first collection",
            "itemtype": "method",
            "name": "loadFirstCollection",
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 496,
            "description": "Get contents (artworks, videos, tours) in the specified collection and make catalog",
            "itemtype": "method",
            "name": "getCollectionContents",
            "params": [
                {
                    "name": "collecion",
                    "description": "the collection whose contents we want",
                    "type": "Doq"
                },
                {
                    "name": "callback",
                    "description": "a function to call when the contents have been retrieved",
                    "type": "Function"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 505,
            "description": "Helper function to process collection contents",
            "itemtype": "method",
            "name": "contentsHelper",
            "params": [
                {
                    "name": "contents",
                    "description": "array of doq objects for each of the contents of this collection",
                    "type": "Array"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 517,
            "description": "Store the search strings for each artwork/tour",
            "itemtype": "method",
            "name": "initSearch",
            "params": [
                {
                    "name": "contents",
                    "description": "the contents of this collection (array of doqs)",
                    "type": "Array"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 543,
            "description": "Search collection using string in search input box",
            "itemtype": "method",
            "name": "doSearch",
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 573,
            "description": "Create tiles for each artwork/tour in a collection",
            "itemtype": "method",
            "name": "createArtTiles",
            "params": [
                {
                    "name": "artworks",
                    "description": "an array of doq objects",
                    "type": "Array"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 588,
            "description": "Draw the collection catalog",
            "itemtype": "method",
            "name": "drawCatalog",
            "params": [
                {
                    "name": "artworks",
                    "description": "the contents of the collection",
                    "type": "Array"
                },
                {
                    "name": "tag",
                    "description": "current sorting tag",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "starting at start-th artwork total (note NOT start-th artwork in artworks)",
                    "type": "Number"
                },
                {
                    "name": "onSearch",
                    "description": "whether the list of artworks is a list of works matching a search term",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 675,
            "description": "Creates an artwork tile in a collection's catalog",
            "itemtype": "method",
            "name": "drawArtworkTile",
            "params": [
                {
                    "name": "currentWork",
                    "description": "the artwork/tour for which we're creating a tile",
                    "type": "Doq"
                },
                {
                    "name": "tag",
                    "description": "current sort tag",
                    "type": "String"
                },
                {
                    "name": "onSearch",
                    "description": "whether this work is a match after searching",
                    "type": "Boolean"
                },
                {
                    "name": "i",
                    "description": "index into list of all works in this collection",
                    "type": "Number"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 795,
            "itemtype": "method",
            "name": "styleTimelineCircle",
            "params": [
                {
                    "name": "element",
                    "description": "element to be styled",
                    "type": "HTML element"
                },
                {
                    "name": "selected",
                    "description": "Whether or not circle is selected",
                    "type": "Bool"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 820,
            "itemtype": "method",
            "name": "initTimeline",
            "params": [
                {
                    "name": "artworks",
                    "description": "list of artworks in the collection",
                    "type": "Array"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 858,
            "itemtype": "method",
            "name": "prepTimelineArea",
            "params": [
                {
                    "name": "minDate",
                    "description": "minimum artwork date",
                    "type": "Integer"
                },
                {
                    "name": "maxDate",
                    "description": "maximum artwork date",
                    "type": "Integer"
                },
                {
                    "name": "numTicks",
                    "description": "optional specification for number of timeline ticks",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "timeline         div representing timeline ticks",
                "type": "Object"
            },
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 890,
            "itemtype": "method",
            "name": "prepTimelineCircles",
            "params": [
                {
                    "name": "avlTree",
                    "description": "avlTree for access to artworks in year order",
                    "type": "AVLTree"
                },
                {
                    "name": "minDate",
                    "description": "minimum date of artworks in collection",
                    "type": "Number"
                },
                {
                    "name": "maxDate",
                    "description": "maximum date of artworks in collection",
                    "type": "Number"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1012,
            "methdd": "zoomTimeline",
            "params": [
                {
                    "name": "yearKey",
                    "description": "yearKey of clicked artwork to zoom in on. (if null, zooms back out to initial state)",
                    "type": "Number"
                },
                {
                    "name": "minDisplayDate",
                    "description": "minimum date on timeline before (additional) zoom",
                    "type": "Number"
                },
                {
                    "name": "maxDisplayDate",
                    "description": "maximum date on timeline before (additional) zoom",
                    "type": "Number"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1255,
            "description": "Close the pop-up outset box of an artwork preview in the collections page",
            "itemtype": "method",
            "name": "hideArtwork",
            "params": [
                {
                    "name": "artwork",
                    "description": "the artwork doq to be hidden",
                    "type": "Doq"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1280,
            "description": "Shows an artwork as an outset box and shows name, description, etc",
            "itemtype": "method",
            "name": "showArtwork",
            "params": [
                {
                    "name": "artwork",
                    "description": "the artwork doq to be shown",
                    "type": "Doq"
                },
                {
                    "name": "whether",
                    "description": "all of the artworks at a specific year should be shown",
                    "type": "ShowAllAtYear"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1516,
            "description": "Generates a comparator function for catalog sorting",
            "itemtype": "method",
            "name": "sortComparator",
            "params": [
                {
                    "name": "primary",
                    "description": "the primary sorting property",
                    "type": "String"
                },
                {
                    "name": "secondary",
                    "description": "the secondary sorting property\n                               if left undefined, a.artwork.Identifier is used\n                               as the secondary property",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1546,
            "description": "Generates a valuation function for catalog sorting",
            "itemtype": "method",
            "name": "sortValuation",
            "params": [
                {
                    "name": "property",
                    "description": "valuation property name",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1565,
            "description": "Sort the catalog by the given criterium",
            "itemtype": "method",
            "name": "sortCatalog",
            "params": [
                {
                    "name": "artworks",
                    "description": "an array of doq objects to be sorted",
                    "type": "Array"
                },
                {
                    "name": "tag",
                    "description": "the sort type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an avl tree for easy sorting",
                "type": "AVLTree"
            },
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1628,
            "description": "Also used to catch common non-integer input date forms and generate timeline \nyears for their display.",
            "itemtype": "method",
            "name": "sortByYear",
            "params": [
                {
                    "name": "artworks",
                    "description": "list of artworks to sort9",
                    "type": "Object"
                },
                {
                    "name": "timelineDate",
                    "description": "whether you are sorting by timeline date (vs metadata date for thumbnail sorting)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "avlTree      sorted tree so order can be easily accessed",
                "type": "AVLTree"
            },
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1746,
            "description": "Set the colors of the sort tags",
            "itemtype": "method",
            "name": "colorSortTags",
            "params": [
                {
                    "name": "tag",
                    "description": "the name of the sort tag",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1759,
            "description": "Changes the selected tag and re-sorts",
            "itemtype": "method",
            "name": "changeDisplayTag",
            "params": [
                {
                    "name": "artworks",
                    "description": "the array of artwork doqs to sort",
                    "type": "Array"
                },
                {
                    "name": "tag",
                    "description": "the name of the sort tag",
                    "type": "String"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1800,
            "description": "Switch to the tour player",
            "itemtype": "method",
            "name": "switchPageTour",
            "params": [
                {
                    "name": "tour",
                    "description": "the relevant tour doq",
                    "type": "Doq"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1861,
            "description": "Switch to the video player",
            "itemtype": "method",
            "name": "switchPageVideo",
            "params": [
                {
                    "name": "video",
                    "description": "the video to which we'll switch",
                    "type": "Doq"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1884,
            "description": "Switch to the artwork viewer or tour player",
            "itemtype": "method",
            "name": "switchPage",
            "params": [
                {
                    "name": "artwork",
                    "description": "artwork to return to after switching",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 1964,
            "description": "Initializes splitscreen functionality",
            "itemtype": "method",
            "name": "initSplitscreen",
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 2002,
            "description": "Gets the current state of the collections page",
            "itemtype": "method",
            "name": "getState",
            "return": {
                "description": "object containing state",
                "type": "Object"
            },
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.CollectionsPage.js",
            "line": 2015,
            "description": "Returns the root of the collections page",
            "itemtype": "method",
            "name": "getRoot",
            "return": {
                "description": "root of the collections page",
                "type": "JQuery Object"
            },
            "class": "TAG.Layout.CollectionsPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.InternetFailurePage.js",
            "line": 35,
            "description": "Sets up internet failure page (handlers, etc) using the input errorType",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.Layout.InternetFailurePage.js"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.InternetFailurePage.js",
            "line": 164,
            "description": "Returns a notice message given a certain connectivity error.",
            "itemtype": "method",
            "name": "getNoticeText",
            "params": [
                {
                    "name": "error",
                    "description": "the error type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an error message to be displayed",
                "type": "String"
            },
            "class": "TAG.Layout.InternetFailurePage.js"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 43,
            "description": "Test internet and server connections",
            "params": [
                {
                    "name": "options",
                    "description": "Object\n           internetURL     url of alternate site against which we'll test connectivity"
                }
            ],
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 113,
            "description": "sets up the entire visual layout and images of the splash screen",
            "itemtype": "method",
            "name": "loadHelper",
            "params": [
                {
                    "name": "main",
                    "description": "contains all image paths and museum info",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 164,
            "description": "Checks if TAG is compatible with the current browser.",
            "itemtype": "method",
            "name": "isBrowserCompatible",
            "author": "Athyuttam Eleti",
            "return": {
                "description": "true if the browser is compatible with TAG, false if it isn't"
            },
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 233,
            "description": "Finds the current browser version.\nCode from http://stackoverflow.com/questions/5916900/detect-version-of-browser",
            "itemtype": "method",
            "name": "getBrowserVersion",
            "author": "Athyuttam Eleti",
            "return": {
                "description": "Browser name followed by version e.g. \"Chrome 34.0.1847.116\""
            },
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 256,
            "description": "Displays a dialog box indicating that the user is using an\nincompatible browser. Points them to links to download the latest\nversion of supported browsers such as IE, Chrome, Safari and Firefox.",
            "itemtype": "method",
            "name": "handleIncompatibleBrowser",
            "author": "Athyuttam Eleti",
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 325,
            "description": "adjusts the text to fit the screen size",
            "itemtype": "method",
            "name": "fixText",
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 344,
            "description": "initializes the handlers for various 'click' functions including setting up a server",
            "itemtype": "method",
            "name": "initializeHandlers",
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 369,
            "description": "gets the paths for all the images displayed on the splash screen",
            "itemtype": "method",
            "name": "setImagePaths",
            "params": [
                {
                    "name": "main",
                    "description": "contains all the image links",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 403,
            "description": "Sets up the credits box with its content including text and images. Also includes function for animation of credits.",
            "itemtype": "method",
            "name": "setUpCredits",
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 441,
            "description": "animation of credits when user clicks",
            "itemtype": "method",
            "name": "expandInfo",
            "params": [
                {
                    "name": "event",
                    "description": "the trigger event for animation, in this case a click",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 476,
            "description": "sets up the info div which contains all the museum information",
            "itemtype": "method",
            "name": "setUpInfo",
            "params": [
                {
                    "name": "main",
                    "description": "contains all the museum information",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 497,
            "description": "Applying Customization Changes",
            "itemtype": "method",
            "name": "applyCustomization",
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 508,
            "description": "Fills in all museum info including name and location",
            "itemtype": "method",
            "name": "setUpMuseumInfo",
            "params": [
                {
                    "name": "main",
                    "description": "contains all the museum information",
                    "type": "Object"
                }
            ],
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 570,
            "itemtype": "method",
            "name": "openDialog",
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 583,
            "itemtype": "method",
            "name": "enterAuthoringMode",
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.StartPage.js",
            "line": 593,
            "itemtype": "method",
            "name": "getRoot",
            "return": {
                "description": "the root of the splash screen DOM"
            },
            "class": "TAG.Layout.StartPage"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.TourAuthoringNew.js",
            "line": 3,
            "description": "Final layout for Tour Authoring\nAll parts of layout are container in separate files/classes\nLayout file also contains testing instructions / notes / functions",
            "params": [
                {
                    "name": "tourobj",
                    "description": "Doq containing tour info"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback to run once tour has loaded (loadRin runs async)"
                }
            ],
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.TourAuthoringNew.js",
            "line": 41,
            "description": "Second row on screen, contains ComponentControls and Viewer",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.TourAuthoringNew.js",
            "line": 189,
            "description": "Creates components and sets up UI",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.TourPlayer.js",
            "line": 3,
            "description": "Player for RIN tours",
            "params": [
                {
                    "name": "tour",
                    "description": "RIN tour in Javascript object (pre-parsed from JSON)"
                },
                {
                    "name": "exhibition",
                    "description": "exhibition we came from (if any) (doq object)"
                },
                {
                    "name": "prevInfo",
                    "description": "object containing previous page info \n   artworkPrev      value is 'artmode' when we arrive here from the art viewer\n   prevScroll       value of scrollbar from new catalog page"
                },
                {
                    "name": "artmodeOptions",
                    "description": "options to pass into TAG.Layout.ArtworkViewer"
                },
                {
                    "name": "tourObj",
                    "description": "the tour doq object, so we can return to the proper tour in the collections screen"
                }
            ],
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.TourPlayer.js",
            "line": 94,
            "description": "Simulate a click on the RIN play button. Used by tour embedding code.\n\nbleveque: I wrote, but strongly dislike, this. I would prefer to\ncall the click handler directly rather than fake a click event. The handler for \nthe play button is somewhere in the RIN code; instead of digging\nfor it, calling it, and making sure that it also changes the button\nelement, I decided to do this and wait for ITE to make everything better.",
            "itemtype": "method",
            "name": "startTour",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 63,
            "description": "Return to the collections page from the video player.",
            "itemtype": "method",
            "name": "goBack",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 87,
            "description": "var selectedExhib = $('#collection-' + prevExhib.Identifier);\nselectedExhib.attr('flagClicked', 'true');\nselectedExhib.css({ 'background-color': 'white', 'color': 'black' });\n$(selectedExhib[0].firstChild).css({'color': 'black'});",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 103,
            "description": "Take video to time 0 and pause.",
            "itemtype": "method",
            "name": "timeToZero",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 115,
            "description": "Play video and change play button image",
            "itemtype": "method",
            "name": "playVideo",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 124,
            "description": "Pause video and change play button image",
            "itemtype": "method",
            "name": "pauseVideo",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 133,
            "description": "Play or pause video depending on its current state",
            "itemtype": "method",
            "name": "toggleVideo",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 141,
            "description": "Set up handlers for video element and play/pause button",
            "itemtype": "method",
            "name": "initVideoPlayHandlers",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 191,
            "description": "Set up handlers for the seekbar",
            "itemtype": "method",
            "name": "initSeekHandlers",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 257,
            "description": "Initialize misc parts of the video player",
            "itemtype": "method",
            "name": "initPage",
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/layout/TAG.Layout.VideoPlayer.js",
            "line": 319,
            "description": "Return the root of the video page",
            "itemtype": "method",
            "name": "getRoot",
            "return": {
                "description": "root of the video page",
                "type": "JQuery object"
            },
            "class": "TAG.Layout.VideoPlayer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 127,
            "itemtype": "method",
            "name": "checkVideoConverted",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 130,
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 166,
            "itemtype": "method",
            "name": "creationError",
            "params": [
                {
                    "name": "displayString",
                    "description": "String describing error (to be displayed)",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 178,
            "itemtype": "method",
            "name": "ctrlZHandler",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 220,
            "itemtype": "method",
            "name": "checkLinkType",
            "params": [
                {
                    "name": "linkedTrack",
                    "description": "parent track of ink"
                },
                {
                    "name": "track",
                    "description": "this ink track"
                },
                {
                    "name": "keyframe",
                    "description": "display part where the ink should be attached"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 254,
            "itemtype": "method",
            "name": "updateInks",
            "params": [
                {
                    "name": "artname",
                    "description": "name of parent artwork track",
                    "type": "String"
                },
                {
                    "name": "linkedTrack",
                    "description": ""
                },
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 299,
            "itemtype": "method",
            "name": "deleteInkTrack",
            "params": [
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 331,
            "itemtype": "method",
            "name": "editInks",
            "params": [
                {
                    "name": "track",
                    "description": ""
                },
                {
                    "name": "datastr",
                    "description": "updates to the ink",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 375,
            "itemtype": "method",
            "name": "saveDraw",
            "params": [
                {
                    "name": "checks",
                    "description": "if ink is attached/unattached",
                    "type": "Boolean"
                },
                {
                    "name": "linkedTrack",
                    "description": ""
                },
                {
                    "name": "artname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 409,
            "itemtype": "method",
            "name": "resetDrawHandlers",
            "params": [
                {
                    "name": "linked",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "linkedTrack",
                    "description": ""
                },
                {
                    "name": "artname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 452,
            "description": "Creates a new InkController and loads in the datastring of the track.\nShows the edit draw controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "itemtype": "method",
            "name": "showEditDraw",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring (see InkController.js for format)"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 561,
            "description": "See comments for showEditDraw.",
            "itemtype": "method",
            "name": "getUndoManager",
            "return": {
                "description": ""
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 571,
            "itemtype": "method",
            "name": "resetTransHandlers",
            "params": [
                {
                    "name": "linked",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "linkedTrack",
                    "description": ""
                },
                {
                    "name": "artname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 612,
            "itemtype": "method",
            "name": "saveTrans",
            "params": [
                {
                    "name": "linked",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "linkedTrack",
                    "description": ""
                },
                {
                    "name": "artname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 652,
            "description": "Creates a new InkController and loads in the datastring of the track.\nShows the edit highlighting controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "itemtype": "method",
            "name": "showEditTransparency",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring (see InkController.js for format)"
                },
                {
                    "name": "trans_type",
                    "description": "block/isolate"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 786,
            "itemtype": "method",
            "name": "resetTextHandlers",
            "params": [
                {
                    "name": "linked",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "linkedTrack",
                    "description": ""
                },
                {
                    "name": "artname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 830,
            "itemtype": "method",
            "name": "saveText",
            "params": [
                {
                    "name": "linked",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "linkedTrack",
                    "description": ""
                },
                {
                    "name": "artname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 881,
            "description": "See comments for showEditDraw.",
            "itemtype": "method",
            "name": "showEditText",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring"
                },
                {
                    "name": "dims",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1022,
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1023,
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1025,
            "itemtype": "method",
            "name": "createFunctionsPanel",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1224,
            "itemtype": "method",
            "name": "exitInk",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1242,
            "itemtype": "method",
            "name": "pickFile",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1258,
            "itemtype": "method",
            "name": "getMusicPropertiesHelper",
            "params": [
                {
                    "name": "files",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1346,
            "itemtype": "method",
            "name": "getVideoPropertiesHelper",
            "params": [
                {
                    "name": "files",
                    "description": ""
                },
                {
                    "name": "i",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1530,
            "itemtype": "method",
            "name": "_createComponentButton",
            "params": [
                {
                    "name": "title",
                    "description": "Name of button",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "DOM element to add button to",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "addComponentButton     the button created.",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1856,
            "itemtype": "method",
            "name": "disableInk",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1872,
            "itemtype": "method",
            "name": "closeComponentMenu",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1880,
            "itemtype": "method",
            "name": "createCatalogPicker",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1959,
            "itemtype": "method",
            "name": "selectMedia",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 1979,
            "description": "Creates the media picker dom elements.",
            "itemtype": "method",
            "name": "_associatedMediaPick",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2050,
            "itemtype": "method",
            "name": "mediasingleClick",
            "params": [
                {
                    "name": "mediaHolder",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2080,
            "itemtype": "method",
            "name": "mediadoubleClick",
            "params": [
                {
                    "name": "mediaHolder",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2144,
            "description": "cleans up bugs where both click events were firing and media would import twice",
            "itemtype": "method",
            "name": "assMediasingleDoubleclick",
            "params": [
                {
                    "name": "mediaHolder",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2166,
            "itemtype": "method",
            "name": "getArt",
            "params": [
                {
                    "name": "i",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2390,
            "itemtype": "method",
            "name": "artworkHolderClick",
            "params": [
                {
                    "name": "artworkHolder",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2491,
            "itemtype": "method",
            "name": "_clearAssMedia",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2502,
            "itemtype": "method",
            "name": "drawAssociatedMedia",
            "params": [
                {
                    "name": "mediaArray",
                    "description": "the list of media to appear in the panel"
                },
                {
                    "name": "applyClick",
                    "description": ""
                },
                {
                    "name": "docfrag",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2516,
            "itemtype": "method",
            "name": "createMediaHolder",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "applyClick",
                    "description": ""
                }
            ],
            "return": {
                "description": "function creating media holder",
                "type": "Function"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2622,
            "itemtype": "method",
            "name": "createCatalogPicker",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2697,
            "itemtype": "method",
            "name": "_catalogPick",
            "return": {
                "description": "artwork id"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2791,
            "itemtype": "method",
            "name": "makeExhibClickable",
            "params": [
                {
                    "name": "exhibHolder",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2822,
            "itemtype": "method",
            "name": "loadInArtworks",
            "params": [
                {
                    "name": "artworks",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2947,
            "itemtype": "method",
            "name": "singleClick",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "artHolder",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 2977,
            "itemtype": "method",
            "name": "e",
            "type": "Event",
            "params": [
                {
                    "name": "artHolder",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3033,
            "description": "cleans up bugs where both click events were firing and artworks would import twice",
            "itemtype": "method",
            "name": "singleDoubleclick",
            "params": [
                {
                    "name": "artHolder",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3170,
            "description": "If 'val' is the default search text it will always return true\nCase insensitive",
            "itemtype": "method",
            "name": "searchString",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3183,
            "itemtype": "method",
            "name": "_clearCatalog",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3195,
            "description": "Below are the ink UI controls. They are separated into draw, text, and transparency controls.",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3201,
            "description": "Ink text UI controls (initial text creation, not edit mode)",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3512,
            "description": "Edit ink text UI controls -- we can probably compress some of this by reusing the inkTextControls",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3847,
            "itemtype": "method",
            "name": "createInkTextControls",
            "return": {
                "description": "public functions defined to manipulate ink annotations",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3865,
            "itemtype": "method",
            "name": "updateInputs",
            "params": [
                {
                    "name": "values",
                    "description": "changed values of the ink",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3883,
            "itemtype": "method",
            "name": "showForm",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3890,
            "itemtype": "method",
            "name": "createModeButton",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3904,
            "itemtype": "method",
            "name": "getTextArea",
            "return": {
                "description": "updates the text on change",
                "type": "Function"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3924,
            "itemtype": "method",
            "name": "createColorInput",
            "params": [
                {
                    "name": "form",
                    "description": "form to append color input to",
                    "type": "HTML Element"
                },
                {
                    "name": "handler",
                    "description": "function ot set font color",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "public method to update color",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 3990,
            "itemtype": "method",
            "name": "updateColor",
            "params": [
                {
                    "name": "color",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4015,
            "itemtype": "method",
            "name": "createFontInput",
            "params": [
                {
                    "name": "form",
                    "description": "form to append color input to",
                    "type": "HTML Element"
                },
                {
                    "name": "handler",
                    "description": "function ot set font color",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "public method to update font type",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4091,
            "itemtype": "method",
            "name": "updateFont",
            "pram": "font",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4106,
            "itemtype": "method",
            "name": "firstUpdate",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4135,
            "itemtype": "method",
            "name": "createFontInput",
            "params": [
                {
                    "name": "form",
                    "description": "form to append color input to",
                    "type": "HTML Element"
                },
                {
                    "name": "handler",
                    "description": "function ot set font color",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "public method to update fotn size",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4213,
            "itemtype": "method",
            "name": "updateSize",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4246,
            "itemtype": "method",
            "name": "createFontInput",
            "params": [
                {
                    "name": "form",
                    "description": "form to append color input to",
                    "type": "HTML Element"
                },
                {
                    "name": "handler",
                    "description": "function ot set font color",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "public method to update fotn size",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4318,
            "itemtype": "method",
            "name": "updateAreaText",
            "params": [
                {
                    "name": "txt",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4350,
            "itemtype": "method",
            "name": "getTextLabel1",
            "return": {
                "description": "textBodyLabel1",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4368,
            "itemtype": "method",
            "name": "labelCSS",
            "return": {
                "description": "css",
                "type": "CSS"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4392,
            "itemtype": "method",
            "name": "createFontOption",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "createFontOption"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4410,
            "itemtype": "method",
            "name": "createInitialInkControls",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4430,
            "itemtype": "method",
            "name": "createCancelTextButton",
            "return": {
                "description": "cancelTextButton",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4474,
            "itemtype": "method",
            "name": "createSaveButton",
            "return": {
                "description": "saveTextButton",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4497,
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4538,
            "description": "Ink draw UI controls (for initial draw authoring, not editing mode)",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 4818,
            "description": "Edit draw controls (edit mode)",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5097,
            "itemtype": "method",
            "name": "createInitialDrawControls",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5111,
            "itemtype": "method",
            "name": "createInkDrawControls",
            "return": {
                "description": "public methodsof the form",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5124,
            "itemtype": "method",
            "name": "updateInputs",
            "params": [
                {
                    "name": "values",
                    "description": "new values of the ink",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5141,
            "itemtype": "method",
            "name": "showForm",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5148,
            "itemtype": "method",
            "name": "createModeButton",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5168,
            "itemtype": "method",
            "name": "createDrawModeInput",
            "params": [
                {
                    "name": "form",
                    "description": "div to append inputs to",
                    "type": "HTML Element"
                },
                {
                    "name": "handler",
                    "description": "sets draw mode",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "public method to update values",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5242,
            "itemtype": "method",
            "name": "createBrushInput",
            "params": [
                {
                    "name": "form",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "return": {
                "description": "public methods",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5289,
            "itemtype": "method",
            "name": "updateStrokeSize",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5322,
            "itemtype": "method",
            "name": "createDrawColorInput",
            "params": [
                {
                    "name": "form",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "pram": "handler",
            "return": {
                "description": "public methods",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5384,
            "itemtype": "method",
            "name": "updateColor",
            "params": [
                {
                    "name": "color",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5416,
            "itemtype": "method",
            "name": "createDrawOpacityInput",
            "params": [
                {
                    "name": "form",
                    "description": "",
                    "type": "HTML Element"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "public methods",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5464,
            "itemtype": "method",
            "name": "updateOpacity",
            "params": [
                {
                    "name": "opacity",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5495,
            "itemtype": "method",
            "name": "createCancelDrawButton",
            "return": {
                "description": "cancelDrawButton",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5545,
            "description": "Ink transparency controls (initial authoring, not editing mode)",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5725,
            "description": "Edit transparency controls (edit mode)",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5889,
            "itemtype": "method",
            "name": "createInitialTransparencyControls",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5902,
            "itemtype": "method",
            "name": "createInkTransparencyControls",
            "return": {
                "description": "public properties of the form",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5911,
            "itemtype": "method",
            "name": "showForm",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5918,
            "itemtype": "method",
            "name": "createModeButtons",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5931,
            "itemtype": "method",
            "name": "updateInputs",
            "params": [
                {
                    "name": "opacity",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 5950,
            "itemtype": "method",
            "name": "createTransparencyBlocks",
            "return": {
                "description": "public properties",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6029,
            "itemtype": "method",
            "name": "updateMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6054,
            "itemtype": "method",
            "name": "createTransparencyOpcaityInput",
            "return": {
                "description": "public properties of the input",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6101,
            "itemtype": "method",
            "name": "updateOpacity",
            "params": [
                {
                    "name": "opacity",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6134,
            "itemtype": "method",
            "name": "createTransparencyCancelButton",
            "return": {
                "description": "cancelTransButton",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6168,
            "itemtype": "method",
            "name": "createSaveTransparencyButton",
            "return": {
                "description": "saveTransButton",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6187,
            "description": "Below are some helper function for the creation of ink controls above",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6191,
            "description": "controls (e.g. opacity sliders by clicking on labels).\nClicking on a label will collapse all other controls and show the selected control if it was hidden, hide it if it was shown.",
            "itemtype": "method",
            "name": "updateToggle",
            "params": [
                {
                    "name": "array",
                    "description": "the array of controls containing the control we are clicking on"
                },
                {
                    "name": "show",
                    "description": "the control we are clicking on -- we toggle it to be shown or hidden"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6223,
            "itemtype": "method",
            "name": "hideAll",
            "params": [
                {
                    "name": "array",
                    "description": "this is the array of controls to collapse (e.g. drawArray)"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6234,
            "description": "Initialize the text controls with default values\nNOT USED",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6250,
            "description": "Initialize the transparency controls with default values\nNOT USED",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6266,
            "description": "Initialize the draw controls with default values\nNOT USED",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6290,
            "itemtype": "method",
            "name": "getAttachDiv",
            "params": [
                {
                    "name": "controls",
                    "description": ""
                },
                {
                    "name": "text",
                    "description": ""
                }
            ],
            "pram": "trans",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6407,
            "itemtype": "method",
            "name": "hideInkControls",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6416,
            "itemtype": "method",
            "name": "removeInkCanv",
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6426,
            "itemtype": "method",
            "name": "createInkCanv",
            "return": {
                "description": "inkdiv   a div on which we'll create a Raphael paper",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6452,
            "itemtype": "method",
            "name": "addToDOM",
            "params": [
                {
                    "name": "container",
                    "description": "element to which we'll append the functions panel"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6460,
            "description": "Used in TourAuthoringNew",
            "itemtype": "method",
            "name": "addCatalogToDOM",
            "params": [
                {
                    "name": "container",
                    "description": "element to which we'll append the functions panel"
                }
            ],
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js",
            "line": 6470,
            "itemtype": "method",
            "name": "getIsUploading",
            "return": {
                "description": "isUploading",
                "type": "Booolean"
            },
            "class": "TAG.TourAuthoring.ComponentControls"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Constants.js",
            "line": 4,
            "description": "List of constants used across multiple files and locations",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 150,
            "itemtype": "method",
            "name": "addChildDisplay",
            "params": [
                {
                    "name": "newdisp",
                    "description": "new annotation to the track",
                    "type": "Display"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 158,
            "itemtype": "method",
            "name": "initVisuals",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 201,
            "itemtype": "method",
            "name": "restoreHandlers",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 232,
            "description": "Sets currentDisplay for use by displayClick\nResets currentDisplay on mouseup",
            "itemtype": "method",
            "name": "_displayMousedown",
            "params": [
                {
                    "name": "mouseoffset",
                    "description": "offset of mouse on element clicked for accurate dragging (offset from start of the timeline)",
                    "type": "Number"
                },
                {
                    "name": "mouseloc",
                    "description": "TAG.TourAuthoring.DisplayParts enum type specifying which part of display was clicked",
                    "type": "Enum type"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 298,
            "itemtype": "method",
            "name": "logHelper",
            "params": [
                {
                    "name": "disp",
                    "description": "",
                    "type": "Display"
                },
                {
                    "name": "cinit",
                    "description": "initial state of the display",
                    "type": "Track object"
                },
                {
                    "name": "cnew",
                    "description": "new state of the display",
                    "type": "Track Oobject"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 480,
            "itemtype": "method",
            "name": "toggleCircles",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 501,
            "itemtype": "method",
            "name": "initMenu",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 519,
            "itemtype": "method",
            "name": "getLimits",
            "return": {
                "description": "duration object         containing start time and end time properties",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 543,
            "itemtype": "method",
            "name": "setStartFromMenu",
            "params": [
                {
                    "name": "newstart",
                    "description": "new start time",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 578,
            "itemtype": "method",
            "name": "setMainFromMenu",
            "params": [
                {
                    "name": "newmain",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 616,
            "itemtype": "method",
            "name": "setFadeInFromMenu",
            "params": [
                {
                    "name": "newfadein",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 668,
            "itemtype": "method",
            "name": "setFadeOutFromMenu",
            "params": [
                {
                    "name": "newfadeout",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 710,
            "itemtype": "method",
            "name": "rightTapped",
            "params": [
                {
                    "name": "evt",
                    "description": "the long tap event on the display",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 718,
            "itemtype": "method",
            "name": "setLoc",
            "params": [
                {
                    "name": "dloc",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 726,
            "itemtype": "method",
            "name": "getOffset",
            "return": {
                "description": "offset      returns the offset of the menu",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 734,
            "itemtype": "method",
            "name": "setOffset",
            "params": [
                {
                    "name": "doffset",
                    "description": "new offset",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 742,
            "itemtype": "method",
            "name": "setcurrentDisplay",
            "params": [
                {
                    "name": "display",
                    "description": "",
                    "type": "Display"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 750,
            "itemtype": "method",
            "name": "removeHelper",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 768,
            "itemtype": "method",
            "name": "removeAttachedInkDisplay",
            "return": {
                "description": "len         length of the attached array",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 782,
            "itemtype": "method",
            "name": "removeDisplay",
            "params": [
                {
                    "name": "acted",
                    "description": "whether the user directly removed the display / if a command should be logged.",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 828,
            "itemtype": "method",
            "name": "REACTIVATE",
            "params": [
                {
                    "name": "kf",
                    "description": "",
                    "type": "KeyFrame"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 836,
            "itemtype": "method",
            "name": "getRemoved",
            "return": {
                "description": "dispRemoved",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 844,
            "itemtype": "method",
            "name": "reloadDisplay",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 857,
            "itemtype": "method",
            "name": "getClampedNew",
            "return": {
                "description": "clamped_new",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 865,
            "itemtype": "method",
            "name": "getclampedInit",
            "return": {
                "description": "clamped_init",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 873,
            "itemtype": "method",
            "name": "getHasBeenClamped",
            "return": {
                "description": "has_been_clamped",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 881,
            "itemtype": "method",
            "name": "getChildDisplays",
            "return": {
                "description": "childDisplays",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 889,
            "itemtype": "method",
            "name": "getStart",
            "return": {
                "description": "inStart    Start of display block in sec",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 897,
            "itemtype": "method",
            "name": "getEnd",
            "return": {
                "description": "end time          End of display block in sec",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 905,
            "itemtype": "method",
            "name": "getMainStart",
            "return": {
                "description": "mainStart",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 913,
            "itemtype": "method",
            "name": "getMain",
            "return": {
                "description": "main",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 921,
            "itemtype": "method",
            "name": "getOutStart",
            "return": {
                "description": "outStart",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 929,
            "itemtype": "method",
            "name": "getFadeIn",
            "return": {
                "description": "fadeIn",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 937,
            "itemtype": "method",
            "name": "getFadeOut",
            "return": {
                "description": "fadeOut",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 945,
            "itemtype": "method",
            "name": "getTotalLength",
            "return": {
                "description": "totalLength",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 953,
            "itemtype": "method",
            "name": "setkeyframeTree",
            "params": [
                {
                    "name": "kft",
                    "description": "new value of currentkeyframes",
                    "type": "Keyframe"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 961,
            "itemtype": "method",
            "name": "getID",
            "return": {
                "description": "id     Numerical ID of display",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 969,
            "itemtype": "method",
            "name": "setID",
            "params": [
                {
                    "name": "newid",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 977,
            "itemtype": "method",
            "name": "getStorageContainer",
            "return": {
                "description": "storageContainer",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 985,
            "itemtype": "method",
            "name": "setStorageContainer",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 993,
            "itemtype": "method",
            "name": "getTrack",
            "return": {
                "description": "Track that the display is in",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1001,
            "itemtype": "method",
            "name": "getMediaLength",
            "return": {
                "description": "length          media length",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1009,
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "my.type",
                "type": "Type"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1017,
            "itemtype": "method",
            "name": "getLoc",
            "return": {
                "description": "loc"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1025,
            "itemtype": "method",
            "name": "setTimes",
            "params": [
                {
                    "name": "obj",
                    "description": "track to be displayed",
                    "type": "Display"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1038,
            "itemtype": "method",
            "name": "basicSetTimes",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1052,
            "itemtype": "method",
            "name": "getTimes",
            "return": {
                "description": "object      contains time properties",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1067,
            "itemtype": "method",
            "name": "updateDispTimes",
            "params": [
                {
                    "name": "offset",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1079,
            "itemtype": "method",
            "name": "resetVisuals",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1098,
            "itemtype": "method",
            "name": "setMainStart",
            "params": [
                {
                    "name": "newmainStart",
                    "description": "new time for mainStart",
                    "type": "Time"
                }
            ],
            "trans": "{Time} trans              translation display has been dragged",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1111,
            "itemtype": "method",
            "name": "setEnd",
            "params": [
                {
                    "name": "time",
                    "description": "the end time",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1125,
            "itemtype": "method",
            "name": "setInStart",
            "params": [
                {
                    "name": "newinStart",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1142,
            "itemtype": "method",
            "name": "setOutStart",
            "params": [
                {
                    "name": "newoutStart",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1155,
            "itemtype": "method",
            "name": "setMain",
            "params": [
                {
                    "name": "newm",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1168,
            "itemtype": "method",
            "name": "setIn",
            "params": [
                {
                    "name": "newin",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1189,
            "itemtype": "method",
            "name": "setOut",
            "params": [
                {
                    "name": "newout",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1204,
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "newstart",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1221,
            "itemtype": "method",
            "name": "suppressHandles",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1237,
            "description": "Moves display to an absolute position given in res\ncurrentDisplay, offset, loc should be set, see _initSVG / _displayMousedown for details\nCurrently three different types of move, determined by loc variable\n1. loc === 'main': translates the entire display, preserves length\n2. loc === 'fade-in' or 'fade-out': drags only fade-in / fade-out region, start of other fade and lengths of fades remaines fixed, length of main area changes",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "res",
                    "description": "event from makeManipulable, onManipulate",
                    "type": "Event"
                },
                {
                    "name": "leftbound",
                    "description": "leftmost position display can move to in seconds (not required)",
                    "type": "Time"
                },
                {
                    "name": "rightbound",
                    "description": "rightmost position display can move to in seconds (not required)",
                    "type": "Time"
                },
                {
                    "name": "displayIn",
                    "description": "the position of a nearby display in the previous trac",
                    "type": "Time"
                },
                {
                    "name": "displayOut",
                    "description": "the position of a nearby display in the next track",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1369,
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1392,
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1407,
            "itemtype": "method",
            "name": "setParentDisplay",
            "params": [
                {
                    "name": "display",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1415,
            "itemtype": "method",
            "name": "getParentDisplay",
            "return": {
                "description": "parentDisplay",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1423,
            "itemtype": "method",
            "name": "getMainDisplay",
            "return": {
                "description": "mainDisplay",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1431,
            "itemtype": "method",
            "name": "getFadeInHandle",
            "return": {
                "description": "fadeInHandle"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1439,
            "itemtype": "method",
            "name": "getFadeOutHandle",
            "return": {
                "description": "fadeOutHandle"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1447,
            "itemtype": "method",
            "name": "getLongestSubGroup",
            "params": [
                {
                    "name": "gp",
                    "description": "collection of subdisplays",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "length",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1465,
            "itemtype": "method",
            "name": "getAllChildDisplays",
            "return": {
                "description": "attachedDisplays",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1499,
            "description": "hold times to which the current display can snap",
            "itemtype": "method",
            "name": "initSnap",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1521,
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "excludables",
                "type": "HashTable"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1542,
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "comparator value",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1556,
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1572,
            "itemtype": "method",
            "name": "addTimeNode",
            "params": [
                {
                    "name": "displays",
                    "description": "the array of displays in a track",
                    "type": "Array"
                },
                {
                    "name": "localTree",
                    "description": "AVLTreein which display times are to be added",
                    "type": "AVLTree"
                },
                {
                    "name": "excludables",
                    "description": "hashtable storing the times",
                    "type": "HashTable"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1596,
            "itemtype": "method",
            "name": "buildSnapTree",
            "params": [
                {
                    "name": "hostPos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "excludables",
                    "description": "",
                    "type": "HashTable"
                }
            ],
            "return": {
                "description": "localTree",
                "type": "AVLTree"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1617,
            "itemtype": "method",
            "name": "buildSnapDLL",
            "params": [
                {
                    "name": "snapTree",
                    "description": "tree holding snappable times",
                    "type": "AVLTree"
                }
            ],
            "return": {
                "description": "snapTimes                            list to put the times into",
                "type": "List"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1632,
            "itemtype": "method",
            "name": "withinSnapRange",
            "params": [
                {
                    "name": "diff",
                    "description": "time difference",
                    "type": "Time"
                }
            ],
            "return": {
                "description": "true/false",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1645,
            "itemtype": "method",
            "name": "frontSnap",
            "params": [
                {
                    "name": "excludeRight",
                    "description": "start time of the next display (if it exists) of the current display",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1697,
            "itemtype": "method",
            "name": "backSnap",
            "params": [
                {
                    "name": "excludeLeft",
                    "description": "start time of the prev display (if it exists) of the current display",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1748,
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1750,
            "itemtype": "method",
            "name": "clampDisplay",
            "params": [
                {
                    "name": "disp",
                    "description": "the display to clamp"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1772,
            "itemtype": "method",
            "name": "slideDisplay",
            "params": [
                {
                    "name": "disp",
                    "description": ""
                },
                {
                    "name": "displayTree",
                    "description": "tree containing display times",
                    "type": "AVLTree"
                },
                {
                    "name": "direction",
                    "description": "whether to slide left or right",
                    "type": "String"
                },
                {
                    "name": "bound",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1846,
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1847,
            "itemtype": "method",
            "name": "getTranslation",
            "params": [
                {
                    "name": "res",
                    "description": "mouse movement, the rest are the bounds"
                },
                {
                    "name": "leftbound",
                    "description": "bound on start time ?",
                    "type": "Time"
                },
                {
                    "name": "righbound",
                    "description": "bound on end time ?",
                    "type": "Time"
                },
                {
                    "name": "fadeinrightbound",
                    "description": "bound on fade-in time",
                    "type": "Time"
                },
                {
                    "name": "fadeoutleftbound",
                    "description": "bound on fadeout time",
                    "type": "Time"
                }
            ],
            "return": {
                "description": "translation",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1883,
            "itemtype": "method",
            "name": "msMove",
            "params": [
                {
                    "name": "selectDisplays",
                    "description": "list of the displays",
                    "type": "List"
                },
                {
                    "name": "translation",
                    "description": "translation time of the clicked display",
                    "type": "Time"
                },
                {
                    "name": "displayIn",
                    "description": "",
                    "type": "Time"
                },
                {
                    "name": "displayOut",
                    "description": "",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1986,
            "itemtype": "method",
            "name": "getTrackFromDisplay",
            "return": {
                "description": "the current display object",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 1994,
            "description": "Flips internal state to simulate clicks\nResets state when finished\nUse only in test code or functions inside display",
            "itemtype": "method",
            "name": "internalMove",
            "params": [
                {
                    "name": "dx",
                    "description": "pixel value - ?",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Time"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Time"
                },
                {
                    "name": "dloc",
                    "description": ""
                },
                {
                    "name": "doffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2022,
            "itemtype": "method",
            "name": "_moveAllKeyframes",
            "params": [
                {
                    "name": "translate",
                    "description": "Amount (in time) to move keyframes by",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2032,
            "description": "Called after zoom or scaling",
            "itemtype": "method",
            "name": "scale",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2054,
            "itemtype": "method",
            "name": "addKeyframe",
            "params": [
                {
                    "name": "x",
                    "description": "x location in px",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y location in px",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "keyframe",
                "type": "TAG.TourAuthoring.Keyframe"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2118,
            "itemtype": "method",
            "name": "removeKeyframe",
            "params": [
                {
                    "name": "keyframe",
                    "description": "to be removed from the array"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2126,
            "itemtype": "method",
            "name": "insertKeyFrame",
            "params": [
                {
                    "name": "keyframe",
                    "description": "to be added the array"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2134,
            "description": "Must be called after a keyframe is moved, as keyframes can change order",
            "itemtype": "method",
            "name": "sortKeyframes",
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2146,
            "description": "Used for fadeInDisplaying bounds of keyframe movement",
            "itemtype": "method",
            "name": "getKeyframes",
            "return": {
                "description": "current set of key frames"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2155,
            "description": "Sorted in ascending order by x position (in time)",
            "itemtype": "method",
            "name": "_keyframesort",
            "params": [
                {
                    "name": "a",
                    "description": "keyframe"
                },
                {
                    "name": "b",
                    "description": "keyframe"
                }
            ],
            "return": {
                "description": "result of the comparison",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2177,
            "itemtype": "method",
            "name": "toES",
            "params": [
                {
                    "name": "data",
                    "description": "new ES is inserted into this object",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "type header identifying the type of ES / media",
                    "type": "Type"
                },
                {
                    "name": "passthrough",
                    "description": "whether this ES (layer) can be manipulated",
                    "type": "Property"
                },
                {
                    "name": "prevState",
                    "description": "final keyframe from previous display, defines start state for this display"
                },
                {
                    "name": "id",
                    "description": "id of the display",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2237,
            "itemtype": "method",
            "name": "_getKeyframesRIN",
            "params": [
                {
                    "name": "prevState",
                    "description": "previous state of the display"
                }
            ],
            "return": {
                "description": "rin",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Display.js",
            "line": 2307,
            "description": "Returns object with begin, xml params so entries can be sorted",
            "itemtype": "method",
            "name": "toScreenPlayEntry",
            "params": [
                {
                    "name": "i",
                    "description": ""
                }
            ],
            "return": {
                "description": "spe",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Display"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 45,
            "description": "Contains one object for every input in the menu\nInput objects have parameters:",
            "params": [
                {
                    "name": "input",
                    "description": "The actual HTML input element",
                    "type": "HTML Element"
                },
                {
                    "name": "format",
                    "description": "Format of input, value from MenuInputFormats enum",
                    "type": "Value"
                },
                {
                    "name": "accessCallback",
                    "description": "Function for obtaining current value of linked variable",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "Function for updating value of linked variable",
                    "type": "Function"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 58,
            "itemtype": "method",
            "name": "createHTML",
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 166,
            "itemtype": "method",
            "name": "getMenuCloseable",
            "return": {
                "description": "menuCloseable",
                "type": "Boolean"
            },
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 174,
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "evt",
                    "description": "evt from interaction event, used to reposition menu",
                    "type": "Event"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 234,
            "description": "Doesn't fire if menuCloseable is set\nCall only from my.root close handler",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "preventClose",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 244,
            "description": "Call everywhere except my.root handler",
            "itemtype": "method",
            "name": "forceClose",
            "params": [
                {
                    "name": "preventClose",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 273,
            "itemtype": "method",
            "name": "addInput",
            "params": [
                {
                    "name": "name",
                    "description": "Name of element (appears on menu)",
                    "type": "String"
                },
                {
                    "name": "format",
                    "description": "MenuInputFormat type"
                },
                {
                    "name": "accessCallback",
                    "description": "Function for obtaining current value of linked variable",
                    "type": "Function"
                },
                {
                    "name": "updateCallback",
                    "description": "Function for updating value of linked variable",
                    "type": "Function"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 350,
            "itemtype": "method",
            "name": "addTitle",
            "params": [
                {
                    "name": "title",
                    "description": "Text to appear",
                    "type": "String"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 370,
            "itemtype": "method",
            "name": "addButton",
            "params": [
                {
                    "name": "title",
                    "description": "Text to appear in button",
                    "type": "String"
                },
                {
                    "name": "floatPos",
                    "description": "Side of screen to float to",
                    "type": "CSS property"
                },
                {
                    "name": "callback",
                    "description": "Function to fire when clicked",
                    "type": "Function"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 417,
            "itemtype": "method",
            "name": "updateInput",
            "params": [
                {
                    "name": "inputObj",
                    "description": "Input to update",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 427,
            "itemtype": "method",
            "name": "logHelper",
            "params": [
                {
                    "name": "disp",
                    "description": ""
                },
                {
                    "name": "cinit",
                    "description": ""
                },
                {
                    "name": "cnew",
                    "description": ""
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 478,
            "itemtype": "method",
            "name": "resetInputs",
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 491,
            "itemtype": "method",
            "name": "updateMenuPos",
            "params": [
                {
                    "name": "evt",
                    "description": "Interaction event object",
                    "type": "Event"
                }
            ],
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 539,
            "itemtype": "method",
            "name": "isValidInput",
            "params": [
                {
                    "name": "inputstr",
                    "description": "string to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "boolean    whether input is valid or not",
                "type": "Boolean"
            },
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 566,
            "itemtype": "method",
            "name": "convertToUpdateFormat",
            "params": [
                {
                    "name": "valuestr",
                    "description": "new value in string form",
                    "type": "String"
                },
                {
                    "name": "format",
                    "description": "MenuInputFormat value specifying input format",
                    "type": "Value"
                }
            ],
            "return": {
                "description": "updated String   input value in update required format",
                "type": "Value"
            },
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 597,
            "description": "to place in input HTML element",
            "itemtype": "method",
            "name": "convertToString",
            "params": [
                {
                    "name": "value",
                    "description": "Value as number",
                    "type": "Number"
                },
                {
                    "name": "{Format]",
                    "description": "format    MenuInputFormat type specifying format to parse number to"
                }
            ],
            "return": {
                "description": "string    value converted to string",
                "type": "String"
            },
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js",
            "line": 629,
            "itemtype": "method",
            "name": "roundDecimals\nTAG.TourAuthoring.Constants.menuDecimals decimal places",
            "params": [
                {
                    "name": "num",
                    "description": "number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "number   rounded number",
                "type": "Number"
            },
            "class": "TAG.Authoring.EditorMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 152,
            "description": "Sets ink params to defaults",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 182,
            "description": "Helper function to parse and multiply dimensions.",
            "params": [
                {
                    "name": "rel_coord",
                    "description": "the relative coordinate we want to convert to absolute coordinates"
                },
                {
                    "name": "canv_dim",
                    "description": "the relevant dimension of the canvas used for scaling"
                }
            ],
            "return": {
                "description": "the absolute coordinate"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 193,
            "description": "Takes an ellipse or rectangle and adds styling, drag events, drag handles to it.",
            "params": [
                {
                    "name": "elt",
                    "description": "the svg element"
                },
                {
                    "name": "others",
                    "description": "styling to apply to elt"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1021,
            "description": "Add an ellipse to the Raphael canvas. Called by the \"Add Ellipse\" button in isolate/block ink mode",
            "params": [
                {
                    "name": "cx,",
                    "description": "cy    the coordinates of the center of the ellipse"
                },
                {
                    "name": "rx,",
                    "description": "ry    the radii of the ellipse"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1048,
            "description": "DEPRECATED\nUsed to give style and drag functionality to old marquees (such as is currently in the Final\nGaribaldi Demo). Once all old marquees have been deleted from tours, this method can be tossed.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1054,
            "description": "analogous to add_attributes(...), but for marquees. The difference is that a marquee\nis a collection of five rectangles, and the center rectangle is the only one that gets\nthe drag handler, while the others have the color attributes.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1190,
            "description": "Add a rectangle to the Raphael canvas. Called by the \"Add Rectangle\" button in isolate/block ink mode",
            "params": [
                {
                    "name": "x,",
                    "description": "y    the coordinates of the top left corner of the rectangle"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1217,
            "description": "Add a text box (a textarea html element) for creating text inks.",
            "params": [
                {
                    "name": "x,",
                    "description": "y     coordinates of the text box (absolute)"
                },
                {
                    "name": "str",
                    "description": "any text that should be loaded into the text box (i.e. for editing inks)"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1293,
            "description": "Pans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "params": [
                {
                    "name": "dims",
                    "description": "the current dimensions of our artwork in absolute coordinates"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1354,
            "description": "Pans and resizes the ink canvas to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "params": [
                {
                    "name": "dims",
                    "description": "the current dimensions of our artwork in absolute coordinates"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1440,
            "description": "Convert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path to reverse"
                }
            ],
            "return": {
                "description": "reversed path (with outer path)"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1496,
            "description": "Construct the path that models the overlap between new_path and existing_path in the appropriate\ntransparency mode. For example, if the paths are intersecting circles, const_path_alg returns the\noutline of the two; if one path is completely inside the other, the inner one is returned in isolate\nmode and the outer is returned in block mode. Both input paths are closed (have a trailing 'z').",
            "params": [
                {
                    "name": "new_path",
                    "description": "one path"
                },
                {
                    "name": "existing_path",
                    "description": "another path (in the scheme of things, we are building this path up by adding new_paths)"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1702,
            "description": "Uses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1755,
            "description": "A helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1795,
            "description": "Called if we drag on the ink canvas in eraser mode. Finds endpoints in the current paths close\nto the drag event location and splices them out of the path array.",
            "params": [
                {
                    "name": "location",
                    "description": "the locaton of the drag event"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1832,
            "description": "Takes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring"
                },
                {
                    "name": "attr",
                    "description": "the attribute we'll parse for"
                },
                {
                    "name": "parsetype",
                    "description": "'i' (int), 's' (string), or 'f' (float)"
                }
            ],
            "return": {
                "description": "the value of the attribute in the correct format"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1861,
            "description": "Returns the isolate/block bounding shapes.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1869,
            "description": "Returns the current datastring.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1877,
            "description": "Uses path data representing ellipses and rectangles to get the path representing the ultimate block\nor isolate shape.",
            "params": [
                {
                    "name": "paths",
                    "description": "array of path strings representing ellipses/rects"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1913,
            "description": "Helper function to get artwork's relative coordinates within the viewer.",
            "return": {
                "description": "an object containing relative coordinates x, y, w, h"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1922,
            "description": "Helper function to get the svg element created by Raphael.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1930,
            "description": "Searches the current datastring for ellipses and rectangles, stores their information in bounding_shapes.\nAlso stores their coordinates and types in an array shapes and calls shapes_to_paths on shapes\nto transform them to path format.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1980,
            "description": "Returns true if the text box containing an ink being edited/authored is empty",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 1988,
            "description": "Helper function to check if there is actually a valid ink to attach/save during ink authoring/editing. For texts, need to use isTextboxEmpty.",
            "params": [
                {
                    "name": "datastring",
                    "description": "the datastring to check"
                }
            ],
            "return": {
                "description": "whether or not there are no inks on the canvas (i.e. the datastring does not represent anything useful)"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2020,
            "description": "Display warning message if ink cannot be loaded",
            "params": [
                {
                    "name": "displayString",
                    "description": "String describing error (to be displayed)"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2032,
            "description": "Checks if currently inside display",
            "return": {
                "description": "true if in display, false otherwise"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2053,
            "description": "Helper function to do some preprocessing on text inks before linking them.",
            "return": {
                "description": "true if we should proceed to linking, false if there are warning messages"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2091,
            "description": "Helper function to do some preprocessing on text inks before creating them unattached.",
            "return": {
                "description": "true if no warnings and we should create, false otherwise"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2106,
            "description": "Helper function to do some preprocessing on transparencies before linking them.",
            "return": {
                "description": "true if no warnings, false otherwise (see link_text for description of warnings)"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2139,
            "description": "Helper function to do some preprocessing on transparencies before creating them unattached.",
            "return": {
                "description": "true if no warnings, false otherwise"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2154,
            "description": "Function to link an ink to an artwork. Called for all types of inks (possibly after preprocessing, in\nthe cases of texts and transparencies).\nreturn     true if linking was successful, false if warnings",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2261,
            "description": "Function to create an unattached ink. Called for all types of inks (possibly after preprocessing, in\nthe cases of texts and transparencies).\nreturn     true if creation was successful, false if warnings",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2358,
            "description": "Loads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "params": [
                {
                    "name": "the",
                    "description": "datastring to be loaded (see update_datastring for datastring format)"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2526,
            "description": "Draws a transparency to the canvas and adds the correct styling. Also sets trans_currpath, which keeps track of current transparency path.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path representing the transparency to be loaded in"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2540,
            "description": "Loads a transparency's bounding shapes -- type boundrect and boundellipse -- for editing transparencies",
            "params": [
                {
                    "name": "datastr",
                    "description": "the datastring containing the transparency path and its bounding shapes"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2602,
            "description": "DEPRECATED -- constructor for old marquees",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2614,
            "description": "Using the point pt, computes the incoming bezier anchor coordinates for the next point (next) in the path.\nThis is done by using the points' types (if pt and next are both endpoints, pt.point.ax2, .ay2 give the relevant information, etc).",
            "params": [
                {
                    "name": "pt",
                    "description": "starting point object (contains point coordinates, type of point, and which path it's on)"
                },
                {
                    "name": "next",
                    "description": "next point object"
                }
            ],
            "return": {
                "description": "the incoming bezier anchor coordinates to next"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2649,
            "description": "Helper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2657,
            "description": "Using the point next, computes the outgoing bezier anchor coordinates for the point pt on the path.",
            "params": [
                {
                    "name": "pt",
                    "description": "starting point object (contains point coordinates, type of point, and which path it's on)"
                },
                {
                    "name": "next",
                    "description": "next point object"
                }
            ],
            "return": {
                "description": "the outgoing bezier anchor coordinates from pt"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2678,
            "description": "Pans all objects in the canvas by dx, dy.",
            "params": [
                {
                    "name": "dx,",
                    "description": "dy    the deltas"
                },
                {
                    "name": "draw",
                    "description": "should we take time to draw the objects?"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2769,
            "description": "Pans all objects in the canvas by dx, dy.",
            "params": [
                {
                    "name": "dx,",
                    "description": "dy    the deltas"
                },
                {
                    "name": "draw",
                    "description": "should we take time to draw the objects?"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2798,
            "description": "Sometimes points on the boundary of a shape do not register as being inside the shape, so check a few surrounding\npoints as well. If enough of them (2) are inside, call the point inside. This isn't bulletproof, but it should\nwork most of the time.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path whose boundary concerns us"
                },
                {
                    "name": "x,",
                    "description": "y    coordinates of the point to test"
                }
            ],
            "return": {
                "description": "1 if enough points are inside, 0 otherwise"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2818,
            "description": "Helper function to convert to relative coordinates.",
            "params": [
                {
                    "name": "abs_coord",
                    "description": "the absolute coordinate"
                },
                {
                    "name": "canv_dim",
                    "description": "the relevant canvas dimension to scale by"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2828,
            "description": "Returns 1 if any points in order_added match pt.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2841,
            "description": "Removes all Raphael elements from the canvas and clears arrays",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2856,
            "description": "Resizes all elements in the ink canvas.",
            "params": [
                {
                    "name": "scale_x,",
                    "description": "scale_y   the scale factors to resize by"
                },
                {
                    "name": "draw",
                    "description": "should we take the time to draw the result?"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2945,
            "description": "Set the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2969,
            "description": "-     * Checks whether two points are effectively the same\n     * @param pt1, pt2   the points in question\n     * @param err        how close the points have to be to be considered the same\n     * @return    whether or not the points are the same (true/false)",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 2982,
            "description": "Helper function to convert a textbox to a Raphael text element. //========== should be deprecated",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3006,
            "description": "Setter for the artname of a linked ink's associated artwork",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3014,
            "description": "Set the svg element to handle all pointer events so we can draw on it\n(and also to prevent manipulation of artwork during ink creation)",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3026,
            "description": "Setter (sets experience id of ink)",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3034,
            "description": "Sets the initial artwork keyframe",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3042,
            "description": "Sets the ink mode",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3051,
            "description": "Sets the internal reference to the old opacity of the ink track",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3059,
            "description": "Similar to the retrieveOrigDims function, but uses a proxy variable.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3086,
            "description": "Similar to add_attributes, gives text boxes drag functionality, drag handles, and undo/redo functionality.",
            "params": [
                {
                    "name": "textbox",
                    "description": "the text box in question"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3218,
            "description": "Takes transparency bounding shapes and converts them to bezier paths",
            "params": [
                {
                    "name": "shapes",
                    "description": "array of shapes to convert"
                }
            ],
            "return": {
                "description": "array of corresponding paths"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3257,
            "description": "Debugging function; prints out the ink path in our ink track",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3270,
            "description": "Scales a path representing a transparency/marquee.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path whose coordinates we'll scale"
                },
                {
                    "name": "trans_factor_x",
                    "description": "scale factor in x-direction"
                },
                {
                    "name": "trans_factor_y",
                    "description": "scale factor in y-direction"
                }
            ],
            "return": {
                "description": "scaled path"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3306,
            "description": "Returns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "return": {
                "description": "up to date datastring"
            },
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3384,
            "description": "When we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring loaded"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3420,
            "description": "The following are setters for various ink parameters",
            "params": [
                {
                    "name": "_",
                    "description": "the value to be set to the corresponding ink parameter"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3487,
            "description": "The following are getters for different ink parameters.",
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js",
            "line": 3522,
            "description": "The following are essentially setters, but they take in an id, grab the\nvalue of the dom element with that id, and set the correct variable accordingly",
            "params": [
                {
                    "name": "id",
                    "description": "the id of the dom element whose value we want to use"
                }
            ],
            "class": "TAG.TourAuthoring.InkAuthoring"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 75,
            "itemtype": "method",
            "name": "initVisuals",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 99,
            "itemtype": "method",
            "name": "toggleCircle",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 116,
            "itemtype": "method",
            "name": "restoreHandlers",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 136,
            "itemtype": "method",
            "name": "_keyframeMousedown",
            "params": [
                {
                    "name": "mouseoffsetX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "mouseoffsetY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 183,
            "itemtype": "method",
            "name": "resetVisuals",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 252,
            "description": "Helper function to set currentKeyframe and other vars in prep for movement",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 298,
            "itemtype": "method",
            "name": "initMenu",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 312,
            "itemtype": "method",
            "name": "removeHelper",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 319,
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "displayRemoved",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "preventClose",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 351,
            "itemtype": "method",
            "name": "reactivateKeyframe",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 359,
            "itemtype": "method",
            "name": "updatePosition",
            "params": [
                {
                    "name": "newpos",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 367,
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "position"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 375,
            "itemtype": "method",
            "name": "getCaptureData",
            "return": {
                "description": "captureData"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 383,
            "itemtype": "method",
            "name": "closeMenu",
            "params": [
                {
                    "name": "preventClose",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 391,
            "itemtype": "method",
            "name": "menuIsOpen",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 399,
            "itemtype": "method",
            "name": "setMenuCloseable",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 407,
            "itemtype": "method",
            "name": "rightTapped",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 415,
            "itemtype": "method",
            "name": "tapped",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 424,
            "itemtype": "method",
            "name": "",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 456,
            "description": "Functions for changing keyframe style based on selected/deselected status of keyframes",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 460,
            "itemtype": "method",
            "name": "setSelected",
            "params": [
                {
                    "name": "forceInstant",
                    "description": "selects a keyframe instantly",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 489,
            "itemtype": "method",
            "name": "setDeselected",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 498,
            "itemtype": "method",
            "name": "getTime",
            "return": {
                "description": "loc.x",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 506,
            "itemtype": "method",
            "name": "setTime",
            "params": [
                {
                    "name": "newTime",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 534,
            "itemtype": "method",
            "name": "getVolumePx",
            "return": {
                "description": "loc.y",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 542,
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "% of loc.y",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 550,
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "newvolume",
                    "description": "new volume in percent"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 561,
            "itemtype": "method",
            "name": "heightToPercent",
            "params": [
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 571,
            "itemtype": "method",
            "name": "percentToHeight",
            "params": [
                {
                    "name": "percent",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 580,
            "itemtype": "method",
            "name": "getContaining Display",
            "return": {
                "description": "display",
                "type": "Display object"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 588,
            "itemtype": "method",
            "name": "isRemoved",
            "return": {
                "description": "that.removed",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 596,
            "description": "Moves keyframe to an absolute position given in res\ncurrentKeyframe and offsets should be set, see initSVG / _keyframeMousedown for details\nAutomatically bounds keyframe movement to associated display",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "res",
                    "description": "event from makeManipulable, onManipulate"
                },
                {
                    "name": "leftbound",
                    "description": "leftmost position keyframe can move to (not required)"
                },
                {
                    "name": "rightbound",
                    "description": "rightmost position keyframe can move to (not required)"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 644,
            "description": "Flips internal state to simulate clicks\nResets state when finished\nUse only in test code or functions inside display",
            "itemtype": "method",
            "name": "internalMove",
            "params": [
                {
                    "name": "x",
                    "description": ""
                },
                {
                    "name": "y",
                    "description": ""
                },
                {
                    "name": "leftbound",
                    "description": ""
                },
                {
                    "name": "rightbound",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 671,
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "t",
                    "description": "amount of translation"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 685,
            "description": "Just resets positioning of keyframes",
            "itemtype": "method",
            "name": "scale",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 699,
            "description": "0 is bottom of timeline, 1 is top\nScale is linear\nUsed for audio keyframes only",
            "itemtype": "method",
            "name": "ypixToVolume",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 710,
            "itemtype": "method",
            "name": "toRIN",
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js",
            "line": 751,
            "itemtype": "method",
            "name": "loadRIN",
            "params": [
                {
                    "name": "data",
                    "description": "keyframe in RIN xml format"
                }
            ],
            "class": "TAG.TourAuthoring.Keyframe"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 26,
            "itemtype": "method",
            "name": "createBottomBar",
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 71,
            "itemtype": "method",
            "name": "togglePlay",
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 109,
            "itemtype": "method",
            "name": "createPlayheadSlider",
            "return": {
                "description": "playheadLocContainer",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 187,
            "itemtype": "method",
            "name": "sliderBoxUpdate",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 290,
            "itemtype": "method",
            "name": "createMagnifyingSlider",
            "return": {
                "description": "zoomSliderContainer",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 423,
            "itemtype": "method",
            "name": "createUndoRedo",
            "return": {
                "description": "undoRedoButtonArea",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 478,
            "itemtype": "method",
            "name": "createPlayhead",
            "return": {
                "description": "playHeadDiv",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 514,
            "itemtype": "method",
            "name": "zoom",
            "params": [
                {
                    "name": "percent",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.PlaybackControl.js",
            "line": 634,
            "itemtype": "method",
            "name": "addToDOM",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.PlaybackControl"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 3,
            "description": "UI Tests:\nDrag playhead and playback location fader TODO: test ensuring RIN and playhead are synced\nClick \"Play\" button twice (start and stop)",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 9,
            "description": "Automated tests module for TourAuthoring",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 31,
            "description": "Makes a bunch of tracks and displays and keyframes and adds them to the DOM",
            "params": [
                {
                    "name": "timeline",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 83,
            "description": "Makes two tracks w/ alternating display regions and calls onUpdate on the timeline",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 104,
            "description": "Material for demo",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 157,
            "description": "Dumb + fast test of viewer updating using pre-coded TAGTest narrative",
            "params": [
                {
                    "name": "viewer",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 165,
            "description": "Testing JSON RINdata + server send/recieve",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 182,
            "description": "Test creating tours",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 191,
            "description": "Test modification of Name, Content, and Thumbnail fields\nThese are the only fields Tour Authoring needs to worry about",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 209,
            "description": "Test deletion",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js",
            "line": 216,
            "description": "Hack to get audio loaded for editing",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 75,
            "description": "All time-dependent text in DOM is updated as well to reflect changes.",
            "itemtype": "method",
            "name": "setTime",
            "params": [
                {
                    "name": "newspec",
                    "description": "contains new start, end, and scale properties",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 108,
            "itemtype": "method",
            "name": "setStart",
            "params": [
                {
                    "name": "newStart",
                    "description": "in seconds",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 118,
            "itemtype": "method",
            "name": "setEnd",
            "params": [
                {
                    "name": "newEnd",
                    "description": "in seconds",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 145,
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "newTime",
                    "description": "in seconds",
                    "type": "Integer"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 166,
            "itemtype": "method",
            "name": "seekByAmound",
            "params": [
                {
                    "name": "amount",
                    "description": "in seconds",
                    "type": "Time"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 183,
            "itemtype": "method",
            "name": "seekToPercent",
            "params": [
                {
                    "name": "per",
                    "description": "percent (as decimal)",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 194,
            "params": [
                {
                    "name": "isReady",
                    "description": "whether the tour can play",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 201,
            "itemtype": "method",
            "name": "getReady",
            "return": {
                "description": "ready       whether the tour can play",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 209,
            "itemtype": "method",
            "name": "registerTime",
            "params": [
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 217,
            "itemtype": "method",
            "name": "getScale",
            "return": {
                "description": "scale       pixels per second scale on the timeline",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 225,
            "itemtype": "method",
            "name": "play",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 264,
            "itemtype": "method",
            "name": "stop",
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 276,
            "itemtype": "method",
            "name": "timeToPx",
            "params": [
                {
                    "name": "t",
                    "description": "",
                    "type": "Time"
                }
            ],
            "return": {
                "description": "in pixels",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 285,
            "itemtype": "method",
            "name": "pxToTime",
            "params": [
                {
                    "name": "px",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "in seconds",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 294,
            "itemtype": "method",
            "name": "formatTime",
            "params": [
                {
                    "name": "seconds",
                    "description": "",
                    "type": "Time"
                }
            ],
            "return": {
                "description": "formatted as 'min:sec'",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 308,
            "itemtype": "method",
            "name": "unformatTime",
            "params": [
                {
                    "name": "string",
                    "description": "time as 'min:sec'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "in seconds",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 322,
            "itemtype": "method",
            "name": "getCurrentTime",
            "return": {
                "description": "Current time (in time-space)"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 330,
            "itemtype": "method",
            "name": "getCurrentPx",
            "return": {
                "description": "currentPx",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 341,
            "itemtype": "method",
            "name": "getCurrentPercent",
            "return": {
                "description": "Current time (as percentage)",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 349,
            "itemtype": "method",
            "name": "getDuration",
            "return": {
                "description": "Object w/ start, end, scale parameters",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 363,
            "itemtype": "method",
            "name": "onSeek",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler to be called whenever current time is updated",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 371,
            "description": "Context is set as time object",
            "itemtype": "method",
            "name": "_sendSeek",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: current, percent parameters",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 383,
            "itemtype": "method",
            "name": "onSizing",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler to be called whenever start, end, or scale is updated",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 391,
            "description": "Context is set as time object",
            "itemtype": "method",
            "name": "_sendSizing",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: start, end, scale, updated parameters",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 403,
            "description": "Will only be called once",
            "itemtype": "method",
            "name": "onPlayStart",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 412,
            "itemtype": "method",
            "name": "_sendPlayStart",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: current, percent parameters",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 423,
            "itemtype": "method",
            "name": "onPlay",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 433,
            "description": "Context is set as time object",
            "itemtype": "method",
            "name": "_sendPlay",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: current, percent parameters",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 445,
            "itemtype": "method",
            "name": "onStop",
            "params": [
                {
                    "name": "handler",
                    "description": "Event Handler to be called whenever stop() is called",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 453,
            "description": "Context is set as time object",
            "itemtype": "method",
            "name": "_sendStop",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: no use at the moment",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 465,
            "description": "Executes before other actions in play or seek, allowing safe updates",
            "itemtype": "method",
            "name": "onMove",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler to be called whenever play() or seek() is called",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js",
            "line": 474,
            "description": "Context is set as time object",
            "itemtype": "method",
            "name": "_sendMove",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: current, percent parameters",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.TimeManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 141,
            "itemtype": "method",
            "name": "createTimeline",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 383,
            "itemtype": "method",
            "name": "faderUpdate",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 390,
            "itemtype": "method",
            "name": "moveScroll",
            "params": [
                {
                    "name": "wrap",
                    "description": "rulerWrapper div",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 495,
            "itemtype": "method",
            "name": "registerUpdateSlider",
            "params": [
                {
                    "name": "realUpdate",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 508,
            "itemtype": "method",
            "name": "createPlayhead",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 578,
            "itemtype": "method",
            "name": "seekPlayhead",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 588,
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 834,
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 953,
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1033,
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1038,
            "itemtype": "method",
            "name": "showEditorOverlay",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1073,
            "itemtype": "method",
            "name": "hideEditorOverlay",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1088,
            "itemtype": "method",
            "name": "createVerticalScroller",
            "return": {
                "description": "elements         parts of the vertical scroller as an array",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1183,
            "itemtype": "method",
            "name": "scrollWithBody",
            "params": [
                {
                    "name": "scrollPos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1201,
            "itemtype": "method",
            "name": "updateVerticalScroller",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1244,
            "enabledisabledrag": "",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1261,
            "itemtype": "method",
            "name": "calculateTotalTrackHeight",
            "return": {
                "description": "track height",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1280,
            "itemtype": "method",
            "name": "_updateTimeMarkers",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1325,
            "itemtype": "method",
            "name": "newLabelHelper",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1350,
            "itemtype": "method",
            "name": "createTimelineLabel",
            "params": [
                {
                    "name": "i",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "timeLabel",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1392,
            "itemtype": "method",
            "name": "getEditInkOn",
            "return": {
                "description": "editInkOn",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1400,
            "itemtype": "method",
            "name": "setEditInkOn",
            "params": [
                {
                    "name": "status",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1408,
            "itemtype": "method",
            "name": "addToDOM",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1416,
            "itemtype": "method",
            "name": "getSelectedTrack",
            "return": {
                "description": "selectedTrack",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1424,
            "itemtype": "method",
            "name": "setCompControl",
            "params": [
                {
                    "name": "comp",
                    "description": "public methods of ComponentControls.js",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1432,
            "description": "Creates a new InkController and loads in the datastring of the track.\nShows the edit draw controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring (see InkController.js for format)"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1444,
            "description": "Creates a new InkController and loads in the datastring of the track.\nShows the edit text controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring (see InkController.js for format)"
                },
                {
                    "name": "dims",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1457,
            "description": "Creates a new InkController and loads in the datastring of the track.\nShows the edit highlighting controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring (see InkController.js for format)"
                },
                {
                    "name": "trans_type",
                    "description": "the track's highlighting type (block/isolate)"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1470,
            "itemtype": "method",
            "name": "setModifyingInk",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1478,
            "itemtype": "method",
            "name": "removeInkSession",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1486,
            "description": "just have each display that is selected push its bounds into the heaps\nhacky way to solve multi selection not working when dragging a display with 0 fadeout.",
            "itemtype": "method",
            "name": "getMSBounds",
            "params": [
                {
                    "name": "currentDisplay",
                    "description": "",
                    "type": "Display"
                }
            ],
            "return": {
                "description": "bound: the array of the smallest distances"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1504,
            "itemtype": "method",
            "name": "turnOffMS",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1516,
            "description": "this is used in undo/redo to store the previous positions of all of the selected displays",
            "itemtype": "method",
            "name": "updateOldData",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1549,
            "itemtype": "method",
            "name": "newDataArray",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1556,
            "itemtype": "method",
            "name": "getOldData",
            "return": {
                "description": "oldata",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1564,
            "params": [
                {
                    "name": "res",
                    "description": "mouse input"
                },
                {
                    "name": "currentDisplay",
                    "description": "the one user is dragging.",
                    "type": "Display"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1613,
            "itemtype": "method",
            "name": "getDisplayData",
            "return": {
                "description": "data",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1621,
            "itemtype": "method",
            "name": "allDeselected",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1643,
            "params": [
                {
                    "name": "media",
                    "description": "URL of added resource (for audio, video, artwork)"
                },
                {
                    "name": "track",
                    "description": "Associated track (for ink)"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1649,
            "itemtype": "method",
            "name": "getMultiSelection",
            "return": {
                "description": "multiSelection",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1657,
            "itemtype": "method",
            "name": "getMultiSelectedArray",
            "return": {
                "description": "multiSelectedArray",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1665,
            "return": {
                "description": "length",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1672,
            "return": {
                "description": "tracks",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1679,
            "itemtype": "method",
            "name": "getTimelineRuler",
            "return": {
                "description": "timeRuler"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1687,
            "itemtype": "method",
            "name": "setisMenuOpen",
            "return": {
                "description": "status",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1695,
            "itemtype": "method",
            "name": "getisMenuOpen",
            "return": {
                "description": "isMenuOpen",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1703,
            "itemtype": "method",
            "name": "getClampedDisplays",
            "return": {
                "description": "clamped_displays",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1711,
            "itemtype": "method",
            "name": "setCloseMenu",
            "params": [
                {
                    "name": "closeFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1719,
            "itemtype": "method",
            "name": "getCloseMenu",
            "return": {
                "description": "closeMenuHolder",
                "type": "Function"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1727,
            "description": "Used to load ink",
            "itemtype": "method",
            "name": "findTrackByTitle",
            "return": {
                "description": "track object",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1736,
            "itemtype": "method",
            "name": "getLastDisplayTime",
            "return": {
                "description": "allDisplaysEnd            the highest end time of all displays",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1756,
            "description": "If duplicate exists, changes name to prevent duplication",
            "itemtype": "method",
            "name": "fixTrackTitle",
            "params": [
                {
                    "name": "title",
                    "description": "the new title"
                },
                {
                    "name": "id",
                    "description": "id of the track whose title is being changed"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1814,
            "itemtype": "method",
            "name": "addAudioTrack",
            "params": [
                {
                    "name": "media",
                    "description": "path to get the media element",
                    "type": "Path"
                },
                {
                    "name": "name",
                    "description": "name of the audio track",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "position of the track"
                },
                {
                    "name": "mediaLength",
                    "description": "Track duration",
                    "type": "Time"
                }
            ],
            "return": {
                "description": "newTrack        of type AudioTrack.js",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1831,
            "itemtype": "method",
            "name": "addVideoTrack",
            "params": [
                {
                    "name": "media",
                    "description": "path to get the media element",
                    "type": "Path"
                },
                {
                    "name": "name",
                    "description": "name of the video track",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "position of the track"
                },
                {
                    "name": "mediaLength",
                    "description": "Track duration",
                    "type": "Time"
                }
            ],
            "return": {
                "description": "newTrack        of type VideoTrack.js",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1850,
            "itemtype": "method",
            "name": "addAudioTrack",
            "params": [
                {
                    "name": "media",
                    "description": "path to get the media element",
                    "type": "Path"
                },
                {
                    "name": "name",
                    "description": "name of the artwork track",
                    "type": "String"
                },
                {
                    "name": "guid",
                    "description": "ID of the track",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": ""
                }
            ],
            "return": {
                "description": "newTrack        of type ArtworkTrack.js",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1867,
            "itemtype": "method",
            "name": "addAudioTrack",
            "params": [
                {
                    "name": "media",
                    "description": "path to get the media element",
                    "type": "Path"
                },
                {
                    "name": "name",
                    "description": "name of the audio track",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "position of the track"
                }
            ],
            "return": {
                "description": "newTrack        of type ImageTrack.js",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1907,
            "itemtype": "method",
            "name": "addInkTrack",
            "params": [
                {
                    "name": "track",
                    "description": "",
                    "type": "Path"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "inkType",
                    "description": ""
                },
                {
                    "name": "inkSpec",
                    "description": ""
                },
                {
                    "name": "pos",
                    "description": ""
                }
            ],
            "return": {
                "description": "newTrack",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1972,
            "itemtype": "method",
            "name": "createSpec",
            "params": [
                {
                    "name": "media",
                    "description": "the path of the track file",
                    "type": "Path"
                },
                {
                    "name": "name",
                    "description": "name of the track",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": "track id"
                }
            ],
            "return": {
                "description": "spec    object with properties for each track",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 1996,
            "itemtype": "method",
            "name": "addAnyTrack",
            "params": [
                {
                    "name": "track",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pos",
                    "description": ""
                }
            ],
            "return": {
                "description": "spec",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2027,
            "itemtype": "method",
            "name": "_addTrack",
            "params": [
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2036,
            "itemtype": "method",
            "name": "_removeTrack",
            "params": [
                {
                    "name": "track",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2054,
            "itemtype": "method",
            "name": "prependAddToDom",
            "params": [
                {
                    "name": "track",
                    "description": ""
                },
                {
                    "name": "trackTitle",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2064,
            "itemtype": "method",
            "name": "getNumTracks",
            "return": {
                "description": "numTracks",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2072,
            "itemtype": "method",
            "name": "getRelatedArtworks",
            "return": {
                "description": "related     GUIDs of all artworks loaded into tracks",
                "type": "Array"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2089,
            "itemtype": "method",
            "name": "getTrackBody",
            "return": {
                "description": "trackBody"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2097,
            "description": "Used in ComponentControls to check if ink can be added",
            "itemtype": "method",
            "name": "checkForArtworks",
            "params": [
                {
                    "name": "numArtworks",
                    "description": "number of artwork tracks in the timeline",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if there are artworks loaded, else false",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2113,
            "itemtype": "method",
            "name": "disableInk",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2120,
            "description": "RIN reloads fired by edits are blocked until this is called!",
            "itemtype": "method",
            "name": "setLoaded",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2129,
            "itemtype": "method",
            "name": "receiveKeyframe",
            "params": [
                {
                    "name": "trackName",
                    "description": "name of the track whose media is being manipulated",
                    "type": "String"
                },
                {
                    "name": "capture",
                    "description": "keyframe data in RIN format (needs to be parsed)"
                },
                {
                    "name": "select",
                    "description": "whether receiving keyframe should be selected",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2146,
            "itemtype": "method",
            "name": "capturingOff",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2156,
            "itemtype": "method",
            "name": "captureKeyframe",
            "params": [
                {
                    "name": "artname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Keyframe data in xml"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2165,
            "itemtype": "method",
            "name": "getViewer",
            "return": {
                "description": "viewer"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2173,
            "itemtype": "method",
            "name": "getDataHolder",
            "return": {
                "description": "dataHolder",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2185,
            "itemtype": "method",
            "name": "toRIN",
            "return": {
                "description": "JSON object representing current state of timeline in RIN format"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2252,
            "itemtype": "method",
            "name": "_getResourceTable",
            "return": {
                "description": "table     JSON object table of resources",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2265,
            "itemtype": "method",
            "name": "_getExperienceStreams",
            "return": {
                "description": "es    JSON object table of ESs",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2278,
            "itemtype": "method",
            "name": "_getScreenPlay",
            "return": {
                "description": "screenplayStorage   XML screenplay string",
                "type": "String"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2292,
            "description": "debounce will prevent the function from being called\nuntil the debounce function hasn't been called for\nthe specified number of milliseconds",
            "itemtype": "method",
            "name": "coreUpdate",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2317,
            "itemtype": "method",
            "name": "onUpdate",
            "params": [
                {
                    "name": "noDebounce",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2329,
            "itemtype": "method",
            "name": "loadRIN",
            "params": [
                {
                    "name": "rin",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2386,
            "itemtype": "method",
            "name": "compareExps",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2444,
            "itemtype": "method",
            "name": "parseHelper",
            "params": [
                {
                    "name": "eobj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2498,
            "itemtype": "method",
            "name": "confirmDeleteDisableInk",
            "params": [
                {
                    "name": "name",
                    "description": "name of the ink track",
                    "type": "String"
                },
                {
                    "name": "display",
                    "description": "display of the track",
                    "type": "Display"
                },
                {
                    "name": "myy",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2587,
            "description": "Note that this is scoped into loadRIN function! (needs access to inks variable)",
            "itemtype": "method",
            "name": "parseTrack",
            "params": [
                {
                    "name": "eobj",
                    "description": "two params, name is track name, exp is rin format experience object"
                },
                {
                    "name": "e",
                    "description": "track position of eobj"
                }
            ],
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js",
            "line": 2698,
            "itemtype": "method",
            "name": "cancelAccel",
            "class": "TAG.TourAuthoring.Timeline"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 37,
            "itemtype": "method",
            "name": "init",
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 49,
            "itemtype": "method",
            "name": "createTopBar",
            "return": {
                "description": "top       the top bar div",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 60,
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "stayOnPage",
                    "description": "determines whether or not to stay on the authoring page after saving changes",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 114,
            "itemtype": "method",
            "name": "goBack",
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 136,
            "itemtype": "method",
            "name": "createBackDialog",
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 280,
            "itemtype": "method",
            "name": "createTitleTextArea",
            "return": {
                "description": "textArea          the div containing the title text",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 326,
            "itemtype": "method",
            "name": "createSaveDialog",
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 455,
            "itemtype": "method",
            "name": "tourOptionsMenu",
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TopMenu.js",
            "line": 523,
            "itemtype": "method",
            "name": "addToDOM",
            "params": [
                {
                    "name": "container",
                    "description": "the main container that contains TAG",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.TopMenu"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 37,
            "itemtype": "method",
            "name": "init",
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 53,
            "itemtype": "method",
            "name": "createFunctionPanel",
            "return": {
                "description": "panel         div containing text and drop-down arrow",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 71,
            "description": "Creates component buttons for the drop-down menu",
            "itemtype": "method",
            "name": "addMenuItem",
            "params": [
                {
                    "name": "title",
                    "description": "Name of button",
                    "type": "String"
                },
                {
                    "name": "component",
                    "description": "DOM element to add button to",
                    "type": "HTML Element"
                },
                {
                    "name": "id",
                    "description": "id to the element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "item          the label containing the option name",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 101,
            "itemtype": "method",
            "name": "createDropDownIcon",
            "return": {
                "description": "icon      the drop-down arrow icon image",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 119,
            "itemtype": "method",
            "name": "createOptionsLabel",
            "return": {
                "description": "optionsLabel        label with text",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 166,
            "itemtype": "method",
            "name": "createMainMenu",
            "return": {
                "description": "mainMenu        div containing list of editing options",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 183,
            "itemtype": "method",
            "name": "createMenuOptions",
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 251,
            "itemtype": "method",
            "name": "unauth",
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 264,
            "description": "client updated the doq while we were working), force\nthe call anyway, which will overwrite their changes.",
            "itemtype": "method",
            "name": "conflict",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "async request object (see http://api.jquery.com/Types/#jqXHR)",
                    "type": "JqXHR"
                },
                {
                    "name": "ajaxCall",
                    "description": "see documentation in TAG.Worktop.Database (and the code for asyncRequest in that file)"
                }
            ],
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 275,
            "itemtype": "method",
            "name": "error",
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 288,
            "itemtype": "method",
            "name": "handleDialogInputs",
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 485,
            "itemtype": "method",
            "name": "hideMenu",
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 494,
            "itemtype": "method",
            "name": "exportJSON",
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 535,
            "description": "Show a popup dialog with a textarea so the user can copy some content. This\nis used in the \"export tour data\" functionality to give the user an html string.",
            "itemtype": "method",
            "name": "popupTextareaDialog",
            "params": [
                {
                    "name": "description",
                    "description": "description/directions",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "text for the textarea",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the overlay to be appended to the root",
                "type": "JQuery obj"
            },
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 627,
            "itemtype": "method",
            "name": "applyCSS",
            "params": [
                {
                    "name": "css",
                    "description": "list of css properties as an object",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 635,
            "itemtype": "method",
            "name": "applyLabelCSS",
            "params": [
                {
                    "name": "css",
                    "description": "list of css properties as an object",
                    "type": "Object"
                }
            ],
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.TourOptions.js",
            "line": 643,
            "itemtype": "method",
            "name": "addToDOM",
            "params": [
                {
                    "name": "container",
                    "description": "the actual div/window containing TAG",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.TourOptions"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 210,
            "itemtype": "method",
            "name": "_initTitle",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 251,
            "itemtype": "method",
            "name": "initVisuals",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 319,
            "itemtype": "method",
            "name": "_initTrack",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 418,
            "description": "It appears when a track div is right-clicked",
            "itemtype": "method",
            "name": "_initMenu",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 443,
            "itemtype": "method",
            "name": "close",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 450,
            "itemtype": "method",
            "name": "displayError",
            "params": [
                {
                    "name": "displayString",
                    "description": "string to be shown on the pop-up",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 468,
            "itemtype": "method",
            "name": "componentOptionEditInk",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 583,
            "itemtype": "method",
            "name": "componentOptionRename",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 720,
            "itemtype": "method",
            "name": "okTap",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 743,
            "itemtype": "method",
            "name": "componentOptionDuplicate",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 799,
            "itemtype": "method",
            "name": "addTrackDisplays",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Track"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 811,
            "itemtype": "method",
            "name": "addEachTrackDisplay",
            "params": [
                {
                    "name": "i",
                    "description": "to index into the displays list",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 868,
            "itemtype": "method",
            "name": "componenetOptionConvertVideo",
            "params": [
                {
                    "name": ":",
                    "description": "evt",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 895,
            "itemtype": "method",
            "name": "componentOptionDelete",
            "params": [
                {
                    "name": "{Event]",
                    "description": "evt"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1009,
            "itemtype": "method",
            "name": "yesTap",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1063,
            "itemtype": "method",
            "name": "deleteAttachedInks",
            "params": [
                {
                    "name": "j",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1094,
            "itemtype": "method",
            "name": "componentOptionCancel",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1106,
            "itemtype": "method",
            "name": "updateTracksEventsPaused",
            "params": [
                {
                    "name": "fb",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1116,
            "description": "Set a display selected when in multi select mode",
            "itemtype": "method",
            "name": "setSelected",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1127,
            "description": "Set a display deselected in multi select mode",
            "itemtype": "method",
            "name": "setDeselected",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1138,
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1140,
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "my.type",
                "type": "Type"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1148,
            "itemtype": "method",
            "name": "getMedia",
            "return": {
                "description": "media",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1156,
            "itemtype": "method",
            "name": "getPos",
            "return": {
                "description": "arrayPos",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1164,
            "itemtype": "method",
            "name": "getTitle",
            "return": {
                "description": "my.title",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1172,
            "itemtype": "method",
            "name": "setTitle",
            "params": [
                {
                    "name": "newTitle",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1182,
            "itemtype": "method",
            "name": "getEventsPaused",
            "return": {
                "description": "eventsPaused",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1190,
            "itemtype": "method",
            "name": "setEventsPaused",
            "params": [
                {
                    "name": "fB",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1198,
            "itemtype": "method",
            "name": "getCurrentDisplay",
            "return": {
                "description": "my.currentDisplay",
                "type": "Display"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1206,
            "itemtype": "method",
            "name": "setCurrentDisplay",
            "params": [
                {
                    "name": "currDisplay",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1214,
            "itemtype": "method",
            "name": "setIsVisible",
            "params": [
                {
                    "name": "visibility",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1222,
            "itemtype": "method",
            "name": "getCurrentKeyframe",
            "return": {
                "description": "my.currentKeyframe",
                "type": "Keyframe"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1230,
            "itemtype": "method",
            "name": "getCompOps",
            "return": {
                "description": "compOpsOpen",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1238,
            "itemtype": "method",
            "name": "getGUID",
            "return": {
                "description": "guid",
                "type": "String"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1246,
            "itemtype": "method",
            "name": "setStorageContainer",
            "params": [
                {
                    "name": "storeContain",
                    "description": "",
                    "type": "HTML ELement"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1254,
            "itemtype": "method",
            "name": "getStorageContainer",
            "return": {
                "description": "storageContainer",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1262,
            "description": "Corresponds to ordering of tracks in timeline array\nMaps to z-layering in RIN\nEach track ID should be unique, but might change on track switch\nUse updatePos to update id",
            "itemtype": "method",
            "name": "getID",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1274,
            "itemtype": "method",
            "name": "updateTrackArray",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1283,
            "itemtype": "method",
            "name": "updatePos",
            "params": [
                {
                    "name": "pos",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1295,
            "itemtype": "method",
            "name": "getTitleDiv",
            "return": {
                "description": "titleDiv",
                "type": "HTML Element"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1303,
            "description": "if the track to be inserted is below this track, then it is inserted before this track\notherwise, it is inserted after",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "track",
                    "description": "",
                    "type": "Track"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1323,
            "itemtype": "method",
            "name": "insertHelper",
            "params": [
                {
                    "name": "pos",
                    "description": "array position within calling class"
                }
            ],
            "return": {
                "description": "false",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1344,
            "itemtype": "method",
            "name": "getTrackDomElement",
            "return": {
                "description": "my.track",
                "type": "DOM Element"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1352,
            "itemtype": "method",
            "name": "relaodTrack",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1371,
            "itemtype": "method",
            "name": "restoreHandlers",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1400,
            "itemtype": "method",
            "name": "tapRightTitle",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1410,
            "itemtype": "method",
            "name": "tappedTitle",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1429,
            "itemtype": "method",
            "name": "scrollTitleWrapper",
            "params": [
                {
                    "name": "delta",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1446,
            "itemtype": "method",
            "name": "trackTitleReleased",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1516,
            "itemtype": "method",
            "name": "titleDivTranslateY",
            "params": [
                {
                    "name": "res",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1555,
            "itemtype": "method",
            "name": "moveUp",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1575,
            "itemtype": "method",
            "name": "moveDown",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1596,
            "itemtype": "method",
            "name": "titleDivTranslateX",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1606,
            "itemtype": "method",
            "name": "titleDivMouseUp",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1659,
            "itemtype": "method",
            "name": "released",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1677,
            "itemtype": "method",
            "name": "tapRight",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1693,
            "itemtype": "method",
            "name": "doubleTapped",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1711,
            "itemtype": "method",
            "name": "trackTapped",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1758,
            "description": "Set current display deselected when user clicks it again",
            "itemtype": "method",
            "name": "setDisplaySelected",
            "params": [
                {
                    "name": "currentDisplay",
                    "description": "",
                    "type": "Display"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1775,
            "description": "Set the current display deselected",
            "itemtype": "method",
            "name": "setDisplayDeselected",
            "params": [
                {
                    "name": "currentDisplay",
                    "description": "the display is been clicking on"
                },
                {
                    "name": "keepDisplays",
                    "description": "if we want to keep the displays"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1807,
            "description": "Pan timeline view\nIf a display or keyframe is selected, move that",
            "itemtype": "method",
            "name": "onManipTrack",
            "params": [
                {
                    "name": "res",
                    "description": ""
                },
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 1897,
            "description": "Helper function returning the left/right bounds of the track during multi-select",
            "itemtype": "method",
            "name": "boundHelper",
            "params": [
                {
                    "name": "currDisplay:",
                    "description": "display that the bounds are being found for"
                }
            ],
            "return": {
                "description": "the bound for each display separately that are multi-selected"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2023,
            "itemtype": "method",
            "name": "getParentArtDisplay",
            "params": [
                {
                    "name": "disp",
                    "description": "",
                    "type": "Display"
                }
            ],
            "return": {
                "description": "parent of the disp passed in",
                "type": "Display"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2032,
            "itemtype": "method",
            "name": "scale",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2044,
            "itemtype": "method",
            "name": "leftAndRight",
            "params": [
                {
                    "name": "res",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2055,
            "itemtype": "method",
            "name": "upAndDown",
            "params": [
                {
                    "name": "res",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2066,
            "itemtype": "method",
            "name": "scrollTitle",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2091,
            "itemtype": "method",
            "name": "addKeyorDisplay",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2208,
            "itemtype": "method",
            "name": "deselectKeyframe",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2218,
            "description": "we need to pass it back into the track's list of allKeyframes manually for lines to draw",
            "itemtype": "method",
            "name": "addKeyframeToLines",
            "params": [
                {
                    "name": "keyframe",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2228,
            "itemtype": "method",
            "name": "drawLines",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2308,
            "itemtype": "method",
            "name": "addIconToTitle",
            "params": [
                {
                    "name": "type",
                    "description": "type of track",
                    "type": "Type"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2348,
            "itemtype": "method",
            "name": "addInkTypeToTitle",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Type"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2376,
            "itemtype": "method",
            "name": "addTitleToDOM",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2389,
            "itemtype": "method",
            "name": "addEditorToDOM",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2401,
            "itemtype": "method",
            "name": "remove",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2410,
            "itemtype": "method",
            "name": "detach",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2423,
            "itemtype": "method",
            "name": "addDisplay",
            "params": [
                {
                    "name": "x",
                    "description": "x value (px) for display",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "length of display in seconds (set to 5 if not given) (only used in testing)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "newDisplay"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2459,
            "itemtype": "method",
            "name": "getDisplays",
            "return": {
                "description": "my.display",
                "type": "Display"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2467,
            "params": [
                {
                    "name": "capture",
                    "description": "keyframe data in RIN format"
                },
                {
                    "name": "select",
                    "description": "whether the keyframe receiving data should be selected"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2506,
            "itemtype": "method",
            "name": "_unselectKeyframe",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2537,
            "itemtype": "method",
            "name": "getInkSpec",
            "return": {
                "description": "my.inkSpec",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2545,
            "itemtype": "method",
            "name": "getinkPath",
            "return": {
                "description": "my.inkPath",
                "type": "String"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2553,
            "itemtype": "method",
            "name": "getInkLink",
            "return": {
                "description": "my.experienceId"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2561,
            "itemtype": "method",
            "name": "getInkEnabled",
            "return": {
                "description": "my.inkEnabled"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2569,
            "itemtype": "method",
            "name": "getInitKeyFrame",
            "return": {
                "description": "my.inkInitKeyframe",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2577,
            "itemtype": "method",
            "name": "getInkRelativeArtPos",
            "return": {
                "description": "my.inkRelativeArtPos",
                "type": "Object"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2589,
            "itemtype": "method",
            "name": "setinkType",
            "params": [
                {
                    "name": "type",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2597,
            "itemtype": "method",
            "name": "setInkSize",
            "params": [
                {
                    "name": "size",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2605,
            "itemtype": "method",
            "name": "setInkPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2613,
            "itemtype": "method",
            "name": "setInkLink",
            "params": [
                {
                    "name": "id",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2621,
            "itemtype": "method",
            "name": "setInkEnabled",
            "params": [
                {
                    "name": "enabled",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2629,
            "itemtype": "method",
            "name": "setInkInitialKeyframe",
            "params": [
                {
                    "name": "Keyframe",
                    "description": "kf"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2637,
            "itemtype": "method",
            "name": "setInkRelativeArtPos",
            "params": [
                {
                    "name": "Position",
                    "description": "ar"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2645,
            "itemtype": "method",
            "name": "addAttachedInkTrack",
            "params": [
                {
                    "name": "Track",
                    "description": "tr"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2657,
            "itemtype": "method",
            "name": "removeAttachedInkTrack",
            "params": [
                {
                    "name": "Track",
                    "description": "tr"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2675,
            "itemtype": "method",
            "name": "addResource",
            "params": [
                {
                    "name": "table",
                    "description": "RIN resource table object to add entry to"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2685,
            "itemtype": "method",
            "name": "addES",
            "params": [
                {
                    "name": "data",
                    "description": "\"ExperienceStreams\" object to add named track ES object to"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2792,
            "description": "Don't forget to sort them afterwards",
            "itemtype": "method",
            "name": "addScreenPlayEntries",
            "params": [
                {
                    "name": "screenplay",
                    "description": "Array to add screenplay entries to"
                },
                {
                    "name": "needFull",
                    "description": "If true, output screenplay entries regardless of internal settings"
                }
            ],
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2811,
            "itemtype": "method",
            "name": "getMinimizedState",
            "return": {
                "description": "isMinimized",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Track.js",
            "line": 2819,
            "itemtype": "method",
            "name": "toggleMinimized",
            "class": "TAG.TourAuthoring.Track"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 34,
            "itemtype": "method",
            "name": "logCommand",
            "params": [
                {
                    "name": "command",
                    "description": "TAG.TourAuthoring.Command that was just run"
                }
            ],
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 56,
            "itemtype": "method",
            "name": "dirtyStateGetter",
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 67,
            "itemtype": "method",
            "name": "undoStackSize",
            "return": {
                "description": "undoStack.length",
                "type": "Number"
            },
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 75,
            "itemtype": "method",
            "name": "setPrevFalse",
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 87,
            "itemtype": "method",
            "name": "setInitialized",
            "params": [
                {
                    "name": "boolVal",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 95,
            "itemtype": "method",
            "name": "undo",
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 113,
            "itemtype": "method",
            "name": "redo",
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 130,
            "description": "Called on save or after loading",
            "itemtype": "method",
            "name": "clear",
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 139,
            "itemtype": "method",
            "name": "greyOutBtn",
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.UndoManager.js",
            "line": 153,
            "description": "(Originally used for tying auto-creation of displays together with track creation)",
            "itemtype": "method",
            "name": "combineLast",
            "params": [
                {
                    "name": "n",
                    "description": "Number of commands to tie together"
                }
            ],
            "class": "TAG.TourAuthoring.UndoManager"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 55,
            "itemtype": "method",
            "name": "_startRIN",
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 100,
            "itemtype": "method",
            "name": "_onPlayerESEvent",
            "params": [
                {
                    "name": "eventArgs",
                    "description": "sender, eventId, ? (RIN)"
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 126,
            "itemtype": "method",
            "name": "_sendKeyframe",
            "params": [
                {
                    "name": "sender",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 145,
            "itemtype": "method",
            "name": "capturingOff",
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 153,
            "itemtype": "method",
            "name": "isKeyframingDisabled",
            "return": {
                "description": "keyframingDisabled",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 161,
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 173,
            "itemtype": "method",
            "name": "_onPlayerStateEvent",
            "params": [
                {
                    "name": "isReady",
                    "description": "true if RIN is ready to play"
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 196,
            "itemtype": "method",
            "name": "_stopCapture",
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 209,
            "itemtype": "method",
            "name": "captureKeyframe",
            "params": [
                {
                    "name": "artname",
                    "description": ""
                }
            ],
            "return": {
                "description": "current keyframe state data"
            },
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 220,
            "itemtype": "method",
            "name": "getCurrentTime",
            "return": {
                "description": "current time in player",
                "type": "Time"
            },
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 228,
            "itemtype": "method",
            "name": "addToDOM",
            "params": [
                {
                    "name": "addToDOM",
                    "description": "",
                    "type": "HTML Element"
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 236,
            "itemtype": "method",
            "name": "getContainer",
            "return": {
                "description": "rinContainer"
            },
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 244,
            "itemtype": "method",
            "name": "resize",
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 278,
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "time",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 290,
            "itemtype": "method",
            "name": "stop",
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 301,
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "time",
                    "description": "location to seek to in units of seconds"
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 318,
            "itemtype": "method",
            "name": "volume",
            "params": [
                {
                    "name": "v",
                    "description": "volume, between 0 and 1"
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 326,
            "itemtype": "method",
            "name": "setTimeline",
            "params": [
                {
                    "name": "t",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 334,
            "itemtype": "method",
            "name": "loadTour",
            "params": [
                {
                    "name": "url",
                    "description": "URL of json tour"
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 348,
            "itemtype": "method",
            "name": "reloadTour",
            "params": [
                {
                    "name": "data",
                    "description": "Segment portion of RIN tour"
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 390,
            "itemtype": "method",
            "name": "getIsReloading",
            "return": {
                "description": "isReloading",
                "type": "Boolean"
            },
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 398,
            "itemtype": "method",
            "name": "setIsReloading",
            "params": [
                {
                    "name": "bool",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 406,
            "itemtype": "method",
            "name": "initializeTour",
            "params": [
                {
                    "name": "data",
                    "description": ""
                }
            ],
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js",
            "line": 435,
            "itemtype": "method",
            "name": "unload",
            "class": "TAG.TourAuthoring.Viewer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 15,
            "description": "This two-stage timer takes in two duration-callback pairs. The stage one \ncallback is put on a timeout configured to the pre-specified duration\nwhich will tick down until the callback executes or until it is restarted. \nUpon the stage one callback's execution, the stage two callback's timeout\nis then started. However, if the second callback's timeout is reset, it will \nrestart the entire timer back to stage one. Upon the second callback's \nexecution, the timer will sit idle until the reset method is invoked.",
            "itemtype": "method",
            "name": "TwoStageTimer",
            "params": [
                {
                    "name": "stageOne",
                    "description": "the stage one timer pair (see timerPair helper function below)",
                    "type": "Object"
                },
                {
                    "name": "stageTwo",
                    "description": "the stage two timer pair",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 41,
            "description": "Start the timer (the first stage)",
            "itemtype": "method",
            "name": "start",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 52,
            "description": "Kill the timer by stopping both timeouts and setting started to false",
            "itemtype": "method",
            "name": "kill",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 63,
            "description": "Returns whether or not the timer is stopped",
            "itemtype": "method",
            "name": "isStopped",
            "return": {
                "description": "this._started",
                "type": "Boolean"
            },
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 72,
            "description": "A general restart method -- clears timeouts and intervals and\nrestarts stage one timeout",
            "itemtype": "method",
            "name": "restart",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 85,
            "description": "Reinitialize the timer with new timerPairs\nmethod reinitialize",
            "params": [
                {
                    "name": "newS1",
                    "description": "new stage one timerPair",
                    "type": "TimerPair"
                },
                {
                    "name": "newS2",
                    "description": "new stage two timerPair",
                    "type": "TimerPair"
                }
            ],
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 108,
            "description": "Private method to fire stage one timer",
            "itemtype": "method",
            "name": "fireS1",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 117,
            "description": "Private method to fire stage two timer",
            "itemtype": "method",
            "name": "fireS2",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 135,
            "description": "Create a timerPair object",
            "itemtype": "method",
            "name": "timerPair",
            "params": [
                {
                    "name": "duration",
                    "description": "length of timer",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "function to be called when timer expires",
                    "type": "Function"
                }
            ],
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 148,
            "description": "Create default stage one timerPair",
            "itemtype": "method",
            "name": "defaultStageOne",
            "return": {
                "description": "default stage one pair",
                "type": "Object"
            },
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 157,
            "description": "Create default stage two timerPair",
            "itemtype": "method",
            "name": "defaultStageTwo",
            "return": {
                "description": "default stage two pair",
                "type": "Object"
            },
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 166,
            "description": "Create default idle timer warning overlay -- default\nstage one callback",
            "itemtype": "method",
            "name": "createIdleOverlay",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 244,
            "description": "Remove the default warning overlay",
            "itemtype": "method",
            "name": "removeIdleOverlay",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 252,
            "description": "Returns to home page -- default stage two callback",
            "itemtype": "method",
            "name": "returnHome",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.IdleTimer.js",
            "line": 272,
            "description": "Restart the idle timer; this is a utility function and could be defined elsewhere",
            "itemtype": "method",
            "name": "restartIdleTimer",
            "class": "TAG.Util.IdleTimer"
        },
        {
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 24,
            "description": "Returns whether we're in splitscreen mode",
            "itemtype": "method",
            "name": "isOn",
            "return": {
                "description": "whether we're in splitscreen mode",
                "type": "Boolean"
            },
            "class": "TAG.Util.Splitscreen"
        },
        {
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 33,
            "description": "Sets whether we're in splitscreen mode",
            "itemtype": "method",
            "name": "setOn",
            "params": [
                {
                    "name": "state",
                    "description": "whether we should be in splitscreen mode",
                    "type": "Boolean"
                }
            ],
            "class": "TAG.Util.Splitscreen"
        },
        {
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 42,
            "description": "Sets the seadragon viewer for a certain artwork viewer root",
            "itemtype": "method",
            "name": "setViewers",
            "params": [
                {
                    "name": "root",
                    "description": "root of the artwork viewer",
                    "type": "JQuery obj"
                },
                {
                    "name": "zoomimage",
                    "description": "the AnnotatedImage object from which we'll get the viewer",
                    "type": "AnnotatedImage"
                }
            ],
            "class": "TAG.Util.Splitscreen"
        },
        {
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 58,
            "description": "Starts splitscreen",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "rootL",
                    "description": "DOM root element (as JQuery obj) to go in left screen",
                    "type": "JQuery obj"
                },
                {
                    "name": "rootR",
                    "description": "DOM root element (as JQuery obj) to go in right screen",
                    "type": "JQuery obj"
                }
            ],
            "class": "TAG.Util.Splitscreen"
        },
        {
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 124,
            "description": "Helper function for making exit buttons\nInner function of init()",
            "itemtype": "method",
            "name": "makeExitButton",
            "params": [
                {
                    "name": "side",
                    "description": "the side the button is going to go on ('L' or 'R')",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the exit button",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Splitscreen"
        },
        {
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 148,
            "description": "Exits splitscreen, making the specified side fullscreen and removing the other",
            "itemtype": "method",
            "name": "exitSplitscreen",
            "params": [
                {
                    "name": "newside",
                    "description": "The side to be made fullscreen, either 'R' or 'L'"
                }
            ],
            "class": "TAG.Util.Splitscreen"
        },
        {
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 169,
            "description": "var newLContainerSize = {\n    x: $(viewerL.container).width(),\n    y: $(viewerL.container).height()\n};\nviewerL.viewport.resize(newLContainerSize, false);\nviewerL.viewport.applyConstraints();\nviewerL.viewport.update();",
            "class": "TAG.Util.Splitscreen"
        },
        {
            "file": "js/TAG/util/TAG.Util.Splitscreen.js",
            "line": 211,
            "description": "All the layout specific edits that need to be made upon exit\nTheoretically, all of this should get wrapped into layout classes\nbut not sure the class pattern used allows for it\nTODO document",
            "class": "TAG.Util.Splitscreen"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 667,
            "description": "get max font size without em",
            "itemtype": "method",
            "name": "getMaxFontSize",
            "params": [
                {
                    "name": "text",
                    "description": "TODO FINISH DOCUMENTATION",
                    "type": "String"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 1513,
            "description": "function to check if the videos have been converted.\nAlso, show the display in the track after conversion is done",
            "params": [
                {
                    "name": ":",
                    "description": "an array of video tracks to convert."
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 1641,
            "description": "Used by web app code to slide in pages given their html files",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the html file within the html directory"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 1664,
            "params": [
                {
                    "name": "collectionId",
                    "description": "the id of the collection whose local visibility we want to check or set"
                },
                {
                    "name": "setValue",
                    "description": "falsy if just want to return visibility status\n                           if we want to set collection to be locally visible\n                         {visible: false} if we want to hide the collection locally",
                    "type": "Visible: true"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 1690,
            "description": "Take in a color and return a dimmed version of that color (divide rgb by k)",
            "params": [
                {
                    "name": "inColor",
                    "description": "input color as a hex string",
                    "type": "String"
                },
                {
                    "name": "k",
                    "description": "dimming factor",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "formatted as 'rbg(_,_,_)'",
                "type": "String"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 1713,
            "description": "Take in a color (in '#abcdef' format) and an opacity (0-1) and return an rgba(..) string",
            "params": [
                {
                    "name": "color",
                    "description": "input color as a hex string",
                    "type": "String"
                },
                {
                    "name": "opac",
                    "description": "input opacity",
                    "type": "String"
                }
            ],
            "return": {
                "description": "'rgba(color.r, color.g, color.b, opac)'",
                "type": "String"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 1734,
            "description": "Utils for Animation, splitscreen, colors and the like",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 1792,
            "itemtype": "method",
            "name": "keyHandler",
            "params": [
                {
                    "name": "event",
                    "description": "// the event triggered on key presses",
                    "type": "Event"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 2240,
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 2621,
            "description": "Create an input box popup",
            "itemtype": "method",
            "name": "popupInputBox",
            "params": [
                {
                    "name": "options",
                    "description": "some input options (callback function for confirm button, etc)\n           {Function} cancelAction    action to take on clicking \"cancel\"\n           {Function} confirmAction   action to take on clicking \"confirm\"\n           {jQuery obj} container     container used for styling the popup box\n           {String} message           message to show at top of popup\n           {String} placeholder       placeholder text inside input field\n           {String} confirmText       custom text for the \"confirm\" button",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "overly of popup box",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 2764,
            "description": "Following functions transition between pages while in splitscreen mode",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 2767,
            "description": "Use _Split fn's for transitions that need to preserve splitscreen\nNote: pages passed in to this function should have a top-level root node\n(true of exhibition, catalog and artmode)",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 2792,
            "description": "Set up handlers for back button",
            "itemtype": "method",
            "name": "setUpBackButton",
            "params": [
                {
                    "name": "elt",
                    "description": "jQuery object for back button element",
                    "type": "JQuery Obj"
                },
                {
                    "name": "clickHandler",
                    "description": "click handler for button",
                    "type": "Function"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 2888,
            "description": "Use for any page transition that does not need to preserve splitscreen",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 2995,
            "description": "Take in a color (in '#abcdef' format) and an opacity (0-1) and return an rgba(..) string",
            "itemtype": "method",
            "name": "hexToRGBA",
            "params": [
                {
                    "name": "color",
                    "description": "input color as a hex string",
                    "type": "String"
                },
                {
                    "name": "opac",
                    "description": "input opacity",
                    "type": "String"
                }
            ],
            "return": {
                "description": "'rgba(color.r, color.g, color.b, opac)'",
                "type": "String"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 3033,
            "description": "Take in a color and return a dimmed version of that color (divide rgb by k)",
            "params": [
                {
                    "name": "inColor",
                    "description": "input color as a hex string",
                    "type": "String"
                },
                {
                    "name": "k",
                    "description": "dimming factor",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "formatted as 'rbg(_,_,_)'",
                "type": "String"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 3230,
            "description": "Creates a picker (e.g. click add/remove media in the artwork editor) to manage\n  associations between different TAG components (exhib, artworks, assoc media)",
            "params": [
                {
                    "name": "root",
                    "description": "object: jquery object for the root of the DOM (we'll append an overlay to this)"
                },
                {
                    "name": "title",
                    "description": "string: the title to appear at the top of the picker"
                },
                {
                    "name": "target",
                    "description": "object: a comp property (object whose associations we're managing) and a type property\n                              ('exhib', 'artwork', 'media') telling us what kind of component it is"
                },
                {
                    "name": "type",
                    "description": "string: \"exhib\" (exhib-artwork), \"artwork\" (artwork-media) : type of the association"
                },
                {
                    "name": "tabs",
                    "description": "array: list of tab objects. Each has a name property (string, title of tab), a getObjs\n                             property (a function to be called to get each entity listed in the tab), and a\n                             args property (which will be extra arguments sent to getObjs)"
                },
                {
                    "name": "filter",
                    "description": "object: a getObjs property to get components that are already associated with target\n                              (e.g. getAssocMediaTo if type='artwork') and an args property (extra args to getObjs)"
                },
                {
                    "name": "callback",
                    "description": "function: function to be called when import is clicked or a component is double clicked"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 3507,
            "itemtype": "method",
            "name": "onEnter",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 3599,
            "description": "Creates the media panel",
            "params": [
                {
                    "name": "compArray",
                    "description": "the list of media to appear in the panel"
                },
                {
                    "name": "applyClick",
                    "description": "function to add handlers to each holder element"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4017,
            "description": "Creates a dialog that displays a link to the current page (for use in web app only).",
            "itemtype": "method",
            "name": "showPageLink",
            "params": [
                {
                    "name": "baseurl",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "URL params to include",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4128,
            "description": "Some common functionality between the rich location editing and\nviewing interfaces",
            "itemtype": "method",
            "name": "LADS.Util.RLH",
            "params": [
                {
                    "name": "input",
                    "description": "a couple input options\n        {Doq}         artwork        artwork doq\n        {jQuery obj}  root           root of current page\n        {Boolean}     authoring      whether we're in authoring mode",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4192,
            "description": "Initializes rich location history editing (called only once). Grabs\nartwork.Metadata.RichLocationHistory (or converts old artwork.Metadata.Location\nobject to new format), builds UI, and shows the first map.",
            "itemtype": "method",
            "name": "init",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4572,
            "description": "Hides the Map Name field, Additional Input (date) field, and save button in the metadata container\nCalled when the Bing Map is being displayed, displays the name 'Bing Map'",
            "itemtype": "method",
            "name": "hideMetadataEditingFields",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4598,
            "description": "Shows the Map Name field, Additional Input (date) field, and save button in the metadata container\nReverses the above function, called when any map besides the bing map is displayed",
            "itemtype": "method",
            "name": "showMetadataEditingFields",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4610,
            "description": "Get all the maps for the artwork",
            "itemtype": "method",
            "name": "getMaps",
            "params": [
                {
                    "name": "callback",
                    "description": "function to call when maps have been obtained and loaded",
                    "type": "Function"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4648,
            "description": "Loads all maps by creating holders for them within the mapContainer div.",
            "itemtype": "method",
            "name": "loadMaps",
            "params": [
                {
                    "name": "callback",
                    "description": "function to call when loading is complete",
                    "type": "Function"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4699,
            "description": "Saves any metadata changes to the current map",
            "itemtype": "method",
            "name": "saveCurrentMapMetadata",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4747,
            "description": "Helper function to iterate through location list and call a\nhelper function for each.",
            "itemtype": "method",
            "name": "iterateThroughLocations",
            "params": [
                {
                    "name": "toCall",
                    "description": "helper method to call for each map; by\n                               default, called with two params (loc and mapdoq)",
                    "type": "Function"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4769,
            "description": "Create list of locations in the bottom panel",
            "itemtype": "method",
            "name": "createLocationList",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4778,
            "description": "Shows the specified map holder, sets currentIndex, and deals with dot colors",
            "itemtype": "method",
            "name": "showMap",
            "params": [
                {
                    "name": "guid",
                    "description": "key into mapHolders",
                    "type": "String"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4831,
            "description": "Shows a message in the bottom region indicating that saving/loading is\nunderway.",
            "itemtype": "method",
            "name": "showLoadingMessage",
            "params": [
                {
                    "name": "message",
                    "description": "an optional custom message",
                    "type": "String"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4862,
            "description": "Creates map dots (below the map)",
            "itemtype": "method",
            "name": "createDots",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4890,
            "description": "Click handler helper for map dots (just calls showMap)",
            "itemtype": "method",
            "name": "dotClickHelper",
            "params": [
                {
                    "name": "i",
                    "description": "the index of the dot clicked",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a click handler for a map dot",
                "type": "Function"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4903,
            "description": "Click function for addLocation Button. create a pin on the map and create\na location editing form.  Only one form can be displayed at a time.",
            "itemtype": "method",
            "name": "addLocation",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4921,
            "description": "Function to remove the add location form when the cancel button is clicked.",
            "itemtype": "method",
            "name": "removeLocationForm",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4930,
            "description": "Function to sort the locations in the list by title when the sort button is clicked.",
            "itemtype": "method",
            "name": "sortLocations",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4952,
            "description": "Function to sort the locations in the list by title when the sort button is clicked.",
            "itemtype": "method",
            "name": "sortLocations",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 4975,
            "description": "For backwards compatibility, translates an artwork.Location property to an\nartwork.RichLocationHistory property",
            "itemtype": "method",
            "name": "locationToRichLocation",
            "params": [
                {
                    "name": "locationData",
                    "description": "old location data to transform",
                    "type": "String"
                }
            ],
            "return": {
                "description": "properly formatted rich location data",
                "type": "Object"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5006,
            "description": "Some helper functions for the Bing map. The idea is to have BingMapHelper\nand CustomMapHelper implement the same interface, so manipulating location data can\nbe generic",
            "itemtype": "method",
            "name": "BingMapHelper",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5016,
            "description": "Makes the map, creates pushpin, etc",
            "itemtype": "method",
            "name": "input        some input options!~YUIDOC_LINE~!            container:        container of the bing map!~YUIDOC_LINE~!            progress:         an object allowing us to keep track of how many of all maps have loaded !~YUIDOC_LINE~!            loadCallback:     callback function to call if this is the last map to load",
            "type": "Object",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5031,
            "description": "Callback function to initiailize bing map",
            "itemtype": "method",
            "name": "initMap",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5060,
            "description": "Draws a pushpin using the input location. Note that this is a location object\nfrom artwork.Metdata.RichLocationHistory.locations.",
            "itemtype": "method",
            "name": "drawPushpin",
            "params": [
                {
                    "name": "options",
                    "description": "some input options\n         {Object} location      location data for pushpin\n         {Doq} mapdoq           the doq representing our map (not used here)\n         {Boolean} editing      whether this pushpin should be manipulatable",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the pushpin object",
                "type": "Microsoft.Maps.Pushpin"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5103,
            "description": "Removes the given pushpin from the map",
            "itemtype": "method",
            "name": "removePushpin",
            "params": [
                {
                    "name": "options",
                    "description": "some input options\n         {Microsoft.Maps.Pushpin}   pushpin    the pushpin to remove",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5113,
            "description": "Creates location editing interface (used for adding new and editing existing\nlocations)",
            "itemtype": "method",
            "name": "createLocationEditor",
            "params": [
                {
                    "name": "options",
                    "description": "some input options\n         {Object} location       location data to be edited (null for new location)\n         {Number} index          index of location in location list\n         {Function} cancelClick  cancel button click handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "editing container div, which can be appended to list",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5163,
            "description": "Creates a bing map search result div. Called by the callback to searchBingLocation.",
            "itemtype": "method",
            "name": "createSearchResultDiv",
            "params": [
                {
                    "name": "result",
                    "description": "this is an object derived from the results of a bing map search",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5215,
            "description": "Searches the input string on a bing map.",
            "itemtype": "method",
            "name": "searchBingLocation",
            "params": [
                {
                    "name": "locString",
                    "description": "input string to search",
                    "type": "String"
                },
                {
                    "name": "success",
                    "description": "function to call when results have been found",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "error callback",
                    "type": "Function"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5235,
            "description": "Creates a location item in the bottom panel (locationsRegion)",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "location",
                    "description": "location data for item",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5256,
            "description": "Some helper functions for custom maps. The idea is to have BingMapHelper\nand CustomMapHelper implement the same interface, so manipulating location data can\nbe generic",
            "itemtype": "method",
            "name": "CustomMapHelper",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5264,
            "description": "Initialize a custom map",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "input",
                    "description": "some input options\n            container:        container of the bing map\n            progress:         an object allowing us to keep track of how many of all maps have loaded\n            loadCallback:     callback function to call if this is the last map to load\n            mapdoq:           the doq of the custom map",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5291,
            "description": "Draw a pushpin on the given map",
            "itemtype": "method",
            "name": "drawPushpin",
            "params": [
                {
                    "name": "options",
                    "description": "some input options\n         {Object} location      location data for pushpin\n         {Doq} mapdoq           the doq representing our map\n         {Boolean} editing      whether this pushpin should be manipulatable",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the pushpin element",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5418,
            "description": "Removes the given pushpin from the map",
            "itemtype": "method",
            "name": "removePushpin",
            "params": [
                {
                    "name": "options",
                    "description": "some input options\n         {jQuery obj} pushpin    the pushpin to remove\n         {Object} mapguid        corresponding map's guid",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5430,
            "description": "Creates location editing interface (used for adding new and editing existing\nlocations)",
            "itemtype": "method",
            "name": "createLocationEditor",
            "params": [
                {
                    "name": "options",
                    "description": "some input options\n         {Object} location       location data to be edited (null for new location)\n         {Number} index          index of location in location list\n         {Function} cancelClick  cancel button click handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "editing container div, which can be appended to list",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5452,
            "description": "Creates a location item in the bottom panel (locationsRegion)",
            "itemtype": "method",
            "name": "createLocationItem",
            "params": [
                {
                    "name": "location",
                    "description": "location data for item",
                    "type": "Object"
                },
                {
                    "name": "mapdoq",
                    "description": "the doq representing our map",
                    "type": "Doq"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5475,
            "description": "Common functionality for creating location items",
            "itemtype": "method",
            "name": "commonCreateLocationItem",
            "params": [
                {
                    "name": "options",
                    "description": "some input options:\n         {Object} location        the location in question\n         {Boolean} custom         whether this is from a custom map\n         {String} mapguid         the guid of the map in question",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the outer container of the list item",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 5699,
            "description": "Common functionality for creating location editor UIs. This is here because a lot\nof code would be copied between the BingMapHelper and CustomMapHelper otherwise. Some\nfunctionality is specific to one or the other, though, so that's taken care of in their\nrespective createLocationEditor methods using the returned components here.",
            "itemtype": "method",
            "name": "commonCreateLocationEditor",
            "params": [
                {
                    "name": "options",
                    "description": "some input options\n         {Object} location       the location in question\n         {Boolean} custom        whether this is a custom map\n         {String} mapguid        the guid of the map in question\n         {Number} index          index of loaaction in location list\n         {Function} cancelClick  cancel button click event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the relevant components of the editing form",
                "type": "Object"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6012,
            "description": "Saves latest rich location history data to the artwork doq. Uses the maps and\nlocations variables, so make sure those are up to date before calling. Reloads\nall maps afterwards.",
            "itemtype": "method",
            "name": "saveRichLocationHistory",
            "params": [
                {
                    "name": "input",
                    "description": "some input options, including:\n             toadd          a string of comma-separated GUIDs of maps to add\n             toremove       a string of comma-separated GUIDs of maps to remove\n             noReload       a boolean telling us whether to reload maps or not\n             callback       a callback function to be called after saving and reloading artwork is done",
                    "type": "Object"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6057,
            "description": "Generates a RichLocationHistory property (string) from the maps and locations\nvariables for saving. A helper function for saveRichLocationHistory.",
            "itemtype": "method",
            "name": "generateRichLocationData",
            "return": {
                "description": "a string to be used as a RichLocationHistory property",
                "type": "String"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6070,
            "description": "Toggles the default map overlay to indicate that it is\nenabled or disabled. Uses the value of defaultMapShown\nto do so.",
            "itemtype": "method",
            "name": "toggleDefaultMap",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6082,
            "description": "Delete the selected map, reload maps, set the current map to bing map (for now)",
            "itemtype": "method",
            "name": "deleteMap",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6103,
            "description": "Remove locations associated with a given map from artwork metadata",
            "itemtype": "method",
            "name": "removeLocations",
            "params": [
                {
                    "name": "guid",
                    "description": "map guid",
                    "type": "String"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6123,
            "description": "Upload a custom map from user's computer",
            "itemtype": "method",
            "name": "uploadCustomMap",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6179,
            "description": "De-select a location pin and the corresponding location list item",
            "itemtype": "method",
            "name": "deselect",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6193,
            "description": "Select a location pin and the corresponding location list item",
            "itemtype": "method",
            "name": "select",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6223,
            "description": "Built-in object extensions",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6246,
            "description": "If specified object is in the array, remove it",
            "params": [
                {
                    "name": "obj",
                    "description": "object to be removed"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6260,
            "description": "Insert object into array based on comparator fn given\nAssumes array is already sorted!",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be inserted"
                },
                {
                    "name": "comp",
                    "description": "Function used to compare objects; obj will be inserted when comp evaluates to true; takes two args, first is current array elt, second is obj"
                }
            ],
            "return": {
                "description": "Index of obj in array after insertion"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6279,
            "description": "Constrain a number to given range",
            "params": [
                {
                    "name": "num",
                    "description": "value to constrain"
                },
                {
                    "name": "min",
                    "description": "minimum limit"
                },
                {
                    "name": "max",
                    "description": "maximum limit"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6304,
            "description": "Creates a thumbnail button to be used in a side bar list",
            "itemtype": "method",
            "name": "createThumbnailButton",
            "params": [
                {
                    "name": "options",
                    "description": "options for creating the thumbnail button:\n           title         title of the button, shown under the thumbnail\n           handler       a click handler for the button\n           buttonClass   an extra class to add to the button\n           buttonID      an id to give to the button\n           src           thumbnail image source\n           width         custom width of button\n           height        custom height of button",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the button",
                "type": "JQuery obj"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6334,
            "description": "----------------------------------------------\n        |                                            |  <--- holder\n        | ------------------------------------------ |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | <------ thumbHolderDiv\n        | |                                        | |\n        | |              THUMBNAIL                 | |\n        | |                IMAGE                   | |\n        | |                 HERE                  <--------- thumbnailImage\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | ------------------------------------------ |\n        | ------------------------------------------ |\n        | |             NAME OF DOQ                | <--- titleDiv\n        | |                                        | |\n        | ------------------------------------------ |\n        ----------------------------------------------",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6392,
            "description": "Built-in object extensions",
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6415,
            "description": "If specified object is in the array, remove it",
            "params": [
                {
                    "name": "obj",
                    "description": "object to be removed"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6429,
            "description": "Insert object into array based on comparator fn given\nAssumes array is already sorted!",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be inserted"
                },
                {
                    "name": "comp",
                    "description": "Function used to compare objects; obj will be inserted when comp evaluates to true; takes two args, first is current array elt, second is obj"
                }
            ],
            "return": {
                "description": "Index of obj in array after insertion"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6448,
            "description": "Constrain a number to given range",
            "params": [
                {
                    "name": "num",
                    "description": "value to constrain"
                },
                {
                    "name": "min",
                    "description": "minimum limit"
                },
                {
                    "name": "max",
                    "description": "maximum limit"
                }
            ],
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/util/TAG.Util.js",
            "line": 6460,
            "description": "Defining a to-two-decimal-places function in Math",
            "itemtype": "method",
            "name": "Math.twoDecPlaces",
            "params": [
                {
                    "name": "x",
                    "description": "the number to convert to two decimal places",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "x chopped at two decimal places",
                "type": "Number"
            },
            "class": "TAG.Util.Artwork"
        },
        {
            "file": "js/TAG/worktop/TAG.Worktop.Database.js",
            "line": 1307,
            "description": "Soft delete a hotspot by deleting both the hotspot linq and doq files",
            "class": "tagInk"
        },
        {
            "file": "js/core.js",
            "line": 3,
            "description": "This file is responsible for performing initial setup. Please see the comments for load\nand init below.",
            "class": "tagInk"
        },
        {
            "file": "js/core.js",
            "line": 16,
            "description": "The first real TAG function called. Sets up the embedding within iframe and\ncalls init, which takes care of loading scripts and displaying the first page.",
            "itemtype": "method",
            "name": "load",
            "class": "tagInk"
        },
        {
            "file": "js/core.js",
            "line": 94,
            "description": "Parses page url for a specific TAG page to load",
            "itemtype": "method",
            "name": "parseQueryParams",
            "return": {
                "description": "the tag params found",
                "type": "Object"
            },
            "class": "tagInk"
        },
        {
            "file": "js/core.js",
            "line": 154,
            "description": "Initialize TAG; load some scripts into the <head> element,\nload StartPage (or TourPlayer if specified in the API call).",
            "itemtype": "method",
            "name": "init",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 111,
            "description": "Pans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "params": [
                {
                    "name": "dims",
                    "description": "the current dimensions of our artwork in absolute coordinates"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 174,
            "description": "Convert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path to reverse"
                }
            ],
            "return": {
                "description": "reversed path (with outer path)"
            },
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 230,
            "description": "Uses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 282,
            "description": "A helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 322,
            "description": "Takes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring"
                },
                {
                    "name": "attr",
                    "description": "the attribute we'll parse for"
                },
                {
                    "name": "parsetype",
                    "description": "'i' (int), 's' (string), or 'f' (float)"
                }
            ],
            "return": {
                "description": "the value of the attribute in the correct format"
            },
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 342,
            "description": "Loads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "params": [
                {
                    "name": "the",
                    "description": "datastring to be loaded (see update_datastring for datastring format)"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 444,
            "description": "Helper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 452,
            "description": "Pans all objects in the canvas by dx, dy.",
            "params": [
                {
                    "name": "dx,",
                    "description": "dy    the deltas"
                },
                {
                    "name": "draw",
                    "description": "should we take time to draw the objects?"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 507,
            "description": "Helper function to convert to relative coordinates.",
            "params": [
                {
                    "name": "abs_coord",
                    "description": "the absolute coordinate"
                },
                {
                    "name": "canv_dim",
                    "description": "the relevant canvas dimension to scale by"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 517,
            "description": "Removes all Raphael elements from the canvas and clears arrays",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 532,
            "description": "Resizes all elements in the ink canvas.",
            "params": [
                {
                    "name": "scale_x,",
                    "description": "scale_y   the scale factors to resize by"
                },
                {
                    "name": "draw",
                    "description": "should we take the time to draw the result?"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 584,
            "description": "Set the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 608,
            "description": "Setter for the artname of a linked ink's associated artwork",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 616,
            "description": "Setter (sets experience id of ink)",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 624,
            "description": "Sets the initial artwork keyframe",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 632,
            "description": "Sets the ink mode",
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 641,
            "description": "Returns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "return": {
                "description": "up to date datastring"
            },
            "class": "tagInk"
        },
        {
            "file": "js/tagInk.js",
            "line": 700,
            "description": "When we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring loaded"
                }
            ],
            "class": "tagInk"
        },
        {
            "file": "js/tests.js",
            "line": 3,
            "description": "TAG testing framework\n\nThe TEST SCRIPTS section below has a few test routines. These\nroutines are made public at the bottom of this file. They call\nrunTests on a collection of TEST SCRIPT ACTIONs, which are defined\nin the second section. These are 'atomic' actions that can\nbe combined to make more complex routines. There are a few\nTEST SUPPORT FUNCTIONs defined in the last section below.",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 32,
            "description": "|**** TEST SCRIPTS ****|",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 71,
            "description": "|**** TEST SCRIPT ACTIONS ****|",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 249,
            "description": "|**** TESTING SUPPORT FUNCTIONS ****|",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 253,
            "description": "Run a series of tests",
            "params": [
                {
                    "name": "testObj.tests",
                    "description": "an array of tests to run"
                },
                {
                    "name": "testObj.intervals",
                    "description": "array of time intervals (ms) between these tests"
                }
            ],
            "return": {
                "description": "-1 if an error was thrown during testing"
            },
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 272,
            "description": "Called by runTests, calls a single test, then calls runTest with incremented index",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 293,
            "description": "Helper function to concatenate different testing objects",
            "params": [
                {
                    "name": "testObjs",
                    "description": "array of test objects (or functions that will generate test objects) to combine"
                }
            ],
            "return": {
                "description": "combined test objects"
            },
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 321,
            "description": "Create click event on the input element",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 330,
            "description": "Simulate a pinch zoom event",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 337,
            "description": "Create mousemove event -- be careful to leave enough interval time to call this",
            "params": [
                {
                    "name": "target",
                    "description": "target element for event"
                },
                {
                    "name": "eventData",
                    "description": "object with the following properties:\n           startX     starting x coordinate relative to #tagRoot\n           startY     ...\n           endX       ...\n           endY"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 394,
            "description": "Recursive call to execute mousemove events",
            "params": [
                {
                    "name": "ctr",
                    "description": "the number of move events we've called"
                },
                {
                    "name": "numMoves",
                    "description": "the number of move events we will call"
                },
                {
                    "name": "data",
                    "description": "event data with properties:\n          startClientX        starting x position in context of browser window\n          startClientY        ...\n          endClientX          ...\n          endClientY          ...\n          target              target element"
                },
                {
                    "name": "callback",
                    "description": "function to be called when all moves have executed"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 432,
            "description": "Linearly interpolate between start and stop by t in [0,1]",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 440,
            "description": "Highlight the target of a testing event (visualize events)",
            "params": [
                {
                    "name": "target",
                    "description": "the element to highlight"
                },
                {
                    "name": "left",
                    "description": "(optional) the left offset of the event within the target"
                },
                {
                    "name": "top",
                    "description": "(optional) ...."
                },
                {
                    "name": "animateRadius",
                    "description": "(optional) if true, highlights get smaller as they disappear"
                },
                {
                    "name": "highlightWidth",
                    "description": "(optional) width of the highlight circle"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 504,
            "params": [
                {
                    "name": "arr",
                    "description": "array for which we want a random index"
                }
            ],
            "return": {
                "description": "random index into array, -1 if arr is empty"
            },
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 516,
            "description": "returns random element from input array",
            "params": [
                {
                    "name": "arr",
                    "description": "input array"
                }
            ],
            "return": {
                "description": "random element, null if arr=[]"
            },
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 533,
            "description": "Returns a basic error callback function (long-term, should define\ncase-specific error funcs that actually do some error handling).",
            "params": [
                {
                    "name": "calling",
                    "description": "string: calling function's name"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 546,
            "description": "Show an overlay explaining that the first step in the test is to\nnavigate to the correct starting page.",
            "class": "Telemetry"
        },
        {
            "file": "js/tests.js",
            "line": 592,
            "description": "Cancels the currently-running test",
            "class": "Telemetry"
        },
        {
            "file": "telemetry/server.js",
            "line": 38,
            "description": "Handles a post request to the server. Generally, writes data to log file.\nIn the future, this should probably log data in a database.",
            "itemtype": "method",
            "name": "handlePost",
            "params": [
                {
                    "name": "request",
                    "description": "the http request sent to the server",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "a response object we'll write to and return",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "telemetry/server.js",
            "line": 133,
            "description": "Handles a get request to the server. SHOULD get data from server, return it to client\nfor data viz or analysis.",
            "itemtype": "method",
            "name": "handleGet",
            "params": [
                {
                    "name": "request",
                    "description": "the http request to the server",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "the response we'll send back to the client",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "telemetry/server.js",
            "line": 164,
            "description": "Writes telemetry data to a log file (specified by LOG_FILE_PATH).\nSet the global WRITE_DATA = writeTDataToFile to log data in this way.",
            "itemtype": "method",
            "name": "writeTDataToFile",
            "params": [
                {
                    "name": "tdata",
                    "description": "the telemetry data object to stringify and write to file",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "telemetry/server.js",
            "line": 187,
            "description": "Reads telemetry data from a file (specified by LOG_FILE_PATH) and\nreturns it to client in a response.\nSet the global READ_DATA = readTDataFromFile to read data in this way.",
            "itemtype": "method",
            "name": "readTDataFromFile",
            "params": [
                {
                    "name": "tdata",
                    "description": "the response we will eventually send back",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "telemetry/telemetry.js",
            "line": 10,
            "description": "Get the current browser version\nBorrowed from http://stackoverflow.com/questions/5916900/detect-version-of-browser",
            "itemtype": "method",
            "name": "browserVersion",
            "class": ""
        },
        {
            "file": "telemetry/telemetry.js",
            "line": 27,
            "description": "Register an element with the telemetry module",
            "itemtype": "method",
            "name": "registerTelemetry",
            "params": [
                {
                    "name": "element",
                    "description": "the element or the jQuery selector to which we'll attach a telemetry event handler",
                    "type": "JQuery Obj"
                },
                {
                    "name": "etype",
                    "description": "the type of event (e.g., 'mousedown') for which we'll create the handler",
                    "type": "String"
                },
                {
                    "name": "ttype",
                    "description": "the type of telemetry request to log",
                    "type": "String"
                },
                {
                    "name": "preHandler",
                    "description": "do any pre-handling based on current state of TAG, add any additional\n                                    properties to the eventual telemetry object. Accepts the telemetry\n                                    object to augment and the event, and returns true if we should abort\n                                    further handling.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "telemetry/telemetry.js",
            "line": 70,
            "description": "Make a request to the telemetry server using the requests variable",
            "itemtype": "method",
            "name": "postTelemetryRequests",
            "class": ""
        },
        {
            "file": "telemetry/telemetryTest.js",
            "line": 29,
            "description": "Handles returned data from server after a get request.",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "telemetry/telemetryTest.js",
            "line": 117,
            "description": "Make a request to the telemetry server",
            "params": [
                {
                    "name": "type",
                    "description": "'POST' for updating data or 'GET' for getting it"
                },
                {
                    "name": "data",
                    "description": "object; data to be sent in body of request"
                }
            ],
            "class": ""
        },
        {
            "file": "Gruntfile.js",
            "line": 1,
            "description": "This file takes care of compiling jade and stylus files and\nbuilding TAG.js by concatenating a collection of source js\nfiles. The source files can be found in the JSSRC array below.\n\nTo use Grunt, run\n\n   $ grunt\n\nfrom the command line. You can also run\n\n   $ grunt watch\n\nwhich will watch for saved changes in any files in the WATCH\narray below. WATCH contains all of the js files in JSSRC (when\nany of our source files change, we want to recompile TAG.js)\nas well as the styl and jade files (when these change, we want\nto recompile respective css and html files).\n\nWe use Grunt for a couple reasons:\n  - it's a pain to always compile jade and stylus by hand\n  - it's nice to be able to include a single js file (TAG.js)\n    rather than a whole collection of them, and doing so lets us\n    put all TAG code -- including third-party libraries we use --\n    inside a contained scope, so our variables don't clobber those\n    in the host site's code\n\nTo look further into the second point above, you can take a look\nat the \"concat\" task below. It concatenates a bunch of js files\ntogether inside a \"banner\" and a \"footer.\" The banner, which will\nappear at the top of TAG.js, defines a function (TAG) that wraps all\nof our code and declares some global variables. The footer appends a\nclosing curly brace to the very end of the file to finish the TAG\nfunction.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:3621"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/ITE/ITE/ITECore.js:4556"
        },
        {
            "message": "unknown tag: pauseresetmediaobject",
            "line": " js/TAG/artmode/TAG.AnnotatedImage.js:1358"
        },
        {
            "message": "unknown tag: version",
            "line": " js/TAG/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " js/TAG/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: created",
            "line": " js/TAG/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: updated",
            "line": " js/TAG/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: link",
            "line": " js/TAG/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: inputs",
            "line": " js/TAG/authoring/TAG.Authoring.SettingsView.js:1658"
        },
        {
            "message": "unknown tag: methdd",
            "line": " js/TAG/layout/TAG.Layout.CollectionsPage.js:1012"
        },
        {
            "message": "unknown tag: pram",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:4091"
        },
        {
            "message": "unknown tag: pram",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:5322"
        },
        {
            "message": "unknown tag: pram",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:6290"
        },
        {
            "message": "unknown tag: trans",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Display.js:1098"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Display.js:2054"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2032"
        },
        {
            "message": "unknown tag: enabledisabledrag",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1244"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Track.js:1897"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/TAG/util/TAG.Util.js:6260"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js/TAG/util/TAG.Util.js:6429"
        },
        {
            "message": "Missing item type\nReturns a random integer between min (inclusive) and max (inclusive)\nUsing Math.round() will give you a non-uniform distribution!",
            "line": " js/ITE/ITE/Assets/GenerateRandomTours/genTour.js:3"
        },
        {
            "message": "Missing item type\nReturns a random integer between min (inclusive) and max (inclusive)\nUsing Math.round() will give you a non-uniform distribution!",
            "line": " js/ITE/ITE/Assets/GenerateRandomTours/genTourExternalFile.js:3"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js:33"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual audio asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js:65"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of audio, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js:85"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual audio reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js:101"
        },
        {
            "message": "Missing item type\nI/P: none\nPlays audio asset\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.AudioProvider.js:111"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js:34"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js:93"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js:104"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js:118"
        },
        {
            "message": "Missing item type\nI/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js:225"
        },
        {
            "message": "Missing item type\nI/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js:232"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes handlers",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.DeepZoomProvider.js:263"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js:35"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js:73"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js:91"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js:114"
        },
        {
            "message": "Missing item type\nI/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js:159"
        },
        {
            "message": "Missing item type\nI/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js:166"
        },
        {
            "message": "Missing item type\nI/P {Number} scale     scale factor\nI/P {Object} pivot     point of contact (with regards to image container, NOT window)\nZoom handler for associated media (e.g., for mousewheel scrolling)",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js:206"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes handlers",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.ImageProvider.js:247"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js:31"
        },
        {
            "message": "Missing item type\nI/P: experienceReference name of asset to attach from Ink\nFinds the attached asset for the ink track (the track to attach the ink to)\nO/P: _attachedAsset Actual reference to the track that holds this asset",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js:71"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js:99"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js:109"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.InkProvider.js:125"
        },
        {
            "message": "Missing item type\nI/P: {URL}     \tdataURL    Location of JSON data about keyframes/tracks\nLoads and parses JSON data using AJAX, then figures out which assetProvider to use to actually load the asset.\nOnce the asset is loaded, the initializeTracks() is called, and when tracks are ready, the tour is played. \nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Orchestrator.js:18"
        },
        {
            "message": "Missing item type\nI/P: none\nHelper function to load tour with AJAX (called below)\nCalls CreatTrackByProvider, initializes the tracks, load their actual sources, and if they're ready, plays them\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Orchestrator.js:41"
        },
        {
            "message": "Missing item type\nI/P: {object}\ttrackData\tobject with parsed JSON data about the track\nCreates track based on providerID\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Orchestrator.js:71"
        },
        {
            "message": "Missing item type\nI/P: {html}     playerParent    to attach ITE player to; defaults to document if nothing is specified\n     {object}   options         dictionary including what kinds of control the player should have      \nO/P: {object}   ITEPlayer       a new ITE player object",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js:62"
        },
        {
            "message": "Missing item type\nI/P:  none\nToggles full screen\nO/P:  none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js:396"
        },
        {
            "message": "Missing item type\nI/P:    none\nSets fullscreen and changes UI accordingly\nO/P:    none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js:405"
        },
        {
            "message": "Missing item type\nI/P:    none\nRemoves fullscreen and changes UI accordingly\nO/P:    none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js:416"
        },
        {
            "message": "Missing item type\nI/P:\tnone\nToggles whether or not the play is in loop\nO/P:\tnone",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js:429"
        },
        {
            "message": "Missing item type\nI/P:    none\nSets tour to loop and changes UI accordingly\nO/P:    none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js:438"
        },
        {
            "message": "Missing item type\nI/P:    none\nSets tour to not be in loop and changes UI accordingly\nO/P:    none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.Player.js:449"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:34"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual video asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:77"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of video, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:99"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual video reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:123"
        },
        {
            "message": "Missing item type\nI/P: none\nPlays video asset\nO/P: none",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:139"
        },
        {
            "message": "Missing item type\nI/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:226"
        },
        {
            "message": "Missing item type\nI/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:234"
        },
        {
            "message": "Missing item type\nI/P {Number} scale     scale factor\nI/P {Object} pivot     point of contact (with regards to image container, NOT window)\nZoom handler for associated media (e.g., for mousewheel scrolling)",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:271"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes handlers",
            "line": " js/ITE/ITE/ITE Core/ITEManual/ITE.VideoProvider.js:312"
        },
        {
            "message": "Missing item type\nUsed by web app code to slide in pages given their html files",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:1430"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:1453"
        },
        {
            "message": "Missing item type\nUtils for Animation, splitscreen, colors and the like",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:1481"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:1954"
        },
        {
            "message": "Missing item type\nFollowing functions transition between pages while in splitscreen mode",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:2293"
        },
        {
            "message": "Missing item type\nUse _Split fn's for transitions that need to preserve splitscreen\nNote: pages passed in to this function should have a top-level root node\n(true of exhibition, catalog and artmode)",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:2296"
        },
        {
            "message": "Missing item type\nUse for any page transition that does not need to preserve splitscreen",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:2417"
        },
        {
            "message": "Missing item type\nCreates a picker (e.g. click add/remove media in the artwork editor) to manage\n  associations between different TAG components (exhib, artworks, assoc media)",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:2732"
        },
        {
            "message": "Missing item type\nCreates the media panel",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:3084"
        },
        {
            "message": "Missing item type\n----------------------------------------------\n        |                                            |  <--- holder\n        | ------------------------------------------ |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | <------ thumbHolderDiv\n        | |                                        | |\n        | |              THUMBNAIL                 | |\n        | |                IMAGE                   | |\n        | |                 HERE                  <--------- thumbnailImage\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | ------------------------------------------ |\n        | ------------------------------------------ |\n        | |             NAME OF DOQ                | <--- titleDiv\n        | |                                        | |\n        | ------------------------------------------ |\n        ----------------------------------------------",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:3526"
        },
        {
            "message": "Missing item type\nBuilt-in object extensions",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:3584"
        },
        {
            "message": "Missing item type\nIf specified object is in the array, remove it",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:3607"
        },
        {
            "message": "Missing item type\nInsert object into array based on comparator fn given\nAssumes array is already sorted!",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:3621"
        },
        {
            "message": "Missing item type\nConstrain a number to given range",
            "line": " js/ITE/ITE/ITE Core/Utils/TAG.Util.js:3640"
        },
        {
            "message": "Missing item type\nPans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "line": " js/ITE/ITE/ITECore.js:111"
        },
        {
            "message": "Missing item type\nConvert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "line": " js/ITE/ITE/ITECore.js:174"
        },
        {
            "message": "Missing item type\nUses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "line": " js/ITE/ITE/ITECore.js:230"
        },
        {
            "message": "Missing item type\nA helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "line": " js/ITE/ITE/ITECore.js:282"
        },
        {
            "message": "Missing item type\nTakes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "line": " js/ITE/ITE/ITECore.js:322"
        },
        {
            "message": "Missing item type\nLoads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "line": " js/ITE/ITE/ITECore.js:342"
        },
        {
            "message": "Missing item type\nHelper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "line": " js/ITE/ITE/ITECore.js:444"
        },
        {
            "message": "Missing item type\nPans all objects in the canvas by dx, dy.",
            "line": " js/ITE/ITE/ITECore.js:452"
        },
        {
            "message": "Missing item type\nHelper function to convert to relative coordinates.",
            "line": " js/ITE/ITE/ITECore.js:507"
        },
        {
            "message": "Missing item type\nRemoves all Raphael elements from the canvas and clears arrays",
            "line": " js/ITE/ITE/ITECore.js:517"
        },
        {
            "message": "Missing item type\nResizes all elements in the ink canvas.",
            "line": " js/ITE/ITE/ITECore.js:532"
        },
        {
            "message": "Missing item type\nSet the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "line": " js/ITE/ITE/ITECore.js:584"
        },
        {
            "message": "Missing item type\nSetter for the artname of a linked ink's associated artwork",
            "line": " js/ITE/ITE/ITECore.js:608"
        },
        {
            "message": "Missing item type\nSetter (sets experience id of ink)",
            "line": " js/ITE/ITE/ITECore.js:616"
        },
        {
            "message": "Missing item type\nSets the initial artwork keyframe",
            "line": " js/ITE/ITE/ITECore.js:624"
        },
        {
            "message": "Missing item type\nSets the ink mode",
            "line": " js/ITE/ITE/ITECore.js:632"
        },
        {
            "message": "Missing item type\nReturns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "line": " js/ITE/ITE/ITECore.js:641"
        },
        {
            "message": "Missing item type\nWhen we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "line": " js/ITE/ITE/ITECore.js:700"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:878"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:935"
        },
        {
            "message": "Missing item type\nUsed by web app code to slide in pages given their html files",
            "line": " js/ITE/ITE/ITECore.js:2365"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:2388"
        },
        {
            "message": "Missing item type\nUtils for Animation, splitscreen, colors and the like",
            "line": " js/ITE/ITE/ITECore.js:2416"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:2889"
        },
        {
            "message": "Missing item type\nFollowing functions transition between pages while in splitscreen mode",
            "line": " js/ITE/ITE/ITECore.js:3228"
        },
        {
            "message": "Missing item type\nUse _Split fn's for transitions that need to preserve splitscreen\nNote: pages passed in to this function should have a top-level root node\n(true of exhibition, catalog and artmode)",
            "line": " js/ITE/ITE/ITECore.js:3231"
        },
        {
            "message": "Missing item type\nUse for any page transition that does not need to preserve splitscreen",
            "line": " js/ITE/ITE/ITECore.js:3352"
        },
        {
            "message": "Missing item type\nCreates a picker (e.g. click add/remove media in the artwork editor) to manage\n  associations between different TAG components (exhib, artworks, assoc media)",
            "line": " js/ITE/ITE/ITECore.js:3667"
        },
        {
            "message": "Missing item type\nCreates the media panel",
            "line": " js/ITE/ITE/ITECore.js:4019"
        },
        {
            "message": "Missing item type\n----------------------------------------------\n        |                                            |  <--- holder\n        | ------------------------------------------ |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | <------ thumbHolderDiv\n        | |                                        | |\n        | |              THUMBNAIL                 | |\n        | |                IMAGE                   | |\n        | |                 HERE                  <--------- thumbnailImage\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | ------------------------------------------ |\n        | ------------------------------------------ |\n        | |             NAME OF DOQ                | <--- titleDiv\n        | |                                        | |\n        | ------------------------------------------ |\n        ----------------------------------------------",
            "line": " js/ITE/ITE/ITECore.js:4461"
        },
        {
            "message": "Missing item type\nBuilt-in object extensions",
            "line": " js/ITE/ITE/ITECore.js:4519"
        },
        {
            "message": "Missing item type\nIf specified object is in the array, remove it",
            "line": " js/ITE/ITE/ITECore.js:4542"
        },
        {
            "message": "Missing item type\nInsert object into array based on comparator fn given\nAssumes array is already sorted!",
            "line": " js/ITE/ITE/ITECore.js:4556"
        },
        {
            "message": "Missing item type\nConstrain a number to given range",
            "line": " js/ITE/ITE/ITECore.js:4575"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:4588"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:4616"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:4651"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:4689"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITECore.js:4707"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:4730"
        },
        {
            "message": "Missing item type\nI/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "line": " js/ITE/ITE/ITECore.js:4775"
        },
        {
            "message": "Missing item type\nI/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "line": " js/ITE/ITE/ITECore.js:4782"
        },
        {
            "message": "Missing item type\nI/P {Number} scale     scale factor\nI/P {Object} pivot     point of contact (with regards to image container, NOT window)\nZoom handler for associated media (e.g., for mousewheel scrolling)",
            "line": " js/ITE/ITE/ITECore.js:4822"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes handlers",
            "line": " js/ITE/ITE/ITECore.js:4863"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:4882"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:4916"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual video asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:4959"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of video, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITECore.js:4981"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual video reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5005"
        },
        {
            "message": "Missing item type\nI/P: none\nPlays video asset\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5021"
        },
        {
            "message": "Missing item type\nI/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "line": " js/ITE/ITE/ITECore.js:5108"
        },
        {
            "message": "Missing item type\nI/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "line": " js/ITE/ITE/ITECore.js:5116"
        },
        {
            "message": "Missing item type\nI/P {Number} scale     scale factor\nI/P {Object} pivot     point of contact (with regards to image container, NOT window)\nZoom handler for associated media (e.g., for mousewheel scrolling)",
            "line": " js/ITE/ITE/ITECore.js:5153"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes handlers",
            "line": " js/ITE/ITE/ITECore.js:5194"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:5212"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5246"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5305"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITECore.js:5316"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5330"
        },
        {
            "message": "Missing item type\nI/P: none\nReturn a set of interactionHandlers attached to asset from provider",
            "line": " js/ITE/ITE/ITECore.js:5437"
        },
        {
            "message": "Missing item type\nI/P {Object} res     object containing hammer event info\nDrag/manipulation handler for associated media\nManipulation for touch and drag events",
            "line": " js/ITE/ITE/ITECore.js:5444"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes handlers",
            "line": " js/ITE/ITE/ITECore.js:5475"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:5530"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI, and attachs handlers\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5563"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual audio asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5595"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of audio, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITECore.js:5615"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual audio reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5631"
        },
        {
            "message": "Missing item type\nI/P: none\nPlays audio asset\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5641"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:5711"
        },
        {
            "message": "Missing item type\nI/P: none\nInitializes track, creates UI",
            "line": " js/ITE/ITE/ITECore.js:5742"
        },
        {
            "message": "Missing item type\nI/P: experienceReference name of asset to attach from Ink\nFinds the attached asset for the ink track (the track to attach the ink to)\nO/P: _attachedAsset Actual reference to the track that holds this asset",
            "line": " js/ITE/ITE/ITECore.js:5782"
        },
        {
            "message": "Missing item type\nI/P: none\nLoads actual image asset, and sets status to paused when complete\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5810"
        },
        {
            "message": "Missing item type\nI/P: none\nGrabs current actual state of image, and sets savedState to it \nreturns savedState\nO/P: savedState",
            "line": " js/ITE/ITE/ITECore.js:5820"
        },
        {
            "message": "Missing item type\nI/P: state\tstate to make actual image reflect\nSets properties of the image to reflect the input state\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:5836"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:5871"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:5914"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:6059"
        },
        {
            "message": "Missing item type\nI/P: {URL}     \tdataURL    Location of JSON data about keyframes/tracks\nLoads and parses JSON data using AJAX, then figures out which assetProvider to use to actually load the asset.\nOnce the asset is loaded, the initializeTracks() is called, and when tracks are ready, the tour is played. \nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:6077"
        },
        {
            "message": "Missing item type\nI/P: none\nHelper function to load tour with AJAX (called below)\nCalls CreatTrackByProvider, initializes the tracks, load their actual sources, and if they're ready, plays them\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:6100"
        },
        {
            "message": "Missing item type\nI/P: {object}\ttrackData\tobject with parsed JSON data about the track\nCreates track based on providerID\nO/P: none",
            "line": " js/ITE/ITE/ITECore.js:6130"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:6239"
        },
        {
            "message": "Missing item type\nI/P: {html}     playerParent    to attach ITE player to; defaults to document if nothing is specified\n     {object}   options         dictionary including what kinds of control the player should have      \nO/P: {object}   ITEPlayer       a new ITE player object",
            "line": " js/ITE/ITE/ITECore.js:6301"
        },
        {
            "message": "Missing item type\nI/P:  none\nToggles full screen\nO/P:  none",
            "line": " js/ITE/ITE/ITECore.js:6635"
        },
        {
            "message": "Missing item type\nI/P:    none\nSets fullscreen and changes UI accordingly\nO/P:    none",
            "line": " js/ITE/ITE/ITECore.js:6644"
        },
        {
            "message": "Missing item type\nI/P:    none\nRemoves fullscreen and changes UI accordingly\nO/P:    none",
            "line": " js/ITE/ITE/ITECore.js:6655"
        },
        {
            "message": "Missing item type\nI/P:\tnone\nToggles whether or not the play is in loop\nO/P:\tnone",
            "line": " js/ITE/ITE/ITECore.js:6668"
        },
        {
            "message": "Missing item type\nI/P:    none\nSets tour to loop and changes UI accordingly\nO/P:    none",
            "line": " js/ITE/ITE/ITECore.js:6677"
        },
        {
            "message": "Missing item type\nI/P:    none\nSets tour to not be in loop and changes UI accordingly\nO/P:    none",
            "line": " js/ITE/ITE/ITECore.js:6688"
        },
        {
            "message": "Missing item type",
            "line": " js/ITE/ITE/ITECore.js:6716"
        },
        {
            "message": "Missing item type\nPauses and resets (to time 0) the media if the content type is video or audio",
            "line": " js/TAG/artmode/TAG.AnnotatedImage.js:1358"
        },
        {
            "message": "Missing item type\njscolor, JavaScript Color Picker",
            "line": " js/TAG/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "Missing item type\nEnum of file upload types",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:3"
        },
        {
            "message": "Missing item type\nHelper class for performing file uploads\nAlso creates HTML overlay that displays progress / spinning wheel\nNote: everything is handled internally, no external API, does its thing then removes itself and disappears",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:13"
        },
        {
            "message": "Missing item type\nStarts the file upload",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:88"
        },
        {
            "message": "Missing item type\nAppends overlay to root\n(no idea if this will actually disable interactions too as is)",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:443"
        },
        {
            "message": "Missing item type\nTotally remove the overlay from the DOM / destroy",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:453"
        },
        {
            "message": "Missing item type\nInner class that performs actual upload operation\nPartly taken from: http://msdn.microsoft.com/en-us/library/windows/apps/Hh700372.aspx",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:460"
        },
        {
            "message": "Missing item type\nStarts upload of given file",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:468"
        },
        {
            "message": "Missing item type\nCalled when upload is completed",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:526"
        },
        {
            "message": "Missing item type\nIf file upload fails",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:601"
        },
        {
            "message": "Missing item type\nCalled by uploader as upload progresses",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:639"
        },
        {
            "message": "Missing item type\ncopied from TAG.Util.UI because the boxes have crap CSS. tru fax.",
            "line": " js/TAG/authoring/TAG.Authoring.FileUploader.js:676"
        },
        {
            "message": "Missing item type\ncheck for conversion in interval",
            "line": " js/TAG/authoring/TAG.Authoring.SettingsView.js:214"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/authoring/TAG.Authoring.SettingsView.js:246"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/authoring/TAG.Authoring.SettingsView.js:276"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/authoring/TAG.Authoring.SettingsView.js:289"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/authoring/TAG.Authoring.SettingsView.js:298"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/authoring/TAG.Authoring.SettingsView.js:5281"
        },
        {
            "message": "Missing item type\nSet a metadata value for the active media content.",
            "line": " js/TAG/layout/TAG.Layout.ArtworkEditor.js:1205"
        },
        {
            "message": "Missing item type\nGet metadata values for the active media content.",
            "line": " js/TAG/layout/TAG.Layout.ArtworkEditor.js:1215"
        },
        {
            "message": "Missing item type\nCreates additional metadata fields",
            "line": " js/TAG/layout/TAG.Layout.ArtworkEditor.js:1967"
        },
        {
            "message": "Missing item type\nMINIMAP CODE. bleveque: didn't rewrite this; separate issue\n                        if some variable names are off now, let me know",
            "line": " js/TAG/layout/TAG.Layout.ArtworkViewer.js:836"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/layout/TAG.Layout.ArtworkViewer.js:922"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/layout/TAG.Layout.ArtworkViewer.js:935"
        },
        {
            "message": "Missing item type\nCreate a drawer with a disclosure button used to display\nhotspots, assets, tours. The returned jQuery object has\na property called \"contents\" which should be used to add\nbuttons or messages to the contents of the drawer.",
            "line": " js/TAG/layout/TAG.Layout.ArtworkViewer.js:1129"
        },
        {
            "message": "Missing item type\nCreate a drawer (e.g., for list of related tours or the artwork's description)",
            "line": " js/TAG/layout/TAG.Layout.ArtworkViewer.js:1179"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/layout/TAG.Layout.CollectionsPage.js:1012"
        },
        {
            "message": "Missing item type\nTest internet and server connections",
            "line": " js/TAG/layout/TAG.Layout.StartPage.js:43"
        },
        {
            "message": "Missing item type\nFinal layout for Tour Authoring\nAll parts of layout are container in separate files/classes\nLayout file also contains testing instructions / notes / functions",
            "line": " js/TAG/layout/TAG.Layout.TourAuthoringNew.js:3"
        },
        {
            "message": "Missing item type\nSecond row on screen, contains ComponentControls and Viewer",
            "line": " js/TAG/layout/TAG.Layout.TourAuthoringNew.js:41"
        },
        {
            "message": "Missing item type\nCreates components and sets up UI",
            "line": " js/TAG/layout/TAG.Layout.TourAuthoringNew.js:189"
        },
        {
            "message": "Missing item type\nPlayer for RIN tours",
            "line": " js/TAG/layout/TAG.Layout.TourPlayer.js:3"
        },
        {
            "message": "Missing item type\nvar selectedExhib = $('#collection-' + prevExhib.Identifier);\nselectedExhib.attr('flagClicked', 'true');\nselectedExhib.css({ 'background-color': 'white', 'color': 'black' });\n$(selectedExhib[0].firstChild).css({'color': 'black'});",
            "line": " js/TAG/layout/TAG.Layout.VideoPlayer.js:87"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:130"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:1022"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:1023"
        },
        {
            "message": "Missing item type\nBelow are the ink UI controls. They are separated into draw, text, and transparency controls.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:3195"
        },
        {
            "message": "Missing item type\nInk text UI controls (initial text creation, not edit mode)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:3201"
        },
        {
            "message": "Missing item type\nEdit ink text UI controls -- we can probably compress some of this by reusing the inkTextControls",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:3512"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:4497"
        },
        {
            "message": "Missing item type\nInk draw UI controls (for initial draw authoring, not editing mode)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:4538"
        },
        {
            "message": "Missing item type\nEdit draw controls (edit mode)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:4818"
        },
        {
            "message": "Missing item type\nInk transparency controls (initial authoring, not editing mode)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:5545"
        },
        {
            "message": "Missing item type\nEdit transparency controls (edit mode)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:5725"
        },
        {
            "message": "Missing item type\nBelow are some helper function for the creation of ink controls above",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:6187"
        },
        {
            "message": "Missing item type\nInitialize the text controls with default values\nNOT USED",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:6234"
        },
        {
            "message": "Missing item type\nInitialize the transparency controls with default values\nNOT USED",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:6250"
        },
        {
            "message": "Missing item type\nInitialize the draw controls with default values\nNOT USED",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.ComponentControls.js:6266"
        },
        {
            "message": "Missing item type\nList of constants used across multiple files and locations",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Constants.js:4"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Display.js:1369"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Display.js:1392"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Display.js:1748"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Display.js:1846"
        },
        {
            "message": "Missing item type\nContains one object for every input in the menu\nInput objects have parameters:",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.EditorMenu.js:45"
        },
        {
            "message": "Missing item type\nSets ink params to defaults",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:152"
        },
        {
            "message": "Missing item type\nHelper function to parse and multiply dimensions.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:182"
        },
        {
            "message": "Missing item type\nTakes an ellipse or rectangle and adds styling, drag events, drag handles to it.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:193"
        },
        {
            "message": "Missing item type\nAdd an ellipse to the Raphael canvas. Called by the \"Add Ellipse\" button in isolate/block ink mode",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1021"
        },
        {
            "message": "Missing item type\nDEPRECATED\nUsed to give style and drag functionality to old marquees (such as is currently in the Final\nGaribaldi Demo). Once all old marquees have been deleted from tours, this method can be tossed.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1048"
        },
        {
            "message": "Missing item type\nanalogous to add_attributes(...), but for marquees. The difference is that a marquee\nis a collection of five rectangles, and the center rectangle is the only one that gets\nthe drag handler, while the others have the color attributes.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1054"
        },
        {
            "message": "Missing item type\nAdd a rectangle to the Raphael canvas. Called by the \"Add Rectangle\" button in isolate/block ink mode",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1190"
        },
        {
            "message": "Missing item type\nAdd a text box (a textarea html element) for creating text inks.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1217"
        },
        {
            "message": "Missing item type\nPans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1293"
        },
        {
            "message": "Missing item type\nPans and resizes the ink canvas to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1354"
        },
        {
            "message": "Missing item type\nConvert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1440"
        },
        {
            "message": "Missing item type\nConstruct the path that models the overlap between new_path and existing_path in the appropriate\ntransparency mode. For example, if the paths are intersecting circles, const_path_alg returns the\noutline of the two; if one path is completely inside the other, the inner one is returned in isolate\nmode and the outer is returned in block mode. Both input paths are closed (have a trailing 'z').",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1496"
        },
        {
            "message": "Missing item type\nUses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1702"
        },
        {
            "message": "Missing item type\nA helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1755"
        },
        {
            "message": "Missing item type\nCalled if we drag on the ink canvas in eraser mode. Finds endpoints in the current paths close\nto the drag event location and splices them out of the path array.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1795"
        },
        {
            "message": "Missing item type\nTakes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1832"
        },
        {
            "message": "Missing item type\nReturns the isolate/block bounding shapes.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1861"
        },
        {
            "message": "Missing item type\nReturns the current datastring.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1869"
        },
        {
            "message": "Missing item type\nUses path data representing ellipses and rectangles to get the path representing the ultimate block\nor isolate shape.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1877"
        },
        {
            "message": "Missing item type\nHelper function to get artwork's relative coordinates within the viewer.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1913"
        },
        {
            "message": "Missing item type\nHelper function to get the svg element created by Raphael.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1922"
        },
        {
            "message": "Missing item type\nSearches the current datastring for ellipses and rectangles, stores their information in bounding_shapes.\nAlso stores their coordinates and types in an array shapes and calls shapes_to_paths on shapes\nto transform them to path format.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1930"
        },
        {
            "message": "Missing item type\nReturns true if the text box containing an ink being edited/authored is empty",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1980"
        },
        {
            "message": "Missing item type\nHelper function to check if there is actually a valid ink to attach/save during ink authoring/editing. For texts, need to use isTextboxEmpty.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:1988"
        },
        {
            "message": "Missing item type\nDisplay warning message if ink cannot be loaded",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2020"
        },
        {
            "message": "Missing item type\nChecks if currently inside display",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2032"
        },
        {
            "message": "Missing item type\nHelper function to do some preprocessing on text inks before linking them.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2053"
        },
        {
            "message": "Missing item type\nHelper function to do some preprocessing on text inks before creating them unattached.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2091"
        },
        {
            "message": "Missing item type\nHelper function to do some preprocessing on transparencies before linking them.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2106"
        },
        {
            "message": "Missing item type\nHelper function to do some preprocessing on transparencies before creating them unattached.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2139"
        },
        {
            "message": "Missing item type\nFunction to link an ink to an artwork. Called for all types of inks (possibly after preprocessing, in\nthe cases of texts and transparencies).\nreturn     true if linking was successful, false if warnings",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2154"
        },
        {
            "message": "Missing item type\nFunction to create an unattached ink. Called for all types of inks (possibly after preprocessing, in\nthe cases of texts and transparencies).\nreturn     true if creation was successful, false if warnings",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2261"
        },
        {
            "message": "Missing item type\nLoads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2358"
        },
        {
            "message": "Missing item type\nDraws a transparency to the canvas and adds the correct styling. Also sets trans_currpath, which keeps track of current transparency path.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2526"
        },
        {
            "message": "Missing item type\nLoads a transparency's bounding shapes -- type boundrect and boundellipse -- for editing transparencies",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2540"
        },
        {
            "message": "Missing item type\nDEPRECATED -- constructor for old marquees",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2602"
        },
        {
            "message": "Missing item type\nUsing the point pt, computes the incoming bezier anchor coordinates for the next point (next) in the path.\nThis is done by using the points' types (if pt and next are both endpoints, pt.point.ax2, .ay2 give the relevant information, etc).",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2614"
        },
        {
            "message": "Missing item type\nHelper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2649"
        },
        {
            "message": "Missing item type\nUsing the point next, computes the outgoing bezier anchor coordinates for the point pt on the path.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2657"
        },
        {
            "message": "Missing item type\nPans all objects in the canvas by dx, dy.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2678"
        },
        {
            "message": "Missing item type\nPans all objects in the canvas by dx, dy.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2769"
        },
        {
            "message": "Missing item type\nSometimes points on the boundary of a shape do not register as being inside the shape, so check a few surrounding\npoints as well. If enough of them (2) are inside, call the point inside. This isn't bulletproof, but it should\nwork most of the time.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2798"
        },
        {
            "message": "Missing item type\nHelper function to convert to relative coordinates.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2818"
        },
        {
            "message": "Missing item type\nReturns 1 if any points in order_added match pt.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2828"
        },
        {
            "message": "Missing item type\nRemoves all Raphael elements from the canvas and clears arrays",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2841"
        },
        {
            "message": "Missing item type\nResizes all elements in the ink canvas.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2856"
        },
        {
            "message": "Missing item type\nSet the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2945"
        },
        {
            "message": "Missing item type\n-     * Checks whether two points are effectively the same\n     * @param pt1, pt2   the points in question\n     * @param err        how close the points have to be to be considered the same\n     * @return    whether or not the points are the same (true/false)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2969"
        },
        {
            "message": "Missing item type\nHelper function to convert a textbox to a Raphael text element. //========== should be deprecated",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:2982"
        },
        {
            "message": "Missing item type\nSetter for the artname of a linked ink's associated artwork",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3006"
        },
        {
            "message": "Missing item type\nSet the svg element to handle all pointer events so we can draw on it\n(and also to prevent manipulation of artwork during ink creation)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3014"
        },
        {
            "message": "Missing item type\nSetter (sets experience id of ink)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3026"
        },
        {
            "message": "Missing item type\nSets the initial artwork keyframe",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3034"
        },
        {
            "message": "Missing item type\nSets the ink mode",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3042"
        },
        {
            "message": "Missing item type\nSets the internal reference to the old opacity of the ink track",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3051"
        },
        {
            "message": "Missing item type\nSimilar to the retrieveOrigDims function, but uses a proxy variable.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3059"
        },
        {
            "message": "Missing item type\nSimilar to add_attributes, gives text boxes drag functionality, drag handles, and undo/redo functionality.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3086"
        },
        {
            "message": "Missing item type\nTakes transparency bounding shapes and converts them to bezier paths",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3218"
        },
        {
            "message": "Missing item type\nDebugging function; prints out the ink path in our ink track",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3257"
        },
        {
            "message": "Missing item type\nScales a path representing a transparency/marquee.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3270"
        },
        {
            "message": "Missing item type\nReturns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3306"
        },
        {
            "message": "Missing item type\nWhen we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3384"
        },
        {
            "message": "Missing item type\nThe following are setters for various ink parameters",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3420"
        },
        {
            "message": "Missing item type\nThe following are getters for different ink parameters.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3487"
        },
        {
            "message": "Missing item type\nThe following are essentially setters, but they take in an id, grab the\nvalue of the dom element with that id, and set the correct variable accordingly",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.InkAuthoring.js:3522"
        },
        {
            "message": "Missing item type\nHelper function to set currentKeyframe and other vars in prep for movement",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js:252"
        },
        {
            "message": "Missing item type\nFunctions for changing keyframe style based on selected/deselected status of keyframes",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Keyframe.js:456"
        },
        {
            "message": "Missing item type\nUI Tests:\nDrag playhead and playback location fader TODO: test ensuring RIN and playhead are synced\nClick \"Play\" button twice (start and stop)",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:3"
        },
        {
            "message": "Missing item type\nAutomated tests module for TourAuthoring",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:9"
        },
        {
            "message": "Missing item type\nMakes a bunch of tracks and displays and keyframes and adds them to the DOM",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:31"
        },
        {
            "message": "Missing item type\nMakes two tracks w/ alternating display regions and calls onUpdate on the timeline",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:83"
        },
        {
            "message": "Missing item type\nMaterial for demo",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:104"
        },
        {
            "message": "Missing item type\nDumb + fast test of viewer updating using pre-coded TAGTest narrative",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:157"
        },
        {
            "message": "Missing item type\nTesting JSON RINdata + server send/recieve",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:165"
        },
        {
            "message": "Missing item type\nTest creating tours",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:182"
        },
        {
            "message": "Missing item type\nTest modification of Name, Content, and Thumbnail fields\nThese are the only fields Tour Authoring needs to worry about",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:191"
        },
        {
            "message": "Missing item type\nTest deletion",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:209"
        },
        {
            "message": "Missing item type\nHack to get audio loaded for editing",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Tests.js:216"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.TimeManager.js:194"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:588"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:834"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:953"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1033"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1244"
        },
        {
            "message": "Missing item type\nCreates a new InkController and loads in the datastring of the track.\nShows the edit draw controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1432"
        },
        {
            "message": "Missing item type\nCreates a new InkController and loads in the datastring of the track.\nShows the edit text controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1444"
        },
        {
            "message": "Missing item type\nCreates a new InkController and loads in the datastring of the track.\nShows the edit highlighting controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1457"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1564"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1643"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1665"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Timeline.js:1672"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Track.js:1138"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Track.js:2467"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/tourauthoring/TAG.TourAuthoring.Viewer.js:161"
        },
        {
            "message": "Missing item type\nReinitialize the timer with new timerPairs\nmethod reinitialize",
            "line": " js/TAG/util/TAG.Util.IdleTimer.js:85"
        },
        {
            "message": "Missing item type\nvar newLContainerSize = {\n    x: $(viewerL.container).width(),\n    y: $(viewerL.container).height()\n};\nviewerL.viewport.resize(newLContainerSize, false);\nviewerL.viewport.applyConstraints();\nviewerL.viewport.update();",
            "line": " js/TAG/util/TAG.Util.Splitscreen.js:169"
        },
        {
            "message": "Missing item type\nAll the layout specific edits that need to be made upon exit\nTheoretically, all of this should get wrapped into layout classes\nbut not sure the class pattern used allows for it\nTODO document",
            "line": " js/TAG/util/TAG.Util.Splitscreen.js:211"
        },
        {
            "message": "Missing item type\nfunction to check if the videos have been converted.\nAlso, show the display in the track after conversion is done",
            "line": " js/TAG/util/TAG.Util.js:1513"
        },
        {
            "message": "Missing item type\nUsed by web app code to slide in pages given their html files",
            "line": " js/TAG/util/TAG.Util.js:1641"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/util/TAG.Util.js:1664"
        },
        {
            "message": "Missing item type\nTake in a color and return a dimmed version of that color (divide rgb by k)",
            "line": " js/TAG/util/TAG.Util.js:1690"
        },
        {
            "message": "Missing item type\nTake in a color (in '#abcdef' format) and an opacity (0-1) and return an rgba(..) string",
            "line": " js/TAG/util/TAG.Util.js:1713"
        },
        {
            "message": "Missing item type\nUtils for Animation, splitscreen, colors and the like",
            "line": " js/TAG/util/TAG.Util.js:1734"
        },
        {
            "message": "Missing item type",
            "line": " js/TAG/util/TAG.Util.js:2240"
        },
        {
            "message": "Missing item type\nFollowing functions transition between pages while in splitscreen mode",
            "line": " js/TAG/util/TAG.Util.js:2764"
        },
        {
            "message": "Missing item type\nUse _Split fn's for transitions that need to preserve splitscreen\nNote: pages passed in to this function should have a top-level root node\n(true of exhibition, catalog and artmode)",
            "line": " js/TAG/util/TAG.Util.js:2767"
        },
        {
            "message": "Missing item type\nUse for any page transition that does not need to preserve splitscreen",
            "line": " js/TAG/util/TAG.Util.js:2888"
        },
        {
            "message": "Missing item type\nTake in a color and return a dimmed version of that color (divide rgb by k)",
            "line": " js/TAG/util/TAG.Util.js:3033"
        },
        {
            "message": "Missing item type\nCreates a picker (e.g. click add/remove media in the artwork editor) to manage\n  associations between different TAG components (exhib, artworks, assoc media)",
            "line": " js/TAG/util/TAG.Util.js:3230"
        },
        {
            "message": "Missing item type\nCreates the media panel",
            "line": " js/TAG/util/TAG.Util.js:3599"
        },
        {
            "message": "Missing item type\nBuilt-in object extensions",
            "line": " js/TAG/util/TAG.Util.js:6223"
        },
        {
            "message": "Missing item type\nIf specified object is in the array, remove it",
            "line": " js/TAG/util/TAG.Util.js:6246"
        },
        {
            "message": "Missing item type\nInsert object into array based on comparator fn given\nAssumes array is already sorted!",
            "line": " js/TAG/util/TAG.Util.js:6260"
        },
        {
            "message": "Missing item type\nConstrain a number to given range",
            "line": " js/TAG/util/TAG.Util.js:6279"
        },
        {
            "message": "Missing item type\n----------------------------------------------\n        |                                            |  <--- holder\n        | ------------------------------------------ |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | <------ thumbHolderDiv\n        | |                                        | |\n        | |              THUMBNAIL                 | |\n        | |                IMAGE                   | |\n        | |                 HERE                  <--------- thumbnailImage\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | |                                        | |\n        | ------------------------------------------ |\n        | ------------------------------------------ |\n        | |             NAME OF DOQ                | <--- titleDiv\n        | |                                        | |\n        | ------------------------------------------ |\n        ----------------------------------------------",
            "line": " js/TAG/util/TAG.Util.js:6334"
        },
        {
            "message": "Missing item type\nBuilt-in object extensions",
            "line": " js/TAG/util/TAG.Util.js:6392"
        },
        {
            "message": "Missing item type\nIf specified object is in the array, remove it",
            "line": " js/TAG/util/TAG.Util.js:6415"
        },
        {
            "message": "Missing item type\nInsert object into array based on comparator fn given\nAssumes array is already sorted!",
            "line": " js/TAG/util/TAG.Util.js:6429"
        },
        {
            "message": "Missing item type\nConstrain a number to given range",
            "line": " js/TAG/util/TAG.Util.js:6448"
        },
        {
            "message": "Missing item type\nSoft delete a hotspot by deleting both the hotspot linq and doq files",
            "line": " js/TAG/worktop/TAG.Worktop.Database.js:1307"
        },
        {
            "message": "Missing item type\nThis file is responsible for performing initial setup. Please see the comments for load\nand init below.",
            "line": " js/core.js:3"
        },
        {
            "message": "Missing item type\nPans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "line": " js/tagInk.js:111"
        },
        {
            "message": "Missing item type\nConvert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "line": " js/tagInk.js:174"
        },
        {
            "message": "Missing item type\nUses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "line": " js/tagInk.js:230"
        },
        {
            "message": "Missing item type\nA helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "line": " js/tagInk.js:282"
        },
        {
            "message": "Missing item type\nTakes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "line": " js/tagInk.js:322"
        },
        {
            "message": "Missing item type\nLoads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "line": " js/tagInk.js:342"
        },
        {
            "message": "Missing item type\nHelper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "line": " js/tagInk.js:444"
        },
        {
            "message": "Missing item type\nPans all objects in the canvas by dx, dy.",
            "line": " js/tagInk.js:452"
        },
        {
            "message": "Missing item type\nHelper function to convert to relative coordinates.",
            "line": " js/tagInk.js:507"
        },
        {
            "message": "Missing item type\nRemoves all Raphael elements from the canvas and clears arrays",
            "line": " js/tagInk.js:517"
        },
        {
            "message": "Missing item type\nResizes all elements in the ink canvas.",
            "line": " js/tagInk.js:532"
        },
        {
            "message": "Missing item type\nSet the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "line": " js/tagInk.js:584"
        },
        {
            "message": "Missing item type\nSetter for the artname of a linked ink's associated artwork",
            "line": " js/tagInk.js:608"
        },
        {
            "message": "Missing item type\nSetter (sets experience id of ink)",
            "line": " js/tagInk.js:616"
        },
        {
            "message": "Missing item type\nSets the initial artwork keyframe",
            "line": " js/tagInk.js:624"
        },
        {
            "message": "Missing item type\nSets the ink mode",
            "line": " js/tagInk.js:632"
        },
        {
            "message": "Missing item type\nReturns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "line": " js/tagInk.js:641"
        },
        {
            "message": "Missing item type\nWhen we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "line": " js/tagInk.js:700"
        },
        {
            "message": "Missing item type\nTAG testing framework\n\nThe TEST SCRIPTS section below has a few test routines. These\nroutines are made public at the bottom of this file. They call\nrunTests on a collection of TEST SCRIPT ACTIONs, which are defined\nin the second section. These are 'atomic' actions that can\nbe combined to make more complex routines. There are a few\nTEST SUPPORT FUNCTIONs defined in the last section below.",
            "line": " js/tests.js:3"
        },
        {
            "message": "Missing item type\n|**** TEST SCRIPTS ****|",
            "line": " js/tests.js:32"
        },
        {
            "message": "Missing item type\n|**** TEST SCRIPT ACTIONS ****|",
            "line": " js/tests.js:71"
        },
        {
            "message": "Missing item type\n|**** TESTING SUPPORT FUNCTIONS ****|",
            "line": " js/tests.js:249"
        },
        {
            "message": "Missing item type\nRun a series of tests",
            "line": " js/tests.js:253"
        },
        {
            "message": "Missing item type\nCalled by runTests, calls a single test, then calls runTest with incremented index",
            "line": " js/tests.js:272"
        },
        {
            "message": "Missing item type\nHelper function to concatenate different testing objects",
            "line": " js/tests.js:293"
        },
        {
            "message": "Missing item type\nCreate click event on the input element",
            "line": " js/tests.js:321"
        },
        {
            "message": "Missing item type\nSimulate a pinch zoom event",
            "line": " js/tests.js:330"
        },
        {
            "message": "Missing item type\nCreate mousemove event -- be careful to leave enough interval time to call this",
            "line": " js/tests.js:337"
        },
        {
            "message": "Missing item type\nRecursive call to execute mousemove events",
            "line": " js/tests.js:394"
        },
        {
            "message": "Missing item type\nLinearly interpolate between start and stop by t in [0,1]",
            "line": " js/tests.js:432"
        },
        {
            "message": "Missing item type\nHighlight the target of a testing event (visualize events)",
            "line": " js/tests.js:440"
        },
        {
            "message": "Missing item type",
            "line": " js/tests.js:504"
        },
        {
            "message": "Missing item type\nreturns random element from input array",
            "line": " js/tests.js:516"
        },
        {
            "message": "Missing item type\nReturns a basic error callback function (long-term, should define\ncase-specific error funcs that actually do some error handling).",
            "line": " js/tests.js:533"
        },
        {
            "message": "Missing item type\nShow an overlay explaining that the first step in the test is to\nnavigate to the correct starting page.",
            "line": " js/tests.js:546"
        },
        {
            "message": "Missing item type\nCancels the currently-running test",
            "line": " js/tests.js:592"
        },
        {
            "message": "Missing item type\nHandles returned data from server after a get request.",
            "line": " telemetry/telemetryTest.js:29"
        },
        {
            "message": "Missing item type\nMake a request to the telemetry server",
            "line": " telemetry/telemetryTest.js:117"
        },
        {
            "message": "Missing item type\nThis file takes care of compiling jade and stylus files and\nbuilding TAG.js by concatenating a collection of source js\nfiles. The source files can be found in the JSSRC array below.\n\nTo use Grunt, run\n\n   $ grunt\n\nfrom the command line. You can also run\n\n   $ grunt watch\n\nwhich will watch for saved changes in any files in the WATCH\narray below. WATCH contains all of the js files in JSSRC (when\nany of our source files change, we want to recompile TAG.js)\nas well as the styl and jade files (when these change, we want\nto recompile respective css and html files).\n\nWe use Grunt for a couple reasons:\n  - it's a pain to always compile jade and stylus by hand\n  - it's nice to be able to include a single js file (TAG.js)\n    rather than a whole collection of them, and doing so lets us\n    put all TAG code -- including third-party libraries we use --\n    inside a contained scope, so our variables don't clobber those\n    in the host site's code\n\nTo look further into the second point above, you can take a look\nat the \"concat\" task below. It concatenates a bunch of js files\ntogether inside a \"banner\" and a \"footer.\" The banner, which will\nappear at the top of TAG.js, defines a function (TAG) that wraps all\nof our code and declares some global variables. The footer appends a\nclosing curly brace to the very end of the file to finish the TAG\nfunction.",
            "line": " Gruntfile.js:1"
        }
    ]
}